<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>金汇移动开发团队</title>
  
  <subtitle>技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jhmobile.github.io/"/>
  <updated>2018-11-06T02:08:44.289Z</updated>
  <id>http://jhmobile.github.io/</id>
  
  <author>
    <name>jinhui-mobile</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决cnpm私服无法安装react-native的问题</title>
    <link href="http://jhmobile.github.io/2018/11/06/%E8%A7%A3%E5%86%B3cnpm%E7%A7%81%E6%9C%8D%E6%97%A0%E6%B3%95%E5%AE%89%E8%A3%85react-native%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://jhmobile.github.io/2018/11/06/解决cnpm私服无法安装react-native的问题/</id>
    <published>2018-11-06T01:16:02.000Z</published>
    <updated>2018-11-06T02:08:44.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>需要在RN项目中安装react-native的依赖，由于项目package.json中既有对私有库的依赖，也有对第三方库的依赖，因此本地镜像地址使用的是私有cnpm仓库（2.10.0）。但是在安装react-native的时候，其中一个RN依赖的库metro无法安装，报<code>No compatible version found: metro</code>的错误，导致RN也安装失败。</p><h2 id="一些尝试"><a href="#一些尝试" class="headerlink" title="一些尝试"></a>一些尝试</h2><p>首先google一下错误信息，发现这也是个常见错误，但不同的库错误原因不一样，无法聚焦，所以没有继续深入看这个问题。</p><p>然后去cnpm私服的web端做了一个同步metro的操作<code>http://cnpm-web.jinhui365.cn/sync/metro</code>，发现报错<code>ER_TRUNCATED_WRONG_VALUE_FOR_FIELD: Incorrect string value:</code>，把这错误在google了一下，<a href="https://stackoverflow.com/questions/10957238/incorrect-string-value-when-trying-to-insert-utf-8-into-mysql-via-jdbc" target="_blank" rel="noopener">第一个结果</a>中的问题与这个错误非常一致，最高赞的回复也很明确，是因为mysql的某个字段使用的是utf8编码，只能支持3个字节，改成utf8mb4编码就可以了。</p><h2 id="处理步骤"><a href="#处理步骤" class="headerlink" title="处理步骤"></a>处理步骤</h2><h3 id="修改cnpm源码"><a href="#修改cnpm源码" class="headerlink" title="修改cnpm源码"></a>修改cnpm源码</h3><ol><li><p>将数据库编码和表的编码都改成utf8mb4</p></li><li><p>修改models/module.js文件，在module定义的options中增加<code>charset: &#39;utf8mb4&#39;</code>的配置</p></li><li><p>修改common/sequelize.js文件，config.database的定义中，增加<code>dialectOptions: {charset:&#39;utf8mb4&#39;},</code>的配置</p></li><li><p>在根目录执行<code>bin/nodejsctl stop</code>,<code>bin/nodejsctl start</code>重启服务。</p></li><li><p>尝试通过cnpm私服安装react-native，正常通过</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;需要在RN项目中安装react-native的依赖，由于项目package.json中既有对私有库的依赖，也有对第三方库的依赖，因此本地镜像
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native iOS本地私有库实践</title>
    <link href="http://jhmobile.github.io/2018/10/31/React-Native-iOS%E6%9C%AC%E5%9C%B0%E7%A7%81%E6%9C%89%E5%BA%93%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jhmobile.github.io/2018/10/31/React-Native-iOS本地私有库实践/</id>
    <published>2018-10-31T01:56:00.000Z</published>
    <updated>2018-11-05T11:04:15.224Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>Facebook官方对react-native（下面简称RN）在iOS端的集成方式为本地Pod库，这种方式有两个缺点：</p><ol><li><p>项目更新RN依赖版本较为繁琐，需要对项目中的node_modules文件夹进行文件操作，这种方式不利于模块化和版本管理</p></li><li><p>对pod形式的库项目支持不友好，pod库的依赖只能支持name+version的形式，无法支持本地源码形式的依赖</p></li></ol><p>综上，需要在公司私有Pod仓库中添加对RN的支持。</p><h2 id="一些尝试"><a href="#一些尝试" class="headerlink" title="一些尝试"></a>一些尝试</h2><h3 id="常规方式"><a href="#常规方式" class="headerlink" title="常规方式"></a>常规方式</h3><p>常规方式Pod库的常规操作方式为先lint再push，这种方式在RN上会遇到很多错误，解决了一批错误后最终停止在一个x86_64的错误上：<code>Undefined symbols for architecture x86_64</code>，这是一个比较常见的编译错误，但是尝试了很多方式后仍然无法解决。这里记录下关键问题，供后续参考：</p><ul><li>lint和push的时候需要增加几个关键选项：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--use-libraries#不加会报一些c++库找不到的错误</span><br><span class="line">--allow-warnings#不加只有warning也无法lint通过</span><br><span class="line">--verbose#增加一些关键信息</span><br></pre></td></tr></table></figure><ul><li>如果对本地仓库有依赖，sources要指定本地私有仓库，不然默认是查找Cocoapods官方仓库</li></ul><h3 id="曲线方式"><a href="#曲线方式" class="headerlink" title="曲线方式"></a>曲线方式</h3><p>另外一个思路是考虑先把RN整体打成framework，再集成到Pod库中。这种方式最终停止在一个错误：<code>invalid bitcode signature</code>，跟上面的问题一样，没有搞定。</p><h3 id="手动操作Spec仓库方式"><a href="#手动操作Spec仓库方式" class="headerlink" title="手动操作Spec仓库方式"></a>手动操作Spec仓库方式</h3><p>在没有思路的时候，在google尝试搜索关键词<code>react-native  podspec</code>，发现一篇文章：<a href="https://imfong.com/post/Private-Pods-Add-react-native" target="_blank" rel="noopener">私有Pods集成react-native库</a>，里面分享通过<code>pod ipc spec</code>命令将.podspec文件转成.podspec.json格式文件，然后将代码和.podspec.json分别提交到代码仓库和Pod仓库的方式，绕过lint和push的常规步骤。</p><p>这里需要注意的是，代码提交到私有源码库和podspec提交到私有Pod库是互相独立的操作。可以只提交Podspec到私有Pod库，但是代码提交到到私有源码库有两个好处<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 内部网络更新速度快</span><br><span class="line">2. 可以修改代码后自定义版本</span><br></pre></td></tr></table></figure></p><p>尝试了一下，虽然遇到一些编译错误，但不是整体编译不过，而是一些RN内部类找不到，说明至少RN放到Pod仓库了。沿着这个思路往下探索，最终解决。</p><p>其中RN依赖了一些第三方库，包括folly、yoga、glog等，对于RN依赖的第三方库，处理原则是如果在官方Pod仓库没有对应的版本，都需要以私有Pod的方式提供。具体需要处理哪些库，需要根据当前RN版本来判断（例如Folly的2016.10.31.00在官方库没有，但是2016.09.26.00却能支持）。</p><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><ol><li>去<code>https://github.com/facebook/react-native/tags</code>下载对应版本的RN源码包，解压缩后将源码提交到本地仓库<a href="mailto:`git@gitlab.jinhui365.cn" target="_blank" rel="noopener">`git@gitlab.jinhui365.cn</a>:mobile/react-native.git` master分支。这里需要注意的问题是要保证该版本所有文件都会提交，包括.开头的文和文件夹。</li><li>在gitlab上为新版本打一个tag，tag名称约定为v{版本号}，例如版本号为0.57.4，则tag名称为v0.57.4。</li><li>进入源码根目录，执行<code>pod ipc spec React.podspec &gt;&gt; React.podspec.json</code>。这里需要注意的是不要污染本地源码仓库，可以在另外一份源码拷贝上操作。</li><li><p>打开React.podspec.json文件，将source字段修改为本地的RN源码仓库地址和对应地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;source&quot;: &#123;</span><br><span class="line">    &quot;git&quot;: &quot;git@gitlab.jinhui365.cn:mobile/react-native.git&quot;,</span><br><span class="line">    &quot;tag&quot;: &quot;v0.57.4&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>将修改后的React.podspec.json放到私有Pod仓库对应的目录下提交。例如<code>React/0.57.4/React.podspec.json</code></p></li><li>在源码根目录下，进入<code>ReactCommon/yoga</code>，执行<code>pod ipc spec yoga.podspec &gt;&gt; yoga.podspec.json</code></li><li><p>打开yoga.podspec.json，将source字段修改为本地的RN源码仓库地址和对应地址，并将source_files字段修改为<code>&quot;ReactCommon/yoga/**/*.{cpp,h}&quot;</code>，public_header_files字段修改为：<code>&quot;ReactCommon/yoga/yoga/{Yoga,YGEnums,YGMacros}.h&quot;</code></p></li><li><p>将修改后的yoga.podspec.json放到私有Pod仓库对应的目录下提交。例如<code>yoga/0.57.4.React/yoga.podspec.json</code></p></li><li><p>本地址行<code>pod repo update {仓库名}</code></p></li><li><p>至此，可以在项目中通过name+version的形式引用RN的pod依赖。</p></li></ol><h2 id="0-53-3的问题"><a href="#0-53-3的问题" class="headerlink" title="0.53.3的问题"></a>0.53.3的问题</h2><p>RN在0.53.3上有一些编译问题，李杨在<a href="https://jhmobile.github.io/2018/05/08/React-Native%E6%B7%B7%E7%BC%96%E5%AD%A6%E4%B9%A0/#iOS%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">React-Native混编学习#iOS环境搭建</a>  提到过相关解决方案，已按照该方案经将源码修改后tag为0.53.4。可以通过引用0.53.4来规避这些问题。</p><h2 id="私有库依赖私有库"><a href="#私有库依赖私有库" class="headerlink" title="私有库依赖私有库"></a>私有库依赖私有库</h2><p>金汇移动端目前负责的业务较多，不同的业务之间会复用工具库（如路由库、日志库等）。同一个业务功能，有可能需要在不同的App之间复用（如民工汇、支付SDK）。因此，依赖的路径为APP-&gt;业务库-&gt;非业务库。</p><p>iOS的依赖管理与Android不同。Android统一使用gradle文件来管理依赖，而iOS主项目使用Podfile管理，库项目使用podspec管理，并且库项目无法依赖本地文件。</p><p>因此新建了私有库<a href="http://gitlab.jinhui365.cn/iOS/PodLibTest" target="_blank" rel="noopener">PodLibTest</a>来测试了下，编译通过。这里记录下常见命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pod lib create PodLibTest#创建pod库项目</span><br><span class="line">pod update --no-repo-update#更新当前pod项目依赖</span><br><span class="line">pod repo update &#123;pod仓库名称&#125;#更新本地pod仓库</span><br><span class="line">pod lib lint --use-libraries --allow-warnings --verbose --sources=git@gitlab.jinhui365.cn:iOS/JHJRSpecs.git,https://github.com/CocoaPods/Specs.git#这些参数上面提到过，比较关键</span><br><span class="line">pod repo push JHJR PodLibTest.podspec  --use-libraries --allow-warnings --verbose#同样关注下参数</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>Cocoapods在依赖管理方面不够完善，提升了iOS工程化的难度等级。因此需要iOS工程师对相关领域知识研究地更深入，才能达到与Android同水平的工程化程度。</p></li><li><p>面对非常见疑难问题，通过简单的关键词搜索可能不太好找到解决方案。需要从两个方面着手，一方面多尝试关键词组合，找到和你遇到同样问题的人写的文章或帖子；一方面深入研究官方文档货项目源码，从原理层着手分析问题。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;Facebook官方对react-native（下面简称RN）在iOS端的集成方式为本地Pod库，这种方式有两个缺点：&lt;/p&gt;
&lt;ol&gt;
&lt;
      
    
    </summary>
    
    
      <category term="react-native" scheme="http://jhmobile.github.io/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>React-Native混编学习</title>
    <link href="http://jhmobile.github.io/2018/05/08/React-Native%E6%B7%B7%E7%BC%96%E5%AD%A6%E4%B9%A0/"/>
    <id>http://jhmobile.github.io/2018/05/08/React-Native混编学习/</id>
    <published>2018-05-08T06:11:36.000Z</published>
    <updated>2018-10-31T02:57:58.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-Native混编学习"><a href="#React-Native混编学习" class="headerlink" title="React-Native混编学习"></a>React-Native混编学习</h1><p>本篇主要涉及的是App和RN的混合开发环境搭建，对于基本的RN环境搭建请自行查阅<a href="https://reactnative.cn/docs/0.51/getting-started.html" target="_blank" rel="noopener">文档</a>。</p><p>这里需要着重注意的是全局依赖：</p><ul><li>node v8.1.3（nvm管理）</li><li>react-native-cli 0.53.3(npm全局包)</li><li>nrm(npm全局包，主要是为了管理npm源，切换npm源为taobao)</li><li>gulp(npm全局包，主要是打包zip压缩)</li></ul><blockquote><p>最好的方式是使用react-native init生成一个新的RN项目，参考它的package.json依赖。这里我使用的是<code>&quot;react&quot;: &quot;16.2.0&quot;</code> <code>&quot;react-native&quot;: &quot;0.53.3&quot;</code></p></blockquote><h2 id="APP配合"><a href="#APP配合" class="headerlink" title="APP配合"></a>APP配合</h2><ul><li>环境搭建<ul><li>依赖如何引入</li></ul></li><li>接口定义<ul><li>获取当前用户信息</li><li>获取当前环境状态</li><li>结束RN activity</li><li>路由跳转结构定义（互相跳转的接口）</li></ul></li><li>RN热更部分完善（Android和iOS）<ul><li>资源包地址重定义</li><li>热更代码完善</li></ul></li><li>RN开发调试<ul><li>兼容开发环境，方便我们调试（Bundle地址，开发模式启动）</li></ul></li><li>打包脚本修改<ul><li>依赖如何注入</li><li>编译问题解决</li></ul></li><li>部分常量配置<ul><li>RN服务地址常量</li><li>RN主组件名称</li><li>Bundle地址</li></ul></li><li>RN路由定义</li><li>登陆验证问题</li></ul><h2 id="android环境搭建"><a href="#android环境搭建" class="headerlink" title="android环境搭建"></a>android环境搭建</h2><h3 id="基础部分"><a href="#基础部分" class="headerlink" title="基础部分"></a>基础部分</h3><ul><li>RNApp嵌入原生</li><li>原生跳转RN路由</li><li>原生和RN的通信</li><li>RN资源管理</li><li>RN开发调试</li><li>其他问题<ul><li>原生加载RN白屏问题</li><li>回退问题</li></ul></li></ul><h3 id="RNApp嵌入原生"><a href="#RNApp嵌入原生" class="headerlink" title="RNApp嵌入原生"></a>RNApp嵌入原生</h3><h4 id="1-依赖引入"><a href="#1-依赖引入" class="headerlink" title="1. 依赖引入"></a>1. 依赖引入</h4><p>引入<code>node_modules/react-native/android</code></p><ul><li><p>主build.gradle 添加</p><pre><code>maven {    // All of React Native (JS, Android binaries) is installed from npm    url &quot;$rootDir/../node_modules/react-native/android&quot;}</code></pre></li><li>app/build.gradle 添加 <code>compile &quot;com.facebook.react:react-native:0.53.3&quot;</code><blockquote><p>后需改为我们的android包管理</p></blockquote></li></ul><h4 id="2-MyApplication类继承ReactApplication"><a href="#2-MyApplication类继承ReactApplication" class="headerlink" title="2. MyApplication类继承ReactApplication"></a>2. MyApplication类继承ReactApplication</h4><ul><li>onCreate中添加<code>SoLoader.init(this, false);</code></li><li><p>Override <code>public ReactNativeHost getReactNativeHost() {  return mReactNativeHost;}</code>代码如下：</p><pre><code>private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {  @Nullable  @Override  protected String getJSBundleFile() { // 定义RN Bundle文件地址    return super.getJSBundleFile(); // 默认地址为assets/index.android.bundle  }  @Override  public boolean getUseDeveloperSupport() { // 定义DEBUG模式      return BuildConfig.DEBUG;  }  @Override  protected List&lt;ReactPackage&gt; getPackages() { // RN包载入      return Arrays.&lt;ReactPackage&gt;asList(              new MainReactPackage(),              new CommPackage(); // 载入公共包，见原生和RN通信      );  }};</code></pre></li></ul><blockquote><p>后需重新定义Bundle文件地址，使之能够热更。</p></blockquote><h4 id="3-RNActivity编写"><a href="#3-RNActivity编写" class="headerlink" title="3. RNActivity编写"></a>3. RNActivity编写</h4><pre><code>public class MyReactActivity extends ReactActivity {  public Bundle getBundle() { // 获取props入参      return getIntent().getExtras();  }  protected @Nullable String getMainComponentName() { // 定义RN组件名称      return &quot;MyReactNativeApp&quot;;  }  @Override  protected ReactActivityDelegate createReactActivityDelegate() { // 通过getLaunchOptions传值      return new ReactActivityDelegate(this, getMainComponentName()) {           @Nullable          @Override          protected Bundle getLaunchOptions() {              return getBundle();          }      };  }</code></pre><p>  }</p><p>至此，通过startActivity就能够正常打开一个RNApp了。</p><h3 id="原生跳转RN路由"><a href="#原生跳转RN路由" class="headerlink" title="原生跳转RN路由"></a>原生跳转RN路由</h3><p>这里跳转可以有很多方式，不过最根本的是如何通过原生将要跳转的路由传递给RN。<br>主要分为两大类方式：（见本篇原生和RN通信）</p><ul><li>主动传递</li><li>被动传递</li></ul><p>这里我采用的是主动传递中的Props传递。</p><p>在原生开启RNApp的时候，可以传递一个Bundle作为最初的Props，路由及部分参数信息通过这个Bundle带给RN。</p><p><strong>Android部分</strong></p><ul><li><p>ReactActivityDelegate类</p><pre><code>protected void loadApp(String appKey) {  if (mReactRootView != null) {    throw new IllegalStateException(&quot;Cannot loadApp while app is already running.&quot;);  }  mReactRootView = createRootView();  mReactRootView.startReactApplication(    getReactNativeHost().getReactInstanceManager(),    appKey,    getLaunchOptions()); // 在这里有个getLaunchOptions方法，就是传递Bundle的地方  getPlainActivity().setContentView(mReactRootView);}protected @Nullable Bundle getLaunchOptions() {  return null;}</code></pre></li><li>MyReactActivity类<br>我们这里通过在MyReactActivity类里重载getLaunchOptions方法，传递Bundle（参考RNApp嵌入原生代码）</li></ul><p><strong>RN部分</strong><br>  RN这里采用了<code>react-native-router-flux</code>作为路由管理插件。这里需要注意的是版本问题，测试发现<code>&quot;react-native-router-flux&quot;: &quot;^4.0.0-beta.25&quot;</code>， <code>&quot;react-navigation&quot;: &quot;^1.0.0-beta.22&quot;</code>可用。</p><p>相关代码如下：</p><pre><code>import React from &apos;react&apos;;import { Router, Scene, Actions } from &apos;react-native-router-flux&apos;;import { getUserInfo, finishActivity } from &apos;./communication&apos;import PageOne from &apos;./modules/PageOne&apos;import PageTwo from &apos;./modules/PageTwo&apos;import PageThree from &apos;./modules/PageThree&apos;import PageFour from &apos;./modules/PageFour&apos;export default class App extends React.Component {  constructor(props) {    super(props);    console.log(&quot;RN启动&quot;);  }  componentDidMount(){    const rnKey = this.props.rnKey || &quot;PageOne&quot;;    Actions.reset(rnKey, this.props);  }  // 导航栏回退方法  onBack () {    let popRouter = Actions.pop();    !popRouter &amp;&amp; finishActivity();  }  render() {    return (      &lt;Router&gt;        &lt;Scene key=&quot;root&quot; hideNavBar={true}&gt;          &lt;Scene key=&quot;PageOne&quot; back={true} hideNavBar={false} component={PageOne} title=&quot;PageOne&quot; onBack={() =&gt; this.onBack()}/&gt;          &lt;Scene key=&quot;PageTwo&quot; back={true} hideNavBar={false} component={PageTwo} title=&quot;PageTwo&quot; onBack={() =&gt; this.onBack()}/&gt;          {/* 用户信息获取，用户已登陆 */}          &lt;Scene key=&quot;PageThree&quot; back={true} hideNavBar={false} component={PageThree} title=&quot;PageThree&quot; onBack={() =&gt; this.onBack()}/&gt;          &lt;Scene key=&quot;PageFour&quot; back={true} hideNavBar={false} component={PageFour} title=&quot;PageFour&quot; onBack={() =&gt; this.onBack()}/&gt;        &lt;/Scene&gt;      &lt;/Router&gt;    )  }}</code></pre><h3 id="原生和RN的通信"><a href="#原生和RN的通信" class="headerlink" title="原生和RN的通信"></a>原生和RN的通信</h3><p>上面说道通信分为两种，主动传递和被动传递。这里的主动/被动是以原生为参照。具体的可以参考<a href="https://reactnative.cn/docs/0.51/communication-android.html#content" target="_blank" rel="noopener">和原生端通信</a>，这里只贴关键部分的代码。如下：</p><p><strong>Android部分</strong></p><ul><li><p>Package类</p><pre><code>package xxx;import com.facebook.react.ReactPackage;import com.facebook.react.bridge.NativeModule;import com.facebook.react.bridge.ReactApplicationContext;import com.facebook.react.uimanager.ViewManager;import java.util.ArrayList;import java.util.Collections;import java.util.List;public class CommPackage implements ReactPackage {    public CommModule mModule;    /**    * 创建Native Module    * @param reactContext    * @return    */    @Override    public List&lt;NativeModule&gt; createNativeModules(ReactApplicationContext reactContext) {        List&lt;NativeModule&gt; modules = new ArrayList&lt;&gt;();        mModule = new CommModule(reactContext);        modules.add(mModule);        return modules;    }    @Override    public List&lt;ViewManager&gt; createViewManagers(ReactApplicationContext reactContext) {        return Collections.emptyList();    }}</code></pre></li><li><p>module类</p><pre><code>public class CommModule extends ReactContextBaseJavaModule {    private ReactApplicationContext mContext;    public static final String MODULE_NAME = &quot;commModule&quot;;    public static final String EVENT_NAME = &quot;nativeCallRn&quot;;    public static final String EVENT_NAME1 = &quot;getPatchImgs&quot;;    /**    * 构造方法必须实现    * @param reactContext    */    public CommModule(ReactApplicationContext reactContext) {        super(reactContext);        this.mContext = reactContext;    }    /** 主动传递    * Native调用RN    * @param msg    */    public void nativeCallRn(String msg) {        mContext.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)                .emit(EVENT_NAME,msg);    }    /**    * Callback 方式    * rn调用Native,并获取返回值    * @param msg    * @param callback    */    @ReactMethod    public void rnCallNativeFromCallback(String msg, Callback callback) {        // 1.处理业务逻辑...        String result = &quot;处理结果：&quot; + msg;        // 2.回调RN,即将处理结果返回给RN        callback.invoke(result);    }    /**    * Promise    * @param msg    * @param promise    */    @ReactMethod    public void rnCallNativeFromPromise(String msg, Promise promise) {        Log.e(&quot;---&quot;,&quot;adasdasda&quot;);        // 1.处理业务逻辑...        String result = &quot;处理结果：&quot; + msg;        // 2.回调RN,即将处理结果返回给RN        promise.resolve(result);    }    /**    * 向RN传递常量    */    @Nullable    @Override    public Map&lt;String, Object&gt; getConstants() {        Map&lt;String,Object&gt; params = new HashMap&lt;&gt;();        params.put(&quot;Constant&quot;,&quot;我是常量，传递给RN&quot;);        return params;    }    @ReactMethod    public void startActivityFromJS(String path, ReadableMap params){        try{            Activity currentActivity = getCurrentActivity();            if(null!=currentActivity){                Map intentParams = ((ReadableNativeMap) params).toHashMap();                &lt;!--startActivity--&gt;            }        }catch(Exception e){            throw new JSApplicationIllegalArgumentException(                    &quot;不能打开Activity : &quot;+e.getMessage());        }    }    @ReactMethod    public void dataToJS(Callback successBack, Callback errorBack){        try{            Activity currentActivity = getCurrentActivity();            String result = currentActivity.getIntent().getStringExtra(&quot;data&quot;);            successBack.invoke(result);        }catch (Exception e){            errorBack.invoke(e.getMessage());        }    }}</code></pre></li></ul><p>最后在MyApplication中注入，查看上面嵌入RNApp部分的【载入公共包，见原生和RN通信】注释。</p><p><strong>RN部分</strong><br>RN部分正常引用调用就好，代码如下：</p><pre><code>import { NativeModules } from &apos;react-native&apos;;const { commModule } = NativeModules;export function startActivity (appPath, params = {}) {  if(appPath) {    commModule.startActivityFromJS(appPath, params);  }}export function finishActivity () {  commModule.activityFinish();}export function getUserInfo() {  return commModule.getUserInfo()}export function getEnv() {}// testexport function rnCallNativeFromCallback(msg, callback) {  commModule.rnCallNativeFromCallback(msg, callback);}export function rnCallNativeFromPromise(msg) {  return commModule.rnCallNativeFromPromise(msg);}export function getConstans() {  console.log(commModule.test)}</code></pre><h3 id="RN资源管理"><a href="#RN资源管理" class="headerlink" title="RN资源管理"></a>RN资源管理</h3><p>测试发现如果将打包的Bundle文件和资源文件放到统一目录下，就可以正常引用资源。<br>参考命令<code>react-native bundle --platform android --dev false  --entry-file index.js  --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/assets</code></p><p>有需要做热更的可以将资源放到SD卡中，只需要指定以下Bundle文件路径，将资源和Bundle文件放到一起就好。</p><h3 id="RN开发调试"><a href="#RN开发调试" class="headerlink" title="RN开发调试"></a>RN开发调试</h3><p>这里只说我的调试方式，更详细的请查阅<a href="https://reactnative.cn/docs/0.51/debugging.html#content" target="_blank" rel="noopener">调试文档</a>。</p><ol><li>在<code>AndroidManifest.xml</code>中添加<code>&lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;</code>启用调试模式。</li><li>通过<code>npm start</code>启动RN服务，即<code>node node_modules/react-native/local-cli/cli.js start</code>。</li><li>真机安装APP进入RNApp界面，摇动手机可以打开开发者列表，通过设置Dev Host可以连接RN服务。Reload可以重载RNApp。</li><li>通过在Android Studio输出中检索React可以查看RN的输出（包括console）。</li></ol><blockquote><p>这里的调试基于HOST Bundle获取方式上，也就是说你的Bundle获取地址应当是默认的<code>super.getJSBundleFile()</code>。</p></blockquote><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><ol><li><p>原生加载RN白屏问题<br>白屏是因为加载Bundle文件过慢导致的，这个网上有很多的解释了。这里我的解决办法是在App开启动画的Activity里执行了一次加载。</p><pre><code>private void preLoadReactNative() {    // 1.创建ReactRootView    ReactRootView rootView = new ReactRootView(this);    rootView.startReactApplication(            ((ReactApplication) getApplication()).getReactNativeHost().getReactInstanceManager(),            &quot;MyReactNativeApp&quot;,            null);}</code></pre></li><li><p>返回按键问题<br>这里的返回键分为两种，一种是手机硬件后退按键，另一种是导航栏后退按键。手机后退这里无需做处理,导航栏后退如下处理：</p><ul><li><p>RN</p><pre><code>onBack () {  let popRouter = Actions.pop();  !popRouter &amp;&amp; finishActivity(); // 判断是否为RN首页，返回原生上个页面。}</code></pre></li><li><p>原生见本篇<code>finishActivity</code>方法。</p></li></ul></li></ol><p><strong>部分代码参考<a href="https://github.com/songxiaoliang/ReactNativeApp" target="_blank" rel="noopener">ReactNativeApp</a>项目</strong></p><h2 id="iOS环境搭建"><a href="#iOS环境搭建" class="headerlink" title="iOS环境搭建"></a>iOS环境搭建</h2><p>基于Android环境搭建，iOS部署大同小异，这里仅介绍不同的部分。</p><h3 id="依赖安装"><a href="#依赖安装" class="headerlink" title="依赖安装"></a>依赖安装</h3><p>修改Podfile，添加如下内容：(环境配置参考<a href="https://reactnative.cn/docs/0.51/integration-with-existing-apps.html#content" target="_blank" rel="noopener">集成到现有原生应用</a>)</p><pre><code># &apos;node_modules&apos;目录一般位于根目录中# 但是如果你的结构不同，那你就要根据实际路径修改下面的`:path`pod &apos;React&apos;, :path =&gt; &apos;../node_modules/react-native&apos;, :subspecs =&gt; [    &apos;Core&apos;,    &apos;CxxBridge&apos;, # 如果RN版本 &gt;= 0.45则加入此行    &apos;DevSupport&apos;, # 如果RN版本 &gt;= 0.43，则需要加入此行才能开启开发者菜单    # 这里注意一下!!!添加这些解决react-navigation的native module not be null的问题    &apos;ART&apos;,    &apos;RCTActionSheet&apos;,    &apos;RCTGeolocation&apos;,    &apos;RCTImage&apos;,    &apos;RCTNetwork&apos;,    &apos;RCTPushNotification&apos;,    &apos;RCTSettings&apos;,    &apos;RCTText&apos;,    &apos;RCTVibration&apos;,    &apos;RCTWebSocket&apos;, # 这个模块是用于调试功能的    &apos;RCTLinkingIOS&apos;,]# 如果你的RN版本 &gt;= 0.42.0，则加入下面这行pod &quot;yoga&quot;, :path =&gt; &quot;../node_modules/react-native/ReactCommon/yoga&quot;# 如果RN版本 &gt;= 0.45则加入下面三个第三方编译依赖pod &apos;DoubleConversion&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec&apos;pod &apos;GLog&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/GLog.podspec&apos; // 这里修改glog为GLogpod &apos;Folly&apos;, :podspec =&gt; &apos;../node_modules/react-native/third-party-podspecs/Folly.podspec&apos;end</code></pre><p>然后运行pod install安装依赖</p><blockquote><p>这里是离线的包，怎么去合并到打包流程？（可以通过npm install去解决，不过比较麻烦）</p></blockquote><h3 id="RNApp嵌入原生-1"><a href="#RNApp嵌入原生-1" class="headerlink" title="RNApp嵌入原生"></a>RNApp嵌入原生</h3><p>和安卓一样，需要写一个类似于activity的壳子供给RN。</p><p><strong>ReactView.h</strong></p><pre><code>#import &lt;Foundation/Foundation.h&gt;@interface ReactView : UIViewController@end</code></pre><p><strong>ReactView.m</strong></p><pre><code>#import &quot;ReactView.h&quot;#import &lt;React/RCTRootView.h&gt;#import &lt;React/RCTBridgeModule.h&gt;#import &quot;commModule.h&quot; # 这里是RN和原生交互所需要的一些方法，可先去掉@interface ReactView()&lt;UINavigationBarDelegate&gt;@end@implementation ReactView- (void)viewDidLoad {    [super viewDidLoad];    // Do any additional setup after loading the view.    # 这里的http和localhost要给一下权限    NSString * strUrl = @&quot;http://localhost:8081/index.bundle?platform=ios&amp;dev=true&quot;;        NSURL * jsCodeLocation = [NSURL URLWithString:strUrl];    # 除http之外，和安卓一样，也可以通过bundle    RCTRootView * rootView = [[RCTRootView alloc]                                 initWithBundleURL:jsCodeLocation                                moduleName:@&quot;MyReactNativeApp&quot;                                initialProperties:nil                                launchOptions:nil];    self.view = rootView;}#pragma mark - 导航条处理，取消RN的导航栏- (void)navigationController:(UINavigationController *)navigationController willShowViewController:(UIViewController *)viewController animated:(BOOL)animated {    [navigationController setNavigationBarHidden:YES animated:YES];}- (void)didReceiveMemoryWarning {    [super didReceiveMemoryWarning];    // Dispose of any resources that can be recreated.}@end</code></pre><p><strong>Bundle地址重定义</strong></p><pre><code>NSString *cachePath = @&quot;XXX&quot;;cachePath = [cachePath stringByAppendingPathComponent:@&quot;index.ios.bundle&quot;];NSURL *jsCodeLocation = [NSURL URLWithString:cachePath];</code></pre><p>中间遇到了几个编译问题导致build失败。问题与解决方法如下：</p><ul><li><p><a href="https://stackoverflow.com/questions/48705250/react-native-ios-could-not-build-module-yoga-algorithm-file-not-found" target="_blank" rel="noopener">React Native iOS: Could not build module ‘yoga’: ‘algorithm’ file not found</a></p></li><li><p>RCTReconnectingWebSocket.h文件的#import &lt;fishhook/fishhook.h&gt; 显示error: ‘fishhook/fishhook.h’ file not found</p><pre><code>&quot;scripts&quot;: {    &quot;postinstall&quot;: &quot;sed -i &apos;&apos; &apos;s#&lt;fishhook/fishhook.h&gt;#\&quot;fishhook.h\&quot;#g&apos; ./node_modules/react-native/Libraries/WebSocket/RCTReconnectingWebSocket.m&quot;}</code></pre></li><li>resolveRCTValueAnimatedNode<br>  <code>sed -i &#39;&#39; &#39;s/#import &lt;RCTAnimation\\/RCTValueAnimatedNode.h&gt;/#import \&quot;RCTValueAnimatedNode.h\&quot;/&#39; ./node_modules/react-native/Libraries/NativeAnimation/RCTNativeAnimatedNodesManager.h</code></li></ul><p>这样配个正常的iOS跳转地址，就可以正常跳转到RN了。这里的RN界面最好用一件简单的hello world测试下。</p><blockquote><p>编译问题怎么合到打包代码中？</p></blockquote><h3 id="原生和RN的通信-1"><a href="#原生和RN的通信-1" class="headerlink" title="原生和RN的通信"></a>原生和RN的通信</h3><p>通信一样是原生提供一下方法，可供给RN调用，直接上代码。</p><p><strong>commModule.h</strong></p><pre><code>#import &lt;Foundation/Foundation.h&gt;#import &lt;React/RCTBridgeModule.h&gt;@interface commModule : NSObject &lt;RCTBridgeModule&gt;@end</code></pre><p><strong>commModule.m</strong></p><pre><code>#import &quot;commModule.h&quot;#import &lt;React/RCTConvert.h&gt;@implementation commModuleRCT_EXPORT_MODULE();RCT_EXPORT_METHOD(rnCallNativeFromCallback:(NSString *)msg callback:(RCTResponseSenderBlock)callback){    NSString *result = [@&quot;处理结果:&quot; stringByAppendingString:msg];    callback(@[[NSNull null], result]);}RCT_REMAP_METHOD(rnCallNativeFromPromise, msg:(NSString *)msg                findEventsWithResolver:(RCTPromiseResolveBlock)resolve                rejecter:(RCTPromiseRejectBlock)reject){    NSString *result = [@&quot;处理结果:&quot; stringByAppendingString:msg];    resolve(result);}RCT_REMAP_METHOD(getUserInfo, msg:(NSDictionary *)msg                resolver:(RCTPromiseResolveBlock)resolve                rejecter:(RCTPromiseRejectBlock)reject){    resolve(@{@&quot;name&quot;: @&quot;iOS&quot;});}RCT_EXPORT_METHOD(startActivityFromJS:(NSString *)path params:(NSDictionary *)params){    # 路由跳转，注意UI主线程}RCT_EXPORT_METHOD(activityFinish){    # 结束RN finish，注意UI主线程}- (NSDictionary *)getConstants{    int n = arc4random_uniform(100);    return @{ @&quot;test&quot;: @&quot;test&quot; };}@end</code></pre><p>这样就可以在RN端调用了，调用方法和Android一样。</p><h3 id="RN资源管理-1"><a href="#RN资源管理-1" class="headerlink" title="RN资源管理"></a>RN资源管理</h3><p>测试发现如果将打包的Bundle文件和资源文件放到统一目录下，就可以正常引用资源。<br>参考命令<code>react-native bundle --platform ios --dev false  --entry-file index.ios.js  --bundle-output ReactNative/ios/index.ios.bundle --assets-dest ReactNative/ios</code></p><p>有需要做热更的可以指定以下Bundle文件路径，将资源和Bundle文件放到一起就好。</p><h3 id="RN开发调试-1"><a href="#RN开发调试-1" class="headerlink" title="RN开发调试"></a>RN开发调试</h3><p>这里只说我的调试方式，更详细的请查阅<a href="https://reactnative.cn/docs/0.51/debugging.html#content" target="_blank" rel="noopener">调试文档</a>。</p><ol><li>通过<code>initWithBundleURL</code>方式连接本地RN服务</li><li>通过<code>npm start</code>启动RN服务，即<code>node node_modules/react-native/local-cli/cli.js start</code>。</li><li>command + R可以在RN界面Reload RN</li><li>通过在Xcode输出中检索React可以查看RN的输出（包括console）。</li></ol><h2 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h2><ul><li>android项目依赖maven <code>{ url &quot;$rootDir/../node_modules/react-native/android&quot; }</code></li><li>iOS项目依赖怎么合并到打包脚本中</li><li>iOS编译问题如何在流程中解决</li><li>登陆验证问题</li></ul><h2 id="资源地址"><a href="#资源地址" class="headerlink" title="资源地址"></a>资源地址</h2><p>服务器172.16.192.249/mobile_node/魏晓峰/RN</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-Native混编学习&quot;&gt;&lt;a href=&quot;#React-Native混编学习&quot; class=&quot;headerlink&quot; title=&quot;React-Native混编学习&quot;&gt;&lt;/a&gt;React-Native混编学习&lt;/h1&gt;&lt;p&gt;本篇主要涉及的是App和RN
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ESLint入门与实践初步</title>
    <link href="http://jhmobile.github.io/2017/10/25/ESLint%E5%85%A5%E9%97%A8%E4%B8%8E%E5%AE%9E%E8%B7%B5%E5%88%9D%E6%AD%A5/"/>
    <id>http://jhmobile.github.io/2017/10/25/ESLint入门与实践初步/</id>
    <published>2017-10-25T02:51:09.000Z</published>
    <updated>2018-10-31T01:40:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ESLint-入门与实践"><a href="#ESLint-入门与实践" class="headerlink" title="ESLint 入门与实践"></a>ESLint 入门与实践</h1><hr><h2 id="一、主流JavaScript检查调研"><a href="#一、主流JavaScript检查调研" class="headerlink" title="一、主流JavaScript检查调研"></a>一、主流JavaScript检查调研</h2><p>JSLint、JSHint、JSCS、ESLint 四种工具有相同的基本方式工作。它们都有一套用户分析、报告js文件错误的规则。他们都可以通过npm安装、通过命令行使用。下面比对一下各自的优缺点</p><h3 id="JSLint"><a href="#JSLint" class="headerlink" title="JSLint"></a>JSLint</h3><p>JSLint 是其中最老的工具。在2002年 <code>Douglas Crockford</code>,业内尊称“道爷”开发了该工具，根据其经验，强制使用js语言中精粹的部分。如果你同意这些精粹，JSLint能成为一个好的工具。</p><p>优点</p><ul><li>参数配置完成，可以直接使用</li></ul><p>缺点</p><ul><li>JSLint 不存在配置文件，如果想改变参数设置，那就存在问题</li><li>有限的配置选项，许多规则不能禁掉</li><li>不能增加个性化规则</li><li>很难弄清楚哪个规则引起的错误</li></ul><h3 id="JSHint"><a href="#JSHint" class="headerlink" title="JSHint"></a>JSHint</h3><p>作为一个可配置的JSLint版本而被开发出来</p><p>优点</p><ul><li>大多是参数可以配置</li><li>支持配置文件，在大项目中容易使用</li><li>已经支持需要类库，像jQuery、QUnit、NodeJS、Mocha等</li><li>支持基本的ES6</li></ul><p>缺点</p><ul><li>难于知道哪个规则产生错误</li><li>存在两类选项：强制选项和松散选项。使得配置有些混乱</li><li>不支持自定义规则</li></ul><h3 id="JSCS"><a href="#JSCS" class="headerlink" title="JSCS"></a>JSCS</h3><p>JSCS是一个代码风格检查器。这意味着它仅仅匹配代码格式的问题，不匹配潜在的bugs、errors。因此，跟其他工具相比缺少灵活性，但是如果你仅仅强制检查代码风格，JSCS也是一个好的工具。</p><p>优点</p><ul><li>支持自定义报告，更容易与其他工具集成</li><li>如果你遵循一种可用的代码风格，配置项和准备好的配置文件使其容易启动</li><li>在报告中存在标记包含规则名字，所以很容易指出哪个规则造成了错误</li><li>通过自定义插件进行拓展</li></ul><p>缺点</p><ul><li>仅仅检查代码风格的问题。JSCS不检查潜在存在的bugs，例如不适用的变量、偶然的全局变量等等</li><li>四个工具中最慢，但是在使用中不是一个问题</li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><p>ESLint是最新出来的工具，是一个用来识别 ECMAScript 并且按照规则给出报告的代码检测工具，使用它可以避免低级错误和统一代码的风格。它被设计的容易拓展、拥有大量的自定义规则、容易的通过插件来安装。它给出准确的输出，而且包括规则名，这样可以知道哪个规则造成了错误。</p><p>优点</p><ul><li>灵活：任何规则都可以开启闭合，以及有些规则有些额外配置</li><li>很容易拓展和有需要可用插件</li><li>容易理解产出</li><li>包含了在其他检查器中不可用的规则，使得ESLint在错误检查上更有用</li><li>支持ES6，唯一支持JSX的工具</li><li>支持自定义报告</li></ul><p>缺点</p><ul><li>需要一些配置</li><li>速度慢，但不是主要问题</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最终推荐 ESLint。JSLint是严格和不可配置的，而JSHint缺少拓展机制。JSCS如果仅仅用于代码风格检验是一个好的选择，但是ESLint不仅可以进行代码风格的检验，而且可以检查代码中的bug和其他问题。<br>如果使用ES6，ESLint也是明显的选择。在上面提到的工具中，ESLint对ES6支持的最广泛。</p><h2 id="二、ESLint-安装"><a href="#二、ESLint-安装" class="headerlink" title="二、ESLint 安装"></a>二、ESLint 安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>npm i -g eslintnpm install eslint --save-dev</code></pre><h3 id="初始化配置文件"><a href="#初始化配置文件" class="headerlink" title="初始化配置文件"></a>初始化配置文件</h3><p>接下来新建一个配置文件<code>.eslintrc.js</code>，或者执行<code>eslint --init</code>来自动生成。这条命令会类似<code>npm init</code>出现一系列对话问答</p><p><img src="http://static.zybuluo.com/hellobeifeng1314/q618bns1h9jf8cnh19d13b1m/eslint_init.png" alt="eslint_init.png-178.4kB"></p><p>通过结果产生基本的配置内容，内容如下（不包含注释，注释是我写的）</p><pre><code>module.exports = {    &quot;env&quot;: {        &quot;browser&quot;: true    },    &quot;extends&quot;: &quot;eslint:recommended&quot;,    &quot;rules&quot;: {        // 强制使用一致的缩进: error级别，四空格        &quot;indent&quot;: [            &quot;error&quot;,            4        ],        // 强制使用unix风格的换行：error级别        &quot;linebreak-style&quot;: [            &quot;error&quot;,            &quot;unix&quot;        ],        // 使用双引号“”，而不是‘’        &quot;quotes&quot;: [            &quot;error&quot;,            &quot;double&quot;        ],        // 强制行位分号        &quot;semi&quot;: [            &quot;error&quot;,            &quot;always&quot;        ]    }};</code></pre><p>还可以选择在<code>package.json</code> 中设置 <code>eslintConfig</code>属性。但是不推荐。</p><p>个人建议, 使用单独的 <code>.eslintrc.*</code> 配置文件,这样别人一看代码结构就知道使用了 eslint 来校验代码，最好是js文件,json文件是不支持注释的。</p><blockquote><p>默认情况下，eslint 会在所有父级文件夹中寻找配置文件，一直找到根目录为止。如果希望 eslint 不要继续往外寻找配置文件了则这样配置：<code>&quot;root&quot;: true</code></p></blockquote><h3 id="eslintignore-忽略文件"><a href="#eslintignore-忽略文件" class="headerlink" title=".eslintignore 忽略文件"></a>.eslintignore 忽略文件</h3><p>你可以通过在项目根目录创建一个 <code>.eslintignore</code> 文件告诉 ESLint 去忽略特定的文件和目录。</p><ul><li>以 <code>#</code> 开头的行被当作注释，不影响忽略模式。 </li><li>路径是相对于 <code>.eslintignore</code> 的位置或当前工作目录。这也会影响通过<code>–ignore-pattern</code>传递的路径。 </li><li>忽略模式同 <code>.gitignore</code> 规范 </li><li>除了 <code>.eslintignore</code> 文件中的模式，ESLint总是默认忽略 <code>/node_modules/</code> 和 <code>/bower_components/</code>中的文件。</li></ul><h2 id="三、ESLint-配置"><a href="#三、ESLint-配置" class="headerlink" title="三、ESLint 配置"></a>三、ESLint 配置</h2><h3 id="配置执行环境"><a href="#配置执行环境" class="headerlink" title="配置执行环境"></a>配置执行环境</h3><p>配置文件中可以自由的指定执行环境，浏览器 或 <code>nodejs</code>。可以同时指定多个！</p><pre><code>module.exports = {  env: {    browser: true,    node: true,    es6: true  },};</code></pre><h3 id="配置全局变量"><a href="#配置全局变量" class="headerlink" title="配置全局变量"></a>配置全局变量</h3><p>只配置环境是远远不够的，不同环境之间还会有不同环境变量。ESLint 可以在配置文件或注释中指定额外的全局变量，<code>false</code>表明变量只读</p><pre><code>// .eslintrc.jsmodule.exports = {  globals: {    var1: true,    var2: true,  },};</code></pre><h3 id="配置匹配规则"><a href="#配置匹配规则" class="headerlink" title="配置匹配规则"></a>配置匹配规则</h3><p>在配置文件中可以设置一些规则。这些规则的等级有三种：</p><ul><li>“off” 或者 0：   关闭规则。</li><li>“warn” 或者 1：  打开规则，并且作为一个警告（不影响 exit code）。</li><li>“error” 或者 2： 打开规则，并且作为一个错误（exit code 将会是1）。</li></ul><p>配置文件支持灵活的多种方式</p><ul><li><p><code>.eslintrc.*</code> 配置文件中统一配置</p><pre><code>// .eslintrc.jsmodule.exports = {  rules: {    eqeqeq: &apos;off&apos;,    curly: &apos;error&apos;,  },};</code></pre></li><li><p>文件中的注释和跳过规则</p><pre><code>/* eslint-disable */// 中间的代码，会被跳过检查所有的代码/* eslint-enable *//* eslint-disable no-alert, no-console */// 中间的代码，会被跳过检查列举的而两个规则/* eslint-enable no-alert, no-console */// eslint-disable-next-lineconsole.log(&apos;test&apos;)</code></pre></li></ul><h3 id="继承规则"><a href="#继承规则" class="headerlink" title="继承规则"></a>继承规则</h3><p>使用配置文件设置规则是，既可以选择只在<code>rules</code>中设置，还可以选择从他处继承。我们可以将定义好规则的<code>.eslintrc.js</code>文件存储到一个公共的位置，比如<code>public-eslintrc.js</code>：</p><pre><code>module.exports = {  extends: &apos;eslint:recommended&apos;,  env: {    node: true,  },  rules: {    &apos;no-console&apos;: &apos;off&apos;,    &apos;indent&apos;: [ &apos;error&apos;, 2 ],    &apos;quotes&apos;: [ &apos;error&apos;, &apos;single&apos; ],  },};</code></pre><p>然后将原来的.eslintrc.js文件改成这样：</p><pre><code>module.exports = {  extends: &apos;./public-eslintrc.js&apos;,};</code></pre><p>我们还可以使用已经发布到 NPM 上的 ESLint 配置，这些配置的模块名一般以<code>eslint-config-</code>为前缀，比如我在学习<code>ESLint</code>时自己编写的一个配置名为<code>eslint-config-xxx</code>。要使用这个配置，先执行以下命令安装它：</p><pre><code>npm install -g eslint-config-xxx</code></pre><p>用于我们的eslint命令是全局安装的，所有用到的<code>eslint-config-*</code>模块也必须全局安装，否则将无法正确载入。这是一个已知的Bug，参考这里：<code>Error: Cannot read config package for shareable config using global eslint #4822</code></p><p>然后将.eslintrc.js文件改成这样：</p><pre><code>module.exports = {  extends: &apos;xxx&apos;,};</code></pre><h2 id="四、执行"><a href="#四、执行" class="headerlink" title="四、执行"></a>四、执行</h2><h3 id="命令行执行"><a href="#命令行执行" class="headerlink" title="命令行执行"></a>命令行执行</h3><pre><code>eslint [options] file.js [file.js] [dir]</code></pre><p>这条命令中ESLint会自动找到当前目录下的<code>.eslintrc.*</code>文件</p><blockquote><p>注意<code>eslint merge.js --fix</code>添加<code>--fix</code>结尾可以zi自动修复有<code>橙色扳手图标</code>的规则</p></blockquote><h3 id="配置到编译器"><a href="#配置到编译器" class="headerlink" title="配置到编译器"></a>配置到编译器</h3><p>本文已intelliJ IDEA为例 </p><p>   <img src="http://static.zybuluo.com/hellobeifeng1314/6rnplmx4basrerq9md8wqtco/eslint_idea.png" alt="eslint_idea.png-246.4kB"><br>   <img src="http://static.zybuluo.com/hellobeifeng1314/0x55j9e2yyz5phdpdir9riwl/eslint_idea2.png" alt="eslint_idea2.png-59.6kB"></p><h3 id="使用自动化任务"><a href="#使用自动化任务" class="headerlink" title="使用自动化任务"></a>使用自动化任务</h3><pre><code>gulp-eslint</code></pre><h2 id="五、实践-amp-amp-gulp-eslint"><a href="#五、实践-amp-amp-gulp-eslint" class="headerlink" title="五、实践 &amp;&amp; gulp-eslint"></a>五、实践 &amp;&amp; gulp-eslint</h2><h3 id="安装与介绍"><a href="#安装与介绍" class="headerlink" title="安装与介绍"></a>安装与介绍</h3><p><a href="https://github.com/adametry/gulp-eslint" target="_blank" rel="noopener">gulp-eslint</a>，是继承了 ESLint 功能的 gulp 插件，使用起来很简单，类似于命令行操作，直接安装</p><pre><code>npm install gulp-eslint --save-dev</code></pre><h3 id="静态检查自动化任务"><a href="#静态检查自动化任务" class="headerlink" title="静态检查自动化任务"></a>静态检查自动化任务</h3><p>有了上面的基础，下面我们实现一个基础的自动化检查代码的gulp任务</p><ul><li><p>1.安装依赖</p><pre><code>{  &quot;name&quot;: &quot;eslint_learning&quot;,  &quot;version&quot;: &quot;0.0.0&quot;,  &quot;description&quot;: &quot;eslint_learning&quot;,  &quot;private&quot;: false,  &quot;dependencies&quot;: {    &quot;eslint-plugin-html&quot;: &quot;^3.2.2&quot;,    &quot;gulp&quot;: &quot;3.9.1&quot;,    &quot;gulp-eslint&quot;: &quot;1.0.0&quot;  }}</code></pre></li><li><p>2.编写 eslint 配置文件</p><pre><code>{  &quot;ecmaFeatures&quot;: {    &quot;modules&quot;: true  },  &quot;plugins&quot;: [      &quot;html&quot;  ],  &quot;env&quot;: {    &quot;es6&quot;: true,    &quot;browser&quot;: true  },  &quot;rules&quot;: {    &quot;no-console&quot;: 2,  }}</code></pre></li><li><p>3.编写 gulpfile 配置文件，添加自动化任务</p><pre><code>var gulp = require(&apos;gulp&apos;),        eslint = require(&apos;gulp-eslint&apos;);    gulp.task(&apos;lint&apos;, function() {        return gulp.src([&apos;js/**/*.js&apos;, &apos;index.html&apos;])            //.pipe(eslint({configFle:&quot;./.eslintrc&quot;}))            .pipe(eslint())            .pipe(eslint.format())    });    gulp.task(&apos;default&apos;, [&apos;lint&apos;], function() {        // This will only run if the lint task is successful...});</code></pre></li><li><p>4.测试内容：index.html 中的javascript</p><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;eslint demo&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;div&gt;hello world&lt;/div&gt;        &lt;script src=&quot;js/index.js&quot;&gt;&lt;/script&gt;    &lt;script type=&quot;text/javascript&quot;&gt;        var a = 1;    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></li><li><p>5.测试内容 js/index.js</p><pre><code>let a = 1;//console.log(&apos;ddd&apos;)</code></pre></li><li><p>6.运行任务，查看结果</p><pre><code>gulp lint</code></pre></li></ul><h2 id="六、git-hooks"><a href="#六、git-hooks" class="headerlink" title="六、git hooks"></a>六、git hooks</h2><p>git 给我们提供了很多钩子函数，用于给不同的命令如，<code>git commit</code>指令提供类似回调函数，会在对应的指令的恰当时机执行。本文中模拟的是在代码编写完毕执行<code>git commit</code>命令之前的钩子<code>pre-commit</code></p><p><img src="http://static.zybuluo.com/hellobeifeng1314/73x93gs9v0p4fc483u9hucz9/githooks1.png" alt="githooks1.png-78kB"></p><h3 id="直接自定义-pre-commit"><a href="#直接自定义-pre-commit" class="headerlink" title="直接自定义 pre-commit"></a>直接自定义 pre-commit</h3><p>我们去掉文件末尾的<code>.sample</code>部分，使 git 能够识别。重写里面的内容</p><pre><code>#!/bin/sh#执行gulp任务，并将结果输出到临时文件gulp lint | tee check.log#检查gulp的check任务是否执行失败if grep &quot;warning&quot; check.log || grep &quot;error&quot; check.logthenecho -e &quot;\033[31m Code check fail! Please try again! \033[0m&quot;rm check.logexit 1elseecho -e &quot;\033[32m Code check success! \033[0m&quot;rm check.logfi</code></pre><p>然后安装插件 eslint-plugin-html</p><pre><code>sudo npm install eslint-plugin-html --save-dev</code></pre><p>接下来我们尝试一下带着问题提交，</p><pre><code>git commit -m</code></pre><p>果然，git 按照我们代码中写的那样，首先提示我们有错误，然后打断了提交流程</p><p><img src="http://static.zybuluo.com/hellobeifeng1314/7rums1lknrmxeb4u6ce1d6w2/githooks2.png" alt="githooks2.png-136.5kB"></p><h3 id="使用-插件"><a href="#使用-插件" class="headerlink" title="使用 插件"></a>使用 插件</h3><p>第一步：然后安装插件 eslint-plugin-html</p><pre><code>sudo npm install eslint-plugin-html --save-dev</code></pre><p>安装完这个插件，会默认修改前文提到过的<code>pre-commit.sample</code>为<code>pre-commit</code>。</p><p>第二步：修改 package.json,添加<code>pre-commit</code>字段，设置<code>git commit</code>操作之前的任务</p><pre><code>{  &quot;name&quot;: &quot;eslint_learning&quot;,  &quot;version&quot;: &quot;1.2.1&quot;,  &quot;description&quot;: &quot;eslint_learning&quot;,  &quot;private&quot;: false,  &quot;scripts&quot;: {    &quot;lints&quot;: &quot;num=`gulp lint | grep &apos;problem&apos;|wc -l`;if [ $num -gt 0 ]; then echo wrongEslint;exit 2; else exit 0;fi&quot;,    &quot;precommit-msg&quot;: &quot;echo &apos;Pre-commit checks...&apos; &amp;&amp; exit 0&quot;  },  &quot;dependencies&quot;: {    &quot;eslint-plugin-html&quot;: &quot;^3.2.2&quot;,    &quot;gulp&quot;: &quot;3.9.1&quot;,    &quot;gulp-eslint&quot;: &quot;1.0.0&quot;  },  &quot;pre-commit&quot;: [    &quot;precommit-msg&quot;,    &quot;lints&quot;  ],  &quot;devDependencies&quot;: {    &quot;pre-commit&quot;: &quot;^1.2.2&quot;  }}</code></pre><p>可见，我们设置了两个前置任务</p><p>第三部：命令保存退出。接下来我们尝试一下带着问题提交，</p><pre><code>git commit -m</code></pre><p>命令行提示如下内容</p><pre><code>xxxdeMacBook-Pro:test1 xxx$ git commit -m &quot;ddd&quot;Pre-commit checks...wrongEslintpre-commit:pre-commit: We&apos;ve failed to pass the specified git pre-commit hooks as the `lints`pre-commit: hook returned an exit code (1). If you&apos;re feeling adventurous you canpre-commit: skip the git pre-commit hooks by adding the following flags to your commit:pre-commit:pre-commit:   git commit -n (or --no-verify)pre-commit:pre-commit: This is ill-advised since the commit is broken.pre-commit:</code></pre><h2 id="八、推荐文章"><a href="#八、推荐文章" class="headerlink" title="八、推荐文章"></a>八、推荐文章</h2><p><a href="http://eslint.cn/docs/user-guide/getting-started" target="_blank" rel="noopener">ESLint中文网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ESLint-入门与实践&quot;&gt;&lt;a href=&quot;#ESLint-入门与实践&quot; class=&quot;headerlink&quot; title=&quot;ESLint 入门与实践&quot;&gt;&lt;/a&gt;ESLint 入门与实践&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;一、主流JavaScript检查调研&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ElastAlert日志监控预警</title>
    <link href="http://jhmobile.github.io/2017/10/11/Untitled/"/>
    <id>http://jhmobile.github.io/2017/10/11/Untitled/</id>
    <published>2017-10-11T08:17:00.000Z</published>
    <updated>2018-10-31T01:40:24.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h2><h3 id="短信报警优化"><a href="#短信报警优化" class="headerlink" title="短信报警优化"></a>短信报警优化</h3><p>新增post报警方式，可用于发送动态短信<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 报警方式</span><br><span class="line">alert:</span><br><span class="line">- &quot;post&quot;</span><br><span class="line"></span><br><span class="line">http_post_url: &quot;http://adminhome.jinhui365.cn/sendSmsForAppAlert&quot;</span><br><span class="line"></span><br><span class="line"># phoneList 手机号，逗号分割的字符串。例如：&quot;15235446827,15235446827&quot;</span><br><span class="line"># content 短信内容。$&#123;&#125;代表动态内容</span><br><span class="line">http_post_static_payload:</span><br><span class="line">  phoneList: &quot;15235446827&quot;</span><br><span class="line">  content: &quot;$&#123;@timestamp&#125;, IOS $&#123;l&#125; 级别日志报警。版本$&#123;v&#125;,手机型号$&#123;d&#125;,日志数$&#123;num_hits&#125;.&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>动态内容为邮件内容，目前仅支持首层的key字段</p></blockquote><p>举个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">邮件内容为：</span><br><span class="line">@timestamp: 2018-01-16T02:38:08.340Z</span><br><span class="line">@version: 1</span><br><span class="line">_id: AWD81Lv0TU1e05j5IHmu</span><br><span class="line">_index: ios-2018.01.16</span><br><span class="line">_type: logs</span><br><span class="line">arg: &#123;</span><br><span class="line">    &quot;appkey&quot;: &quot;jh28a4c4bc6734f58b&quot;, </span><br><span class="line">    &quot;branchNo&quot;: &quot;88&quot;, </span><br><span class="line">    &quot;client&quot;: &quot;iOS&quot;, </span><br><span class="line">    &quot;encrypt&quot;: 0, </span><br><span class="line">    &quot;fundAccount&quot;: &quot;881125524&quot;, </span><br><span class="line">    &quot;signcode&quot;: &quot;2FBDC7A4842E30B8F9ACD112261ECF28&quot;, </span><br><span class="line">    &quot;timestamp&quot;: &quot;1504442929685&quot;, </span><br><span class="line">    &quot;token&quot;: &quot;u4ftBaBm-xg=&quot;, </span><br><span class="line">    &quot;uid&quot;: &quot;1861574&quot;, </span><br><span class="line">    &quot;version&quot;: &quot;5.15.0&quot;</span><br><span class="line">&#125;</span><br><span class="line">c: iOS</span><br><span class="line">d: iPhone 6s Plus</span><br><span class="line">host: ubuntu</span><br><span class="line">i: B6C1AB45-C3CC-4C60-BD10-259778C6699B</span><br><span class="line">ip: 223.104.95.169 贵阳市 移动</span><br><span class="line">l: warn</span><br><span class="line">message: request failed:0 /receipt/list</span><br><span class="line">n: WiFi</span><br><span class="line">num_hits: 3182</span><br><span class="line">num_matches: 3</span><br><span class="line">o: 中国移动</span><br><span class="line">p: com.jinhui365.iphone-pay</span><br><span class="line">path: /data/node-dev-tools/logs/iOS.log</span><br><span class="line">s: 10.3.1</span><br><span class="line">t: 1504442928.55</span><br><span class="line">uid: 1861574</span><br><span class="line">v: 5.15.0</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">content：&quot;测试，测试，这个是个测试！message:$&#123;message&#125;,num_hits:$&#123;num_hits&#125;&quot;</span><br><span class="line">发送的短信为：测试，测试，这个是个测试！message:request failed:0 /receipt/list,num_hits:3182</span><br></pre></td></tr></table></figure><h3 id="jira日志报警记录"><a href="#jira日志报警记录" class="headerlink" title="jira日志报警记录"></a>jira日志报警记录</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 报警标题</span><br><span class="line">alert_subject: &quot;&#123;0&#125; &#123;1&#125; &#123;2&#125; &#123;3&#125;&quot;</span><br><span class="line">alert_subject_args:</span><br><span class="line">- &quot;c&quot;</span><br><span class="line">- &quot;v&quot;</span><br><span class="line">- &quot;l&quot;</span><br><span class="line">- &quot;@timestamp&quot;</span><br><span class="line"></span><br><span class="line"># 报警方式</span><br><span class="line">alert:</span><br><span class="line">- &quot;jira&quot;</span><br><span class="line"></span><br><span class="line"># 配置（规则文件中不写）</span><br><span class="line">jira_server: &quot;http://jira.jinhui365.cn&quot;</span><br><span class="line">jira_project: &quot;ALERT&quot;</span><br><span class="line">jira_account_file: &quot;/home/jhjr/jinhui/java/elaticalert/java_rules/jira_acct.txt&quot;</span><br><span class="line"></span><br><span class="line"># 目前只支持Task,受限于jira</span><br><span class="line">jira_issuetype: &quot;Task&quot;</span><br><span class="line"></span><br><span class="line"># jira issue优先级（默认普通级别。可选0-3，数字越小优先级越高）</span><br><span class="line">jira_priority: 0</span><br><span class="line"></span><br><span class="line"># 添加关注者(会有jira邮件发送到对应邮箱)</span><br><span class="line">jira_watchers: </span><br><span class="line">- xfwei</span><br><span class="line">- yli</span><br></pre></td></tr></table></figure><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><a href="https://github.com/bitsensor/elastalert-kibana-plugin" target="_blank" rel="noopener">ElastAlert Kibana plugin</a></li><li><a href="https://github.com/bitsensor/elastalert" target="_blank" rel="noopener">Elastalert Server</a></li><li><a href="https://github.com/Yelp/elastalert/tree/v0.0.96" target="_blank" rel="noopener">Elastalert</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>根据<a href="https://github.com/bitsensor/elastalert#installing-kibana-plugin" target="_blank" rel="noopener">ElastAlert Server安装教程</a>进行kibana插件和ElastAlert Server安装.</li><li>根据<a href="http://elastalert.readthedocs.io/en/latest/running_elastalert.html" target="_blank" rel="noopener">ElastAlert官方网站</a>安装Elastalert.</li></ol><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="Elastalert-Server"><a href="#Elastalert-Server" class="headerlink" title="Elastalert Server"></a>Elastalert Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;appName&quot;: &quot;elastalert-server&quot;,</span><br><span class="line">  &quot;port&quot;: 3030, //指定指定elastalert　server端口，为kibana插件提供服务</span><br><span class="line">  &quot;elastalertPath&quot;: &quot;/opt/elastalert/elastalert&quot;, //指定elastalert路径</span><br><span class="line">  &quot;verbose&quot;: true,</span><br><span class="line">  &quot;es_debug&quot;: true,</span><br><span class="line">  &quot;debug&quot;: false,</span><br><span class="line">  &quot;rulesPath&quot;: &#123;　//elastalert报警规则存储相对路径</span><br><span class="line">    &quot;relative&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;/rules&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;templatesPath&quot;: &#123;　//规则模板相对路径</span><br><span class="line">    &quot;relative&quot;: true,</span><br><span class="line">    &quot;path&quot;: &quot;/rule_templates&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dataPath&quot;: &#123; //测试数据存储路径</span><br><span class="line">    &quot;relative&quot;: true, folder.</span><br><span class="line">    &quot;path&quot;: &quot;/server_data&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>详细配置见<a href="https://github.com/bitsensor/elastalert#config" target="_blank" rel="noopener">Elastalert Server 配置</a></p></blockquote><h3 id="ElastAlert"><a href="#ElastAlert" class="headerlink" title="ElastAlert"></a>ElastAlert</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">es_host: 10.0.0.219</span><br><span class="line">es_port: 9200</span><br><span class="line"></span><br><span class="line"># 规则文件夹</span><br><span class="line">rules_folder: rules</span><br><span class="line"></span><br><span class="line"># 查询频率</span><br><span class="line">run_every:</span><br><span class="line">  minutes: 1</span><br><span class="line"></span><br><span class="line"># 查询时间片（可覆盖）</span><br><span class="line">buffer_time:</span><br><span class="line">  minutes: 60</span><br><span class="line">  </span><br><span class="line"># 邮箱配置</span><br><span class="line">smtp_host: mail.rxhui.com</span><br><span class="line">smtp_port: 25</span><br><span class="line"></span><br><span class="line">smtp_auth_file: /opt/elastalert/config/smtp_auth_file.yaml</span><br><span class="line">email_reply_to: monitor@rxhui.com</span><br><span class="line">from_addr: monitor@rxhui.com</span><br><span class="line"></span><br><span class="line"># 写回kibana中的索引</span><br><span class="line">writeback_index: elastalert_status</span><br><span class="line"></span><br><span class="line"># 重发机制</span><br><span class="line">alert_time_limit:</span><br><span class="line">  days: 2</span><br></pre></td></tr></table></figure><blockquote><p>详细配置见<a href="http://elastalert.readthedocs.io/en/latest/ruletypes.html" target="_blank" rel="noopener">Elastalert 配置</a></p></blockquote><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="打开方式"><a href="#打开方式" class="headerlink" title="打开方式"></a>打开方式</h3><ol><li>该功能嵌入至kibana中，打开kibana:<strong><a href="http://10.0.0.219:5601" target="_blank" rel="noopener">http://10.0.0.219:5601</a></strong>左上角setting右侧有个展开按钮，可供选择进入elastalert功能。</li><li>直接输入<strong><a href="http://10.0.0.219:5601/app/elastalert" target="_blank" rel="noopener">http://10.0.0.219:5601/app/elastalert</a></strong>进入。</li></ol><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><p><img src="https://www.bitsensor.io/assets/img/screenshots/template.gif" alt="操作动态图"></p><ul><li>＋ New Rule可添加一条新的规则</li><li>点击规则可以删除和修改</li><li>规则页面右侧有一些模板可以点击展示</li><li>规则页面左上角退出，右上角分别为[测试],[保存]，测试完成后右侧会有输出</li></ul><p><strong>注意</strong></p><blockquote><p>１．添加新的规则需测试后才能保存，若直接保存可能因规则错误导致监听停止。<br>２．添加新的规则如果不想继续添加，记得将目录页该规则删除。<br>３．若因错误操作导致监听停止，可删除错误规则文件后访问<strong><a href="http://10.0.0.219:3030/status/control/start" target="_blank" rel="noopener">http://10.0.0.219:3030/status/control/start</a></strong>重新启动监听，通过<strong><a href="http://10.0.0.219:3030/status" target="_blank" rel="noopener">http://10.0.0.219:3030/status</a></strong>查看监听状态</p></blockquote><h2 id="ElastAlert-配置和规则说明"><a href="#ElastAlert-配置和规则说明" class="headerlink" title="ElastAlert 配置和规则说明"></a>ElastAlert 配置和规则说明</h2><h3 id="ElastAlert-配置"><a href="#ElastAlert-配置" class="headerlink" title="ElastAlert 配置"></a>ElastAlert 配置</h3><table><thead><tr><th>参数</th><th>　说明</th><th>备注</th></tr></thead><tbody><tr><td>es_host</td><td>　Elasticsearch的host地址</td><td></td></tr><tr><td>es_port</td><td>Elasticsearch的端口号</td><td>默认为9200</td></tr><tr><td>rules_folder</td><td>规则文件夹的名称</td><td></td></tr><tr><td>run_every</td><td>用来设置定时向elasticsearch发送请求</td></tr><tr><td>buffer_time</td><td>用来设置请求李时间字段的范围</td><td></td></tr><tr><td>realert</td><td>设定报警后的一段时间内忽略报警</td><td>默认为1分钟，可以设置为0</td></tr><tr><td>query_delay</td><td>减去查询所花的时间</td><td></td></tr><tr><td>writeback_index</td><td>elastalert产生的日志在elasticsearch中创建的索引</td><td></td></tr><tr><td>alert_time_limit</td><td>失败重试的时间设置</td></tr><tr><td>es_send_get_body_as</td><td>查询Elasticsearch的请求方式</td><td>默认为get</td></tr></tbody></table><h3 id="ElastAlert-规则"><a href="#ElastAlert-规则" class="headerlink" title="ElastAlert 规则"></a>ElastAlert 规则</h3><table><thead><tr><th>参数</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>规则名称</td><td>英文，不能包含中文</td></tr><tr><td>type</td><td>报警规则检查类型</td></tr><tr><td>alert</td><td>报警的方式</td></tr><tr><td>index</td><td>监视的索引</td></tr><tr><td>filter</td><td>检索的条件</td></tr><tr><td>realert</td><td>设置n时间内只警报一次</td></tr><tr><td>email</td><td>若报警有email方式，为收邮件的邮箱</td></tr><tr><td>aggregation</td><td>聚合日志，能够攒齐了一段时间的警告再上报。也可以用schedule定时间发送这一段时间的所有警告</td><td>可以考虑是否使用</td></tr><tr><td>import</td><td>可以引用公共部分</td><td>后续的规则多了之后考虑将公共部分抽出</td></tr></tbody></table><h4 id="报警类型"><a href="#报警类型" class="headerlink" title="报警类型"></a>报警类型</h4><ul><li>any：只要有匹配就报警；</li><li>blacklist：compare_key字段的内容匹配上 blacklist数组里任意内容；</li><li>whitelist：compare_key字段的内容一个都没能匹配上whitelist数组里内容；</li><li>frequency：在相同 query_key条件下，timeframe 范围内有num_events个被过滤出 来的异常；</li><li>change：在相同query_key条件下，compare_key字段的内容，在timeframe范围内 发生变化；</li><li>spike：在相同query_key条件下，前后两个timeframe范围内数据量相差比例超过spike_height。其中可以通过spike_type设置具体涨跌方向是up,down,both 。还可以通过threshold_ref设置要求上一个周期数据量的下限，threshold_cur设置要求当前周期数据量的下限，如果数据量不到下限，也不触发；</li><li>flatline：timeframe 范围内，数据量小于threshold 阈值；</li><li>new_term：fields字段新出现之前terms_window_size(默认30天)范围内最多的terms_size (默认50)个结果以外的数据；</li><li>cardinality：在相同 query_key条件下，timeframe范围内cardinality_field的值超过 max_cardinality 或者低于min_cardinality</li></ul><h4 id="报警方式"><a href="#报警方式" class="headerlink" title="报警方式"></a>报警方式</h4><ul><li>Command</li><li>email</li><li>jira</li><li>post</li></ul><blockquote><p>具体规则书写查看文章末尾规则模板</p></blockquote><h3 id="ElastAlert-1"><a href="#ElastAlert-1" class="headerlink" title="ElastAlert"></a>ElastAlert</h3><h4 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h4><ul><li><p>query_string<br>查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter:</span><br><span class="line">- query_string:</span><br><span class="line">    query: &quot;username: bob&quot;</span><br></pre></td></tr></table></figure><p>query_string类型和Lucene的查询规则一致，具体细节可查看<a href="http://lucene.apache.org/core/2_9_4/queryparsersyntax.html" target="_blank" rel="noopener">Lucene Query</a><br>也可以通过将kibana上面的json格式转化为yaml的格式查询</p></li><li><p>term<br>精确匹配键值对</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">filter:</span><br><span class="line">- terms:</span><br><span class="line">    field: [&quot;value1&quot;, &quot;value2&quot;]</span><br></pre></td></tr></table></figure></li><li><p>terms<br>键值对匹配多个值</p></li><li><p>wildcard<br>标准的 shell 通配符</p></li><li><p>range<br>范围</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filter:</span><br><span class="line">- range:</span><br><span class="line">    status_code:</span><br><span class="line">    from: 500</span><br><span class="line">    to: 599</span><br></pre></td></tr></table></figure></li><li><p>Negation, and, or<br>与或非</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">filter:</span><br><span class="line">- or:</span><br><span class="line">    - term:</span><br><span class="line">        field: &quot;value&quot;</span><br><span class="line">    - wildcard:</span><br><span class="line">        field: &quot;foo*bar&quot;</span><br><span class="line">    - and:</span><br><span class="line">        - not:</span><br><span class="line">            term:</span><br><span class="line">              field: &quot;value&quot;</span><br><span class="line">        - not:</span><br><span class="line">            term:</span><br><span class="line">              _type: &quot;something&quot;</span><br></pre></td></tr></table></figure></li></ul><p>以上规则在文档<a href="http://elastalert.readthedocs.io/en/latest/recipes/writing_filters.html#common-filter-types" target="_blank" rel="noopener">ElastAlert Filters</a>中皆有详细描述</p><h2 id="规则模板"><a href="#规则模板" class="headerlink" title="规则模板"></a>规则模板</h2><h3 id="复杂的query-string查询"><a href="#复杂的query-string查询" class="headerlink" title="复杂的query_string查询"></a>复杂的query_string查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"># 时间标准</span><br><span class="line"># seconds: 0~60</span><br><span class="line"># minutes: 0~60</span><br><span class="line"># hours: 0~60</span><br><span class="line"># days: n</span><br><span class="line">type: frequency</span><br><span class="line"></span><br><span class="line"># 规则名称</span><br><span class="line">name: android_log_test</span><br><span class="line"></span><br><span class="line"># 轮询频率，run_every建议小于timeframe</span><br><span class="line">run_every: </span><br><span class="line">  minutes: 1</span><br><span class="line"></span><br><span class="line"># 轮转日志块，buffer_time大于timeframe，且建议为timeframe的整数倍（2-3倍）</span><br><span class="line">buffer_time:</span><br><span class="line">  minutes: 15</span><br><span class="line"></span><br><span class="line"># 触发标准，再timeframe时间内发生num_events数量的事件，触发报警</span><br><span class="line"># 事件发生时间范围</span><br><span class="line">timeframe:</span><br><span class="line">  minutes: 5</span><br><span class="line"># 事件发生数量</span><br><span class="line">num_events: 2</span><br><span class="line"></span><br><span class="line"># 查询索引，参照kibana中的索引</span><br><span class="line">index: android-*</span><br><span class="line"></span><br><span class="line"># 检索条件</span><br><span class="line"># 更详细的查询：http://lucene.apache.org/core/2_9_4/queryparsersyntax.html</span><br><span class="line"># query: &quot;message: \&quot;load patch error\&quot; AND message: lo?d&quot;</span><br><span class="line"># message==&quot;load patch error&quot; &amp;&amp; message: &quot;lo?d&quot;</span><br><span class="line"></span><br><span class="line"># + - &amp;&amp; || ! ( ) &#123; &#125; [ ] ^ &quot; ~ * ? : \ </span><br><span class="line"># 以上字符需转义</span><br><span class="line"></span><br><span class="line"># 基本键值对查询</span><br><span class="line"># query: &quot;key: \&quot;value\&quot;&quot;</span><br><span class="line"># 反例：query: &quot;key: value1 value2 value3&quot; 这将查询key==value1 || 包含value2的log || 包含value3的log</span><br><span class="line"></span><br><span class="line"># 键值对模糊查询用通配符</span><br><span class="line"># query：&quot;key: v*e&quot;</span><br><span class="line"></span><br><span class="line"># 与或非</span><br><span class="line"># key1 AND key2</span><br><span class="line"># key1 OR key2</span><br><span class="line"># NOT key1</span><br><span class="line"></span><br><span class="line"># 分组查询： （）代表分组</span><br><span class="line"># query: &quot;title:(return AND \&quot;pink panther\&quot;)&quot; title==&quot;return&quot; &amp;&amp; title=&quot;pink panther&quot; （return可以用通配符，被引号引住的pink panther不能用通配）</span><br><span class="line"># (key1 OR key2) AND key3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">filter:</span><br><span class="line">- query:</span><br><span class="line">    query_string:</span><br><span class="line">      query: &quot;message: \&quot;load patch error\&quot; AND message: lo?d&quot;</span><br><span class="line"></span><br><span class="line"># 规定n个时间内不会多次收到相同日志，frequency方式下该字段建议定义为timeframe的整数倍</span><br><span class="line">realert:</span><br><span class="line">  minutes: 5</span><br><span class="line"></span><br><span class="line"># 报警方式</span><br><span class="line">alert:</span><br><span class="line">- &quot;email&quot;</span><br><span class="line"># - &quot;command&quot;</span><br><span class="line"></span><br><span class="line"># phoneList为,分割的手机号字符串，content为接收手机内容</span><br><span class="line"># command: [&quot;curl&quot;, &quot;-X&quot;, &quot;POST&quot;, &quot;--header&quot;, &quot;Content-Type: application/json&quot;, &quot;--header&quot;, &quot;Accept: */*&quot;, &quot;http://adminhome.jinhui365.cn:8009/sendSms?phoneList=15235446827&amp;content=测试&quot;]</span><br><span class="line"></span><br><span class="line">email:</span><br><span class="line">- &quot;yli@rxhui.com&quot;</span><br><span class="line"># - &quot;15235446827@139.com&quot;</span><br></pre></td></tr></table></figure><h3 id="与或非查询"><a href="#与或非查询" class="headerlink" title="与或非查询"></a>与或非查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"># 时间标准</span><br><span class="line"># seconds: 0~60</span><br><span class="line"># minutes: 0~60</span><br><span class="line"># hours: 0~60</span><br><span class="line"># days: n</span><br><span class="line">type: frequency</span><br><span class="line"></span><br><span class="line"># 规则名称</span><br><span class="line">name: android_log_test</span><br><span class="line"></span><br><span class="line"># 轮询频率，run_every建议小于timeframe</span><br><span class="line">run_every: </span><br><span class="line">  minutes: 1</span><br><span class="line"></span><br><span class="line"># 轮转日志块，buffer_time大于timeframe，且建议为timeframe的整数倍（2-3倍）</span><br><span class="line">buffer_time:</span><br><span class="line">  minutes: 15</span><br><span class="line"></span><br><span class="line"># 触发标准，再timeframe时间内发生num_events数量的事件，触发报警</span><br><span class="line"># 事件发生时间范围</span><br><span class="line">timeframe:</span><br><span class="line">  minutes: 5</span><br><span class="line"># 事件发生数量</span><br><span class="line">num_events: 2</span><br><span class="line"></span><br><span class="line"># 查询索引，参照kibana中的索引</span><br><span class="line">index: android-*</span><br><span class="line"></span><br><span class="line"># 检索条件</span><br><span class="line"># 翻译kibana查询语句，特殊字符@要用“”包起来</span><br><span class="line"># message==&quot;text data message&quot; &amp;&amp; @version==&quot;1&quot; &amp;&amp; (uid==&quot;1111&quot; || !v==&quot;5.22.0&quot;)</span><br><span class="line"></span><br><span class="line">filter:</span><br><span class="line">- and:</span><br><span class="line">  - query:</span><br><span class="line">      match:</span><br><span class="line">        message:  </span><br><span class="line">          query: &quot;text data message&quot;</span><br><span class="line">          type: &quot;phrase&quot;</span><br><span class="line">  - query:</span><br><span class="line">      match:</span><br><span class="line">        &quot;@version&quot;:</span><br><span class="line">          query: &quot;1&quot;</span><br><span class="line">          type: &quot;phrase&quot;</span><br><span class="line">  - or:</span><br><span class="line">    - query:</span><br><span class="line">        match:</span><br><span class="line">          uid:</span><br><span class="line">            query: &quot;1111&quot;</span><br><span class="line">            type: &quot;phrase&quot;</span><br><span class="line">    - not:</span><br><span class="line">      - query:</span><br><span class="line">          match:</span><br><span class="line">            v:</span><br><span class="line">              query: &quot;5.22.0&quot;</span><br><span class="line">              type: &quot;phrase&quot;</span><br><span class="line"></span><br><span class="line"># 规定n个时间内不会多次收到相同日志，frequency方式下该字段建议定义为timeframe的整数倍</span><br><span class="line">realert:</span><br><span class="line">  minutes: 5</span><br><span class="line"></span><br><span class="line"># 报警方式</span><br><span class="line">alert:</span><br><span class="line">- &quot;email&quot;</span><br><span class="line"># - &quot;command&quot;</span><br><span class="line"></span><br><span class="line"># phoneList为,分割的手机号字符串，content为接收手机内容</span><br><span class="line"># command: [&quot;curl&quot;, &quot;-X&quot;, &quot;POST&quot;, &quot;--header&quot;, &quot;Content-Type: application/json&quot;, &quot;--header&quot;, &quot;Accept: */*&quot;, &quot;http://adminhome.jinhui365.cn:8009/sendSms?phoneList=15235446827&amp;content=测试&quot;]</span><br><span class="line"></span><br><span class="line">email:</span><br><span class="line">- &quot;yli@rxhui.com&quot;</span><br><span class="line"># - &quot;15235446827@139.com&quot;</span><br></pre></td></tr></table></figure><h2 id="ElastAlert-Server-API"><a href="#ElastAlert-Server-API" class="headerlink" title="ElastAlert Server API"></a>ElastAlert Server API</h2><p>This server exposes the following REST API’s:</p><ul><li><p><strong>GET <code>/</code></strong></p><p>  Exposes the current version running</p></li><li><p><strong>GET <code>/status</code></strong></p><p>  Returns either ‘SETUP’, ‘READY’, ‘ERROR’, ‘STARTING’, ‘CLOSING’, ‘FIRST_RUN’ or ‘IDLE’ depending on the current ElastAlert process status. </p></li><li><p><strong>GET <code>/status/control/:action</code></strong></p><p>  Where <code>:action</code> can be either ‘start’ or ‘stop’, which will respectively start or stop the current ElastAlert process.</p></li><li><p><strong>[WIP] GET <code>/status/errors</code></strong></p><p>  When <code>/status</code> returns ‘ERROR’ this returns a list of errors that were triggered.</p></li><li><p><strong>GET <code>/rules</code></strong></p><p>  Returns a list of directories and rules that exist in the <code>rulesPath</code> (from the config) and are being run by the ElastAlert process.</p></li><li><p><strong>GET <code>/rules/:id</code></strong></p><p>  Where <code>:id</code> is the id of the rule returned by <strong>GET <code>/rules</code></strong>, which will return the file contents of that rule.</p></li><li><p><strong>POST <code>/rules/:id</code></strong></p><p>  Where <code>:id</code> is the id of the rule returned by <strong>GET <code>/rules</code></strong>, which will allow you to edit the rule. The body send should be:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Required - The full yaml rule config.</span></span><br><span class="line">  <span class="string">"yaml"</span>: <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><ul><li><p><strong>DELETE <code>/rules/:id</code></strong></p><p>  Where <code>:id</code> is the id of the rule returned by <strong>GET <code>/rules</code></strong>, which will delete the given rule.</p></li><li><p><strong>GET <code>/templates</code></strong></p><p>  Returns a list of directories and templates that exist in the <code>templatesPath</code> (from the config) and are being run by the ElastAlert process.</p></li><li><p><strong>GET <code>/templates/:id</code></strong></p><p>  Where <code>:id</code> is the id of the template returned by <strong>GET <code>/templates</code></strong>, which will return the file contents of that template.</p></li><li><p><strong>POST <code>/templates/:id</code></strong></p><p>  Where <code>:id</code> is the id of the template returned by <strong>GET <code>/templates</code></strong>, which will allow you to edit the template. The body send should be:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// Required - The full yaml template config.</span></span><br><span class="line">  <span class="string">"yaml"</span>: <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li></ul><ul><li><p><strong>DELETE <code>/templates/:id</code></strong></p><p>  Where <code>:id</code> is the id of the template returned by <strong>GET <code>/templates</code></strong>, which will delete the given template.</p></li><li><p><strong>POST <code>/test</code></strong></p><p>  This allows you to test a rule. The body send should be:</p><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// Required - The full yaml rule config.</span></span><br><span class="line">        <span class="string">"rule"</span>: <span class="string">"..."</span>,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Optional - The options to use for testing the rule.</span></span><br><span class="line">        <span class="string">"options"</span>: &#123;</span><br><span class="line">        </span><br><span class="line">          <span class="comment">// Can be either "all", "schemaOnly" or "countOnly". "all" will give the full console output. </span></span><br><span class="line">          <span class="comment">// "schemaOnly" will only validate the yaml config. "countOnly" will only find the number of matching documents and list available fields.</span></span><br><span class="line">          <span class="string">"testType"</span>: <span class="string">"all"</span>,</span><br><span class="line">          </span><br><span class="line">          <span class="comment">// Can be any number larger than 0 and this tells ElastAlert over a period of how many days the test should be run</span></span><br><span class="line">          <span class="string">"days"</span>: <span class="string">"1"</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">// Whether to send real alerts</span></span><br><span class="line">          <span class="string">"alert"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">- **[WIP] GET `</span>/config<span class="string">`**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Gets the ElastAlert configuration from `</span>config.yaml<span class="string">` in `</span>elastalertPath<span class="string">` (from the config).</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">- **[WIP] POST `</span>/config<span class="string">`**</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Allows you to edit the ElastAlert configuration from `</span>config.yaml<span class="string">` in `</span>elastalertPath<span class="string">` (from the config). The required body to be send will be edited when the work on this API is done.</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">## ElastAlert监控规律</span></span><br><span class="line"><span class="string">ElastAlert根据config中的run_every设置的时间频率去轮询，每次查询的时间块都是buffer_time</span></span><br></pre></td></tr></table></figure></code></pre><p>  基本查询规律：<br>  配置: run_every:20s, buffer_time:1min</p><p>  当前时间1月17日9时启动监控<br>  当前时间   日志时间块<br>  9:00:00   8:59:00~9:00:00<br>  9:00:20   9:00:00~9:00:20<br>  9:00:40   9:00:00~9:00:40<br>  9:01:00   9:00:00~9:01:00<br>  9:01:20   9:01:00~9:01:20<br>  9:01:40   9:01:00~9:01:40<br>  9:02:00   9:01:00~9:02:00<br><code>`</code></p><p><strong>传送门</strong></p></li><li><a href="https://bitsensor.io/index.php" target="_blank" rel="noopener">Bitsensor博客网站</a></li><li><a href="https://github.com/bitsensor/elastalert-kibana-plugin" target="_blank" rel="noopener">ElastAlert Kibana Plugin</a></li><li><a href="https://github.com/bitsensor/elastalert" target="_blank" rel="noopener">Elastalert Server</a></li><li><a href="https://github.com/Yelp/elastalert" target="_blank" rel="noopener">Elastalert Github</a></li><li><a href="http://elastalert.readthedocs.io/en/latest/running_elastalert.html" target="_blank" rel="noopener">ElastAlert官方网站</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;新增&quot;&gt;&lt;a href=&quot;#新增&quot; class=&quot;headerlink&quot; title=&quot;新增&quot;&gt;&lt;/a&gt;新增&lt;/h2&gt;&lt;h3 id=&quot;短信报警优化&quot;&gt;&lt;a href=&quot;#短信报警优化&quot; class=&quot;headerlink&quot; title=&quot;短信报警优化&quot;&gt;&lt;/a&gt;短
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ECMAScript 2015 语法分享</title>
    <link href="http://jhmobile.github.io/2017/10/11/ECMAScript-2015-%E8%AF%AD%E6%B3%95%E5%88%86%E4%BA%AB/"/>
    <id>http://jhmobile.github.io/2017/10/11/ECMAScript-2015-语法分享/</id>
    <published>2017-10-11T07:53:09.000Z</published>
    <updated>2018-10-31T01:40:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分：前言"><a href="#第一部分：前言" class="headerlink" title="第一部分：前言"></a>第一部分：前言</h1><h2 id="一、为什么要使用-ES6"><a href="#一、为什么要使用-ES6" class="headerlink" title="一、为什么要使用 ES6"></a>一、为什么要使用 ES6</h2><p>ES6代表了未来，对未来理应拥抱。为从以下几个角度来看，ES6的推广势在必行：</p><ul><li><p>解放开发效率</p><ul><li>新特性的合理使用，优雅而简洁</li><li>减少第三方库的依赖</li><li>可维护性提升，代码量减少</li></ul></li><li><p>面向未来。</p><ul><li>向标准靠拢</li><li>官方支持</li><li>迟早要学</li></ul></li><li><p>其他方面</p><ul><li>提升技术先进性</li><li>促进技术交流，提高技术氛围</li><li>编程激情</li><li>整合部分历史代码的好机会</li></ul></li></ul><h2 id="二、Nodejs各版本对应的ES6支持情况"><a href="#二、Nodejs各版本对应的ES6支持情况" class="headerlink" title="二、Nodejs各版本对应的ES6支持情况"></a>二、Nodejs各版本对应的ES6支持情况</h2><p>1、如果你想一览Node不同版本对所有ES6的特性支持情况，就可以参看<a href="http://node.green/" target="_blank" rel="noopener">node.green</a>这个网站</p><p>可以看到<br>6.11.2 - 99%<br>6.4.0 - 95%<br>5.12.0 - 59%</p><p>2、可以安转<code>es-checker</code>工具，通过该工具查看node支持的es6语法</p><pre><code>sudo npm install es-checker -g</code></pre><h2 id="三、实用特性使用情况"><a href="#三、实用特性使用情况" class="headerlink" title="三、实用特性使用情况"></a>三、实用特性使用情况</h2><p><img src="https://yqfile.alicdn.com/f1ae6e19b5580b4f3a618e5351b74c55fd4beefb.jpeg" alt=""></p><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">推荐程度</th></tr></thead><tbody><tr><td style="text-align:center">arrows</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">enhanced object literals</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">template strings</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">destructuring</td><td style="text-align:center">★★</td></tr><tr><td style="text-align:center">default + rest + spread</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">promises</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">math + number + string + array + object APIs</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">let + const</td><td style="text-align:center">★★★</td></tr><tr><td style="text-align:center">iterators + for..of</td><td style="text-align:center">★★</td></tr><tr><td style="text-align:center">tail calls</td><td style="text-align:center">★★</td></tr><tr><td style="text-align:center">modules</td><td style="text-align:center">★★</td></tr><tr><td style="text-align:center">map + set + weakmap + weakset</td><td style="text-align:center">★★</td></tr><tr><td style="text-align:center">generators</td><td style="text-align:center">★</td></tr><tr><td style="text-align:center">classes</td><td style="text-align:center">★</td></tr><tr><td style="text-align:center">binary and octal literals</td><td style="text-align:center">★</td></tr><tr><td style="text-align:center">symbols</td><td style="text-align:center">★</td></tr><tr><td style="text-align:center">module loaders</td><td style="text-align:center">☆</td></tr><tr><td style="text-align:center">proxies</td><td style="text-align:center">☆</td></tr><tr><td style="text-align:center">subclassable built-ins</td><td style="text-align:center">☆</td></tr><tr><td style="text-align:center">reflect api</td><td style="text-align:center">☆</td></tr><tr><td style="text-align:center">unicode</td><td style="text-align:center">☆</td></tr></tbody></table><hr><h1 id="第二部分-ES6-的实用特性"><a href="#第二部分-ES6-的实用特性" class="headerlink" title="第二部分 ES6 的实用特性"></a>第二部分 ES6 的实用特性</h1><h2 id="一、使用-let-和-const"><a href="#一、使用-let-和-const" class="headerlink" title="一、使用 let 和 const"></a>一、使用 let 和 const</h2><p>let: 用来声明变量。它的用法类似于<code>var</code>，但是所声明的变量，只在<code>let</code>命令所在的代码块内有效</p><p>const: 声明一个只读的常量。一旦声明，变量指向的那个内存地址不得改动。而且，<code>const</code>一旦声明变量，该变量就必须立即初始化，不能留到以后赋值。同样，声明的变量，只在<code>const</code>命令所在的代码块内有效。一般用<code>const</code>声明常亮。</p><h3 id="特点1：拥有块级作用域"><a href="#特点1：拥有块级作用域" class="headerlink" title="特点1：拥有块级作用域"></a>特点1：拥有块级作用域</h3><p><code>let</code>、<code>const</code>是一种新的变量申明方式，它允许你把变量作用域控制在块级里面。但是在ES5中，块级作用域起不了任何作用。下面列举两种常见的错误场景，然后你会发现会用ES6是这么轻松的就避免犯错！</p><ul><li><p>第一种常见场景：内层变量可能会覆盖外层变量</p><pre><code>var a = 2{       var a = 1;}a // 1，一不小心发生了同名变量的覆盖let a = 2{       let a = 1;}a // 2 ，es6通过块级作用域避免了覆盖的发生</code></pre></li><li><p>第二种常见场景：用来计数的循环变量泄露为全局变量</p><pre><code>for(var i = 0; i &lt; 3; i++ ) {}console.log(i);//3，可见，此处的 i 已然成为了全局变量for(let i=0;i&lt;3;i++) {}console.log(i);//使用ES6 抛出异常 ReferenceError: i is not defined</code></pre></li></ul><h3 id="特点2：没有变量提升"><a href="#特点2：没有变量提升" class="headerlink" title="特点2：没有变量提升"></a>特点2：没有变量提升</h3><p>ES6明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。首先看一个看变量在同一个块作用域内的情况</p><pre><code>// 发生了变量提升if(true) {  console.log(x); // undefined  var x = &apos;hello&apos;;}// 不准许在变量声明之前使用if(true) {  console.log(x); // ReferenceError  let x = &apos;hello&apos;;}</code></pre><p>这个特性杜绝了我们日常编码中随处声明变量的恶习，强制要求我们养成提前声明变量的习惯。变量的声明和使用在同一作用域下如此，在不同作用域下更是如此：</p><pre><code>{{{{      {      console.log(insane); // 报错，提前使用了变量      }      let insane = 'Hello World'    }}}};{{{{    let insane = 'Hello World'      {      console.log(insane); // hello world      }    }}}};</code></pre><h3 id="特点3：不允许在相同作用域内，重复声明同一个变量"><a href="#特点3：不允许在相同作用域内，重复声明同一个变量" class="headerlink" title="特点3：不允许在相同作用域内，重复声明同一个变量"></a>特点3：不允许在相同作用域内，重复声明同一个变量</h3><pre><code>// 正常function () {  var a = 10;  var a = 1;  // a ,1}// 报错function () {  let a = 10;  var a = 1;}// 报错function () {  let a = 10;  let a = 1;}function func(arg) {  let arg; // 报错}function func(arg) {  {    let arg; // 不报错  }}</code></pre><h2 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h2><p>ES6 允许按照一定模式，从数组、对象中提取值，对变量进行赋值，这被称为解构。如果等号的右边不是可遍历的结构，如 {}, undefined, 数字常量值等，那么将会报错。下面列举三种最常见的结构场景</p><h3 id="1-对象的解构赋值"><a href="#1-对象的解构赋值" class="headerlink" title="1. 对象的解构赋值"></a>1. 对象的解构赋值</h3><p>如果变量名与属性名(key)一致，则会对应的赋值，不论位置顺序</p><pre><code>let { bar, foo } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; };foo // &quot;aaa&quot;bar // &quot;bbb&quot;let { foo, bar } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; };foo // &quot;aaa&quot;bar // &quot;bbb&quot;，即使顺序变了，还是赋值给了对应的key</code></pre><p>如果变量名与属性名不一致，必须写成下面这样</p><pre><code>// 希望将对象中的foo属性赋值给变量bazvar { foo: baz } = { foo: &apos;aaa&apos;, bar: &apos;bbb&apos; };baz // &quot;aaa&quot;</code></pre><p>结构失败，则变量赋值为<code>undefined</code>  </p><pre><code>let { baz } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; };baz // undefined</code></pre><p>究其原理，其实对象的解构赋值是下面形式的简写：</p><pre><code>let { foo: foo, bar: bar } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; };  </code></pre><p>也就是说，对象的解构赋值的内部机制，是先找到同名属性，然后再赋给对应的变量。真正被赋值的是后者，而不是前者</p><pre><code>let { foo: baz } = { foo: &quot;aaa&quot;, bar: &quot;bbb&quot; };baz // &quot;aaa&quot;foo // error: foo is not defined</code></pre><p>上面代码中，<code>foo</code>是匹配的模式，<code>baz</code>才是变量。真正被赋值的是变量<code>baz</code>，而不是模式<code>foo</code>。本段开始提到的<code>{foo}</code>其实是<code>{foo:foo}</code>的简写</p><p>在对象中使用解构赋值的好处很多，比如下文中，我们通过传递某个配置对象类完成某些赋值目的</p><pre><code>function init(options) {      var id = options.uid;      var cid = options.cid;      var timeout = options.timeout;      var protocol = options.protocol      // code to init}var options = {      id: &apos;101&apos;,      cid: &apos;xxx&apos;,      timeout: &apos;60&apos;,      protocol: &apos;http&apos;}init(options)</code></pre><p>这种方式实现起来很好，已经被许多JS开发者所采用。 只是我们必须看函数内部，才知道函数预期需要哪些参数。结合解构赋值，我们就可以在函数声明中清晰地表示这些参数：    </p><pre><code>function init(param, {id, cid, timeout, protocal}) {    // code to init}var options = {    id: &apos;101&apos;,    cid: &apos;xxx&apos;,    timeout: &apos;60&apos;,    protocol: &apos;http&apos;}init(param, options)</code></pre><p>在该函数中，我们没有传入一个配置对象，而是以对象解构赋值的方式，给它传参数。这样做不仅使这个函数更加简明，可读性也更高。</p><blockquote><p>注意如果函数调用时，参数被省略掉且没有设置默认值，则会抛出错误  </p></blockquote><p>函数解构和默认值组合使用的一个难点:再请问下面两种写法有什么差别？</p><pre><code>// 写法一function m1({x = 0, y = 0} = {}) {  return [x, y];}// 写法二function m2({x, y} = { x: 0, y: 0 }) {  return [x, y];}</code></pre><p>上面两种写法都对函数的参数设定了默认值，区别是：<br>写法一函数参数的默认值是空对象，但是设置了对象解构赋值的默认值；<br>写法二函数参数的默认值是一个有具体属性的对象，但是没有设置对象解构赋值的默认值。</p><pre><code>// 函数没有参数的情况m1() // [0, 0]m2() // [0, 0]// x和y都有值的情况m1({x: 3, y: 8}) // [3, 8]m2({x: 3, y: 8}) // [3, 8]// x有值，y无值的情况m1({x: 3}) // [3, 0]m2({x: 3}) // [3, undefined]// x和y都无值的情况m1({}) // [0, 0];m2({}) // [undefined, undefined]m1({z: 3}) // [0, 0]m2({z: 3}) // [undefined, undefined]</code></pre><p>本质上来说，如果实参有值的话，参数的默认值就不会生效。如果参数的默认值不生效，那么解构就无法发生。</p><h3 id="2-数组的解构赋值"><a href="#2-数组的解构赋值" class="headerlink" title="2. 数组的解构赋值"></a>2. 数组的解构赋值</h3><pre><code>const arr = [1, 2, 3, 4];// badconst first = arr[0];const second = arr[1];// goodconst [first, second] = arr;</code></pre><blockquote><p>数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值<br>和对象解构一样，如果解构不成功，变量的值就等于<code>undefined</code></p></blockquote><h3 id="3-函数返回值的解构"><a href="#3-函数返回值的解构" class="headerlink" title="3. 函数返回值的解构"></a>3. 函数返回值的解构</h3><p>函数只能返回一个值，如果要返回多个值，只能将它们放在数组或对象里返回。有了解构赋值，取出这些值就非常方便。</p><pre><code>function getVal() {  return [ 1, 2 ];}let [x,y] = getVal();//函数返回值的解构console.log(x ,y);// 1, 2</code></pre><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同或部分相同，左边的（部分）变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><pre><code>// 嵌套let [foo, [[bar], baz]] = [1, [[2], 3]];foo // 1bar // 2baz // 3// ... 运算let [head, ...tail] = [1, 2, 3, 4];head // 1tail // [2, 3, 4]let [head, ...tail, tailest] = [1, 2, 3, 4];// SyntaxError: Rest element must be last element in array</code></pre><h3 id="4-解构赋值使用默认值"><a href="#4-解构赋值使用默认值" class="headerlink" title="4. 解构赋值使用默认值"></a>4. 解构赋值使用默认值</h3><p>解构赋值允许指定默认值。ES6 内部使用严格相等运算符<code>===</code>，判断一个位置是否有值。所以，如果一个数组成员不严格等于<code>undefined</code>，默认值是不会生效的</p><pre><code>let [foo = true] = [];foo // truelet [x, y = &apos;b&apos;] = [&apos;a&apos;]; // x=&apos;a&apos;, y=&apos;b&apos;let [x, y = &apos;b&apos;] = [&apos;a&apos;, undefined]; // x=&apos;a&apos;, y=&apos;b&apos;let [x, y = &apos;b&apos;] = [&apos;a&apos;, &apos;undefined&apos;]; // x=&apos;a&apos;, y=&apos;undefined&apos;let [x, y = &apos;b&apos;] = [&apos;a&apos;, null]; // x=&apos;a&apos;, y=nullvar {x, y = 5} = {x: 1};x // 1y // 5</code></pre><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><pre><code>let [x = 1, y = x] = [];     // x=1; y=1let [x = 1, y = x] = [2];    // x=2; y=2let [x = 1, y = x] = [1, 2]; // x=1; y=2let [x = y, y = 1] = [];     // ReferenceError</code></pre><h2 id="三、字符串扩展"><a href="#三、字符串扩展" class="headerlink" title="三、字符串扩展"></a>三、字符串扩展</h2><h3 id="1-模板文本"><a href="#1-模板文本" class="headerlink" title="1. 模板文本"></a>1. 模板文本</h3><p>模板字符串（template string）是增强版的字符串，用反引号（<code>）标识。它可以当作普通字符串使用，也可以用来定义多行字符串。在字符串中嵌入变量，需要将变量名写在</code>${}`之中。</p><p>首先，让我们看看 ES5 中拼接字符串的方式</p><pre><code>var name = &apos;feng&apos; , age = &apos;25&apos;;var result = &apos;hello: &apos; + name + &apos;, your name is &apos; + age;// hello: feng, your name is 25</code></pre><p>再看看 ES6 的实现方式</p><pre><code>var name = &apos;feng&apos; , age = &apos;25&apos;;var result = `hello: ${name}, your name is ${age}`// hello: feng, your name is 25</code></pre><p>模板中使用对象   </p><pre><code>let obj = {x:1,y:2};console.log(`Your total is: ${obj.x + obj.y}`); // Your total is 3</code></pre><p>模板中使用函数调用</p><pre><code>function fn() {    return &quot;Hello World&quot;;}`foo ${fn()} bar`// foo Hello World bar</code></pre><p>这样做省略了很多影响阅读的<code>+ ,</code>，直接在反引号中使用变量书写，很美观和便利！</p><h3 id="2-多行字符串"><a href="#2-多行字符串" class="headerlink" title="2. 多行字符串"></a>2. 多行字符串</h3><p>ES6 的多行字符串是一个非常实用的功能。在 ES5 中，我们不得不使用以下方法来表示多行字符串</p><pre><code>var multStr = &apos;Then took the other, as just as fair,\n\t&apos;    + &apos;And having perhaps the better claim\n\t&apos;    + &apos;Because it was grassy and wanted wear,\n\t&apos;    + &apos;Though as for that the passing there\n\t&apos;    + &apos;Had worn them really about the same,\n\t&apos;;</code></pre><p>然而在 ES6 中，仅仅用反引号就可以解决了：</p><pre><code>var multStr = `Then took the other, as just as fair,    And having perhaps the better claim    Because it was grassy and wanted wear,    Though as for that the passing there    Had worn them really about the same,`;</code></pre><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中</p><pre><code>let tt = `&lt;ul&gt;    &lt;li&gt;first&lt;/li&gt;    &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;`;console.log(tt)</code></pre><p>输出成如下内容</p><pre><code>&lt;ul&gt;    &lt;li&gt;first&lt;/li&gt;    &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;</code></pre><h2 id="四、函数扩展"><a href="#四、函数扩展" class="headerlink" title="四、函数扩展"></a>四、函数扩展</h2><h3 id="1-默认参数"><a href="#1-默认参数" class="headerlink" title="1. 默认参数"></a>1. 默认参数</h3><p>ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方法。项目中通过<code>||</code>来实现默认参数</p><pre><code>var link = function (height, color) {    var height = height || 50;    var color = color || &apos;red&apos;;    console.log(height + &apos; : &apos; + color)}link();//50 redlink(10, &apos;blue&apos;);// 10 blue 1</code></pre><p>目前来说是正常的，调用该函数时，没有传入实参，会用默认值。但是如果我们传入的参数本身会通过类型转换为<code>false</code>(比如<code>0</code> 或者<code>null</code>)就会有问题：系统忽略掉了我们的入参，反而使用了默认值！ </p><pre><code>link(0, &apos;blue&apos;);//50 blue</code></pre><p>代码默认值是<code>50</code>，调用时希望设置为<code>0</code>，但是还是输出了默认值<code>50</code>。</p><p>在 ES6 中，我们通过如下方式来完成默认参数的设置，即直接写在参数定义的后面。我们甚至可以让默认值是一个函数（惰性求值）</p><pre><code>var link = function (height = 50, color = &apos;red&apos;) {    console.log(height + &apos; : &apos; + color)}link(10, &apos;blue&apos;);//10: bluelink(0， blue);//0 bluelink();// 50 : red</code></pre><p>还有一点需要着重介绍一下：默认参数可以和解构赋值默认值结合使用</p><pre><code>function foo({x, y = 5}) {  console.log(x, y);}foo({}) // undefined, 5foo({x: 1}) // 1, 5foo({x: 1, y: 2}) // 1, 2foo() // TypeError: Cannot read property &apos;x&apos; of undefined</code></pre><p>上面代码使用了对象的解构赋值默认值，而没有使用函数参数的默认值。只有当函数<code>foo</code>的参数是一个对象时，变量<code>x</code>和<code>y</code>才会通过解构赋值而生成。如果函数<code>foo</code>调用时参数不是对象（或者不能转换成对象），变量<code>x</code>和<code>y</code>就不会生成，从而报错。并且如果参数对象没有<code>y</code>属性，<code>y</code>的默认值<code>5</code>才会生效。</p><p>请注意上面例子与下面两种写法的区别</p><pre><code>function foo({x=1, y = 5}) {  console.log(x, y);}foo() // TypeError: Cannot match against &apos;undefined&apos; or &apos;null&apos;.解构失败function foo({x=1, y = 5} = {}) {  console.log(x, y);}foo() // 1 5  双重默认值：首先因为实参为空，所以函数参数默认值{}生效。然后才是解构赋值的默认值生效</code></pre><h3 id="2-Rest-不定参数"><a href="#2-Rest-不定参数" class="headerlink" title="2. Rest 不定参数"></a>2. Rest 不定参数</h3><p>ES6 引入 <code>rest参数</code>（形式为<code>...变量名</code>），用于获取函数的多余参数，<code>rest参数</code>搭配的变量是一个数组，该变量将多余的参数放入数组中。用来取代额外的<code>arguments</code>对象了。</p><pre><code>// arguments变量的写法function sortNumbers() {    return Array.prototype.slice.call(arguments).sort();}  // rest参数的写法let sortNumbers = (...numbers) =&gt; numbers.sort();</code></pre><p>利用 <code>rest参数</code>，可以向该函数传入任意数目的参数。下面这个例子中，其中<code>…x</code>代表了所有传入<code>add</code>函数的参数。</p><pre><code>//将所有参数相加的函数function add(...x){   return x.reduce((m, n)=&gt; m + n);} console.log(add(1,2,3));//输出：6console.log(add(1,2,3,4,5));//输出：15                                              </code></pre><blockquote><p><code>rest参数</code>中的变量代表一个数组，所以数组特有的方法都可以用于这个变量。<br><code>rest参数</code>之后不能再有其他参数（即,只能是最后一个参数），否则会报错。<br>一个函数声明只能允许有一个 <code>rest参数</code></p></blockquote><h3 id="3-箭头函数"><a href="#3-箭头函数" class="headerlink" title="3. 箭头函数"></a>3. 箭头函数</h3><p>我们知道在JS中回调是经常的事，而一般回调又以匿名函数的形式出现，每次都需要写一个<code>function(){}</code>甚是繁琐。当引入箭头操作符<code>=&gt;</code>后可以方便地写回调了。</p><p>它简化了函数的书写。操作符左边为输入的参数，而右边则是进行的操作以及返回的值。即， <code>Inputs =&gt; outputs</code>。</p><pre><code>let array = [1, 2, 3];//传统写法array.forEach(function(v) {    console.log(v);});//ES6//使用函数体形式array.forEach(v =&gt; {    console.log(v)});// 或者直接使用更简洁的表达式array.forEach(v =&gt; console.log(v));    </code></pre><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。</p><pre><code>var f = () =&gt; 5;var sum = (num1, num2) =&gt; num1 + num2;</code></pre><p>除了上面的写法的改变，剪头函数使用<code>this</code>时也和我们以前大不相同：以前我们使用闭包，<code>this</code>总是预期之外地产生改变。而箭头函数的迷人之处在于，<code>this</code>的指向是固定的。身处箭头函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>举个例子，实现一个功能，点击某个按钮之后，调用当前模块的<code>sendData()</code>方法：</p><p>首先看看ES5中的处理方式</p><pre><code>var polyglot = {    name : &quot;feng&quot;,    fruits : [&quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;],    introduce : function () {        const self = this;        this.fruits.forEach(function(item) {            console.log(this)            console.log(&quot;My name is &quot; + self.name + &quot;, I eat &quot; + item + &quot;.&quot;);        });    }}polyglot.introduce();</code></pre><p>在<code>introduce</code>里, <code>this.name</code>是<code>undefined</code>(浏览器环境中<code>forEach</code>的匿名回调中<code>this</code>指向<code>window</code>)。在回调函数外面，也就是<code>forEach</code>中， 它指向了<code>polyglot</code>对象。在这种情形下我们总是希望在函数内部<code>this</code>和函数外部的<code>this</code>指向同一个对象。在ES6中就不需要用 <code>_this = this</code>完成这个需求</p><pre><code>let polyglot = {    name : &quot;feng&quot;,    fruits : [&quot;apple&quot;, &quot;orange&quot;, &quot;watermelon&quot;],    introduce : function () {        this.fruits.forEach((item) =&gt; {            console.log(&quot;My name is &quot; + this.name + &quot;, I eat &quot; + item + &quot;.&quot;);        });    }}</code></pre><p>再看个例子，来验证一下(需在浏览器环境验证)</p><pre><code>function foo() {  setTimeout(() =&gt; {    console.log(&apos;id:&apos;, this.id);  }, 100);}var id = 21;foo.call({ id: 42 });// id: 42</code></pre><p>上面代码中，<code>setTimeout</code>的参数是一个箭头函数，这个箭头函数的定义生效是在<code>foo</code>函数生成时，而它的真正执行要等到<code>100</code>毫秒后。如果是普通函数，执行时<code>this</code>应该指向全局对象<code>window</code>，这时应该输出<code>21</code>。但是，箭头函数导致<code>this</code>总是指向函数定义生效时所在的对象（本例是<code>{id: 42}</code>），所以输出的是<code>42</code></p><p>本质上来说，<code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数</p><blockquote><p>1.简单的、单行的、不会复用的函数，建议采用箭头函数。如果函数体较为复杂，行数较多，还是应该采用传统的函数写法。而且如果箭头函数有多个参数，必须用圆括号包裹<br>2.不可以使用<code>arguments</code>对象，该对象在函数体内不存在，外层函数的对应变量<br>3.由于箭头函数没有自己的<code>this</code>，所以当然也就不能用<code>call()</code>、<code>apply()</code>、<code>bind()</code>这些方法去改变<code>this</code>的指向</p></blockquote><h2 id="五、数组扩展"><a href="#五、数组扩展" class="headerlink" title="五、数组扩展"></a>五、数组扩展</h2><h3 id="1-扩展运算符…"><a href="#1-扩展运算符…" class="headerlink" title="1. 扩展运算符…"></a>1. 扩展运算符…</h3><p>扩展运算符（spread）是三个点（…），它好比 <code>rest参数</code>的逆运算。<code>rest参数</code>将一个参数转换成数组，而本文中的扩展运算符则负责将一个数组转为用逗号分隔的参数序列。</p><pre><code>...[1, 2, 3]// 1 2 31, ...[2, 3, 4], 5// 1 2 3 4 5[...document.querySelectorAll(&apos;div&apos;)]// [&lt;div&gt;, &lt;div&gt;, &lt;div&gt;]var arr1 = [&apos;a&apos;, &apos;b&apos;];var arr2 = [&apos;c&apos;];[...arr1, ...arr2]// [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos; ]</code></pre><p>下面看几个实际使用案例</p><ul><li><p>使用扩展运算符拷贝数组</p><pre><code>// badconst len = items.length;const itemsCopy = [];let i;for (i = 0; i &lt; len; i++) { itemsCopy[i] = items[i];}// goodconst itemsCopy = [...items];</code></pre></li><li><p>替代数组的 <code>apply</code>方法<br>原来在ES5中，因为方法或者函数不支持数组参数, 如<code>Math.max/Array.push()</code>,而必须使用<code>apply(array)</code>的场景，都可以直接使用扩展运算符 …</p><pre><code>// ES5 的写法function f(x, y, z) {  // ...}var args = [0, 1, 2];f.apply(null, args);// ES6的写法function f(x, y, z) {  // ...}var args = [0, 1, 2];f(...args);var myArray = [1, 2, 3, 4];Math.max(myArray); //errorMath.max.apply(Math, myArray);// 4，ES5写法Math.max(...myArray);//4,ES6写法</code></pre></li></ul><ul><li><p>与解构赋值结合</p><pre><code>let test = [1,2,3]let [a, ...rest] = test;a //1</code></pre></li></ul><blockquote><p>如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错</p></blockquote><h3 id="2-Array-from"><a href="#2-Array-from" class="headerlink" title="2. Array.from"></a>2. Array.from</h3><p><code>Array.from()</code>可以将各种值转为真正的数组，并且还提供map功能。这实际上意味着，只要有一个原始的数据结构，你就可以先对它的值进行处理，然后转成规范的数组结构，进而就可以使用数量众多的数组方法。</p><pre><code>let arrayLike = {    &apos;0&apos;: &apos;a&apos;,    &apos;1&apos;: &apos;b&apos;,    &apos;2&apos;: &apos;c&apos;,    length: 3};// ES5的写法var arr1 = [].slice.call(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]// ES6的写法let arr2 = Array.from(arrayLike); // [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</code></pre><p>还有，在查找一组DOM节点时</p><pre><code>const foo = document.querySelectorAll(&apos;.foo&apos;);const nodes = Array.from(foo);</code></pre><p>还有，上文说过使用<code>rest参数</code>将参数转换成数组，从而避免使用<code>arguments</code>对象。因为<code>arguments</code>是类数组对象，所以还可以通过<code>Array.from</code>来完成转换工作。</p><pre><code>function foo() {  var args = Array.from(arguments);  // ...}</code></pre><p><code>Array.from</code>的第二个参数，作用类似于数组的<code>map</code>方法，用来对每个元素进行处理，将处理后的值放入返回的数组。</p><pre><code>Array.from(arrayLike, x =&gt; x * x);// 等同于Array.from(arrayLike).map(x =&gt; x * x);Array.from([1, 2, 3], (x) =&gt; x * x)// [1, 4, 9]Array.from({ length: 2 }, () =&gt; &apos;jack&apos;)// [&apos;jack&apos;, &apos;jack&apos;]</code></pre><blockquote><p>类数组对象本质特征只有一点：任何有<code>length</code>属性的对象。<br><code>Array.from({ length: 3 });// [ undefined, undefined, undefined ]</code></p></blockquote><h3 id="3-fill"><a href="#3-fill" class="headerlink" title="3. fill"></a>3. fill</h3><p><code>fill</code>方法使用给定值，填充一个数组。该方法用于空数组的初始化非常方便。要注意，数组中已有的元素，会被全部抹去。</p><pre><code>[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7)// [7, 7, 7]new Array(3).fill(7)// [7, 7, 7]</code></pre><h2 id="六、对象扩展"><a href="#六、对象扩展" class="headerlink" title="六、对象扩展"></a>六、对象扩展</h2><h3 id="1-对象属性的简写"><a href="#1-对象属性的简写" class="headerlink" title="1. 对象属性的简写"></a>1. 对象属性的简写</h3><p>如果对象的键值和变量名是一致的，ES6允许仅用变量名来初始化这个对象，而不是定义冗余的键值对。这时，属性名为变量名, 属性值为变量的值</p><pre><code>var foo = &apos;foo&apos;;var bar = &apos;bar&apos;;var baz = {    foo,    bar};// 等同于var baz = {    foo: foo,    bar: bar};</code></pre><h3 id="2-对象方法的简写"><a href="#2-对象方法的简写" class="headerlink" title="2 对象方法的简写"></a>2 对象方法的简写</h3><pre><code>var o = {  method(name) {    return &quot;Hello!&quot; + name;  }};// 等同于var o = {  method: function(name) {    return &quot;Hello!&quot; + name;  }};</code></pre><h3 id="3-对象导出属性的简写"><a href="#3-对象导出属性的简写" class="headerlink" title="3. 对象导出属性的简写"></a>3. 对象导出属性的简写</h3><pre><code>module.exports = { getItem, setItem, clear };// 等同于module.exports = {  getItem: getItem,  setItem: setItem,  clear: clear};</code></pre><h3 id="4-新增：object-assign"><a href="#4-新增：object-assign" class="headerlink" title="4 新增：object.assign()"></a>4 新增：object.assign()</h3><p>用于对象的合并，将源对象的所有可枚举属性，复制到目标对象。方法的第一个参数是目标对象，后面的参数都是源对象。如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><pre><code>var target = { a: 1, b: 1 };var source1 = { b: 2, c: 2 };var source2 = { c: 3 };Object.assign(target, source1, source2);target // {a:1, b:2, c:3}</code></pre><p>需要注意的是，这个方法施行的不是类似<code>merge</code>的操作，而是简单的同名<code>key</code>的的简单覆盖,而不是添加</p><pre><code>var target = {     a: 1,     b: {        key: {            inner_key:0        }    }};var source1 = {     b: {        key:{            inner_key:1,            inner_key2:2,            inner_key3:3        }    } };Object.assign(target, source1);// target { a: 1, b: { key: { inner_key: 1, inner_key2: 2, inner_key3: 3 } } }</code></pre><blockquote><p><code>Object.assign</code>方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。这个对象的任何变化，都会反映到目标对象上面。</p></blockquote><h3 id="5-Object-setPrototypeOf"><a href="#5-Object-setPrototypeOf" class="headerlink" title="5. Object.setPrototypeOf"></a>5. Object.setPrototypeOf</h3><p>用来设置一个对象的<code>prototype</code>对象，返回参数对象本身。它是 ES6 正式推荐的设置原型对象的方法。</p><pre><code>Object.setPrototypeOf(object, prototype)</code></pre><p>举一个例子</p><pre><code>let proto = {};let obj = { x: 10 };Object.setPrototypeOf(obj, proto); // 将proto对象设置为obj的原型proto.y = 20;proto.z = 40;obj.x // 10obj.y // 20obj.z // 40</code></pre><h3 id="6-Object-getPrototypeOf"><a href="#6-Object-getPrototypeOf" class="headerlink" title="6. Object.getPrototypeOf"></a>6. Object.getPrototypeOf</h3><p>该方法与<code>Object.setPrototypeOf</code>方法配套，用于读取一个对象的原型对象。下面是一个例子。</p><pre><code>function Rectangle() {  // ...}var rec = new Rectangle();Object.getPrototypeOf(rec) === Rectangle.prototype// trueObject.setPrototypeOf(rec, Object.prototype);Object.getPrototypeOf(rec) === Rectangle.prototype// false</code></pre><h3 id="7-Object-keys-，Object-values-，Object-entries"><a href="#7-Object-keys-，Object-values-，Object-entries" class="headerlink" title="7. Object.keys()，Object.values()，Object.entries()"></a>7. Object.keys()，Object.values()，Object.entries()</h3><p><code>Object.keys</code>方法，返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键名。<br><code>Object.values</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值。<br><code>Object.entries</code>方法返回一个数组，成员是参数对象自身的（不含继承的）所有可遍历（enumerable）属性的键值对数组。</p><pre><code>let {keys, values, entries} = Object;let obj = { a: 1, b: 2, c: 3 };for (let key of keys(obj)) {  console.log(key); // &apos;a&apos;, &apos;b&apos;, &apos;c&apos;}for (let value of values(obj)) {  console.log(value); // 1, 2, 3}for (let [key, value] of entries(obj)) {  console.log([key, value]); // [&apos;a&apos;, 1], [&apos;b&apos;, 2], [&apos;c&apos;, 3]}</code></pre><h2 id="七、Classes"><a href="#七、Classes" class="headerlink" title="七、Classes"></a>七、Classes</h2><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p><pre><code>function Point(x, y) {  this.x = x;  this.y = y;}Point.prototype.toString = function () {  return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;};var p = new Point(1, 2);</code></pre><p>ES6 提供了更接近传统面相对象语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过<code>class</code>关键字，可以定义类。</p><pre><code>//定义类class Point {  constructor(x, y) {    this.x = x;    this.y = y;  }  // 方法之间不需要逗号分隔，加了会报错  toString() {    return `${this.x}{this.y}`  }}</code></pre><blockquote><p>类必须使用<code>new</code>调用，否则会报错。</p></blockquote><h3 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h3><p>所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上<code>static</code>关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p><pre><code>class Foo {  static classMethod() {    return &apos;hello&apos;;  }}Foo.classMethod() // &apos;hello&apos;var foo = new Foo();foo.classMethod()// TypeError: foo.classMethod is not a function</code></pre><blockquote><p>父类的静态方法，可以被子类继承</p></blockquote><h3 id="Class的继承"><a href="#Class的继承" class="headerlink" title="Class的继承"></a>Class的继承</h3><p>Class 可以通过<code>extends</code>关键字实现继承，这比 ES5 的通过修改原型链实现继承，要清晰和方便很多。</p><pre><code>class Point {  constructor(x, y) {    this.x = x;    this.y = y;  }  toString() {    return &apos;(&apos; + this.x + &apos;, &apos; + this.y + &apos;)&apos;;  }}class ColorPoint extends Point {  constructor(x, y, color) {    // 调用父类的 constructor(x, y)     // 相当于Point.prototype.constructor.call(this,x,y)    super(x, y);     this.color = color;  }  toString() {    return this.color + &apos; &apos; + super.toString(); // 调用父类的toString()  }}</code></pre><p><code>super</code>关键字，它在这里表示父类的构造函数。子类必须在<code>constructor</code>方法中调用<code>super</code>方法，否则新建实例时会报错。这是因为子类没有自己的<code>this</code>对象，而是继承父类的<code>this</code>对象，然后对其进行加工。如果不调用<code>super</code>方法，子类就得不到<code>this</code>对象。</p><p>ES5 的继承，实质是先创造子类的实例对象<code>this</code>，然后再将父类的方法添加到<code>this</code>上面（<code>Parent.apply(this)</code>）。而 ES6 的继承机制完全不同，实质是先创造父类的实例对象<code>this</code>（<code>super()</code>方法），然后再用子类的构造函数修改<code>this</code>。</p><p><code>Object.getPrototypeOf</code>方法可以用来从子类上获取父类。因此，可以使用这个方法判断，一个类是否继承了另一个类。</p><pre><code>Object.getPrototypeOf(ColorPoint) === Point// true</code></pre><h2 id="八、Modules（模块）"><a href="#八、Modules（模块）" class="headerlink" title="八、Modules（模块）"></a>八、Modules（模块）</h2><h3 id="使用-import-取代-require"><a href="#使用-import-取代-require" class="headerlink" title="使用 import 取代 require"></a>使用 import 取代 require</h3><pre><code>// badconst moduleA = require(&apos;moduleA&apos;);const func1 = moduleA.func1;const func2 = moduleA.func2;// goodimport { func1, func2 } from &apos;moduleA&apos;;</code></pre><h3 id="使用-export-取代-module-exports"><a href="#使用-export-取代-module-exports" class="headerlink" title="使用 export 取代 module.exports"></a>使用 export 取代 module.exports</h3><pre><code>// point.jsmodule &quot;point&quot; {    export class Point {        constructor (x, y) {            public x = x;            public y = y;        }    }}// myapp.js//声明引用的模块module point from &quot;/point.js&quot;;//这里可以看出，尽管声明了引用的模块，还是可以通过指定需要的部分进行导入import Point from &quot;point&quot;;var origin = new Point(0, 0);console.log(origin);</code></pre><hr><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://github.com/airbnb/javascript#ecmascript-6-es-2015-styles" target="_blank" rel="noopener">ES6编程规范</a><br><a href="https://qiutc.me/post/es6-cheatsheet.html#tip" target="_blank" rel="noopener">ES手册传送门</a></p><p><img src="/images/image1.png" alt="upload successful"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分：前言&quot;&gt;&lt;a href=&quot;#第一部分：前言&quot; class=&quot;headerlink&quot; title=&quot;第一部分：前言&quot;&gt;&lt;/a&gt;第一部分：前言&lt;/h1&gt;&lt;h2 id=&quot;一、为什么要使用-ES6&quot;&gt;&lt;a href=&quot;#一、为什么要使用-ES6&quot; class=&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack体积优化</title>
    <link href="http://jhmobile.github.io/2017/10/11/webpack%E4%BD%93%E7%A7%AF%E4%BC%98%E5%8C%96/"/>
    <id>http://jhmobile.github.io/2017/10/11/webpack体积优化/</id>
    <published>2017-10-11T07:16:00.000Z</published>
    <updated>2018-10-31T01:40:24.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>从webpack文件上来看，主要用到的有entry，output，resolve，module，plugins</p><ul><li>entry入口<br>用来写入口文件，SPA一般是一个入口。当然也有vendor写在这里。</li><li>output出口<br> 主要为webpack经过你设计的规则构建后输出的文件，指定输出位置，文件名等配置。</li><li>resolve解析<br> 定制你的解析规则，后面会说到。</li><li>module模块<br> 主要是装载器loaders书写的地方，webpack2已经改为rules。</li><li>plugins插件</li></ul><p>详细请看<strong><a href="https://doc.webpack-china.org/configuration" target="_blank" rel="noopener">配置</a></strong></p><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>output除了用来指定输出位置外，还有一些hash和chunk的配置。hash是随机生成的，每一次都会改变。chunk这里指的是webpack分割的代码块，webpack在编译过程中会解析内容，通过内容生成chunkhash，chunkhash相对hash来说是相对不变的，我们也是利用这一点来做浏览器缓存。这里webpack提供了hash生成的算法，chunkhash失效时间等配置，一般来说我们不会用到。</p><p>主要用到的东西就是path，publicpath，filename，chunkFilename<br>path指的是webpack构建完成后的输出地址<br>publicpath指的是资源的访问地址<br>filename是生成文件的名字<br>chunkFilename非入口的文件名</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><p>resolve是webpack可定制的解析，他的配置决定了你在require或者import一个包的时候，webpack去哪里找这个文件。<br>resolve.modules指定查找包的文件夹，可用绝对路径和文件名。文件名的查找规则和node_modules查找规则一致。<br>resolve.descriptionFiles指定查找包的描述文件，一般为package.json<br>resolve.mainFields指定描述文件中的入口字段，一般为main</p><p>一般的解析就是通过modules查找到包，然后找包内的描述文件package.json,然后根据包内的描述文件入口字段mainFields来引入js文件<br>似乎mainFields指定的字段不支持Array类型，也就是说package.json中的main字段得是个String，这样你需要引入多个文件的时候就需要做个入口文件了。</p><h3 id="loader和plugins的区别"><a href="#loader和plugins的区别" class="headerlink" title="loader和plugins的区别"></a>loader和plugins的区别</h3><p>其实他们两没有什么可比性，放在这里只是想说明一下他们在webpack中扮演的角色。<br>webpack是一个插件式的架构，采用Tapable事件流。<br>loader其实只是在webpack编译过程中的某一个时期执行，他的作用就是对符合规则的文件进行转换，比如常用的less-loader、css-loader、style-loader，less-loader先将less语法转为css，css-loader支持我们require引用css和处理css内部的import和url，style-loader则是将css文件转为style注入到页面中。loader支持链式调用，前面提到的例子就是将less转为style的一个链式调用。除此之外，各个loader之间是互不影响。<br>loader的调用方式分为三种，分别是命令行调用，内联调用和在配置文件webpack.config.js中配置。个人比较推荐第三种，这样对源码的影响将会是最小的。<br>plugins不同于loader，他贯穿整个webpack编译。利用webpack提供的很多hook，在不同的时期触发相应的操作，功能也多种多样。<br>感兴趣的可以了解一下<a href="http://www.tuicool.com/articles/2Inmeyn" target="_blank" rel="noopener">webpack之loader和plugin简介</a>和<a href="https://lihuanghe.github.io/2016/05/30/webpack-source-analyse.html" target="_blank" rel="noopener">webpack 源码解析</a>。</p><h4 id="常用的loader"><a href="#常用的loader" class="headerlink" title="常用的loader"></a>常用的loader</h4><ul><li>样式：style-loader、css-loader、less-loader、sass-loader等</li><li>文件：raw-loader、file-loader 、url-loader、json-loader等</li><li>编译：babel-loader、coffee-loader 、ts-loader等</li><li>校验测试：mocha-loader、jshint-loader 、eslint-loader等</li></ul><h4 id="常用的plugin"><a href="#常用的plugin" class="headerlink" title="常用的plugin"></a>常用的plugin</h4><ul><li>DefinePlugin<br>  全局常量定义</li><li>UglifyJsPlugin<br>  代码丑化</li><li>OccurenceOrderPlugin</li><li>HtmlWebpackPlugin<br>  自动生成html5文件</li><li>CommonsChunkPlugin<br>  公共代码整合</li><li>CompressionWebpackPlugin<br>  gzip压缩</li></ul><p>详细请看<strong><a href="https://github.com/webpack-contrib/awesome-webpack" target="_blank" rel="noopener">awesome-webpack</a>、<a href="http://www.tuicool.com/articles/2Inmeyn" target="_blank" rel="noopener">webpack之loader和plugin简介</a>、<a href="http://www.css88.com/doc/webpack2/guides/development/" target="_blank" rel="noopener">webpack2.2中文文档</a></strong></p><h3 id="webpack执行流程"><a href="#webpack执行流程" class="headerlink" title="webpack执行流程"></a>webpack执行流程</h3><ul><li>entry-option<br>初始化option</li><li>run<br>开始编译</li><li>make<br>从entry开始递归的分析依赖，对每个依赖模块进行build</li><li>before-resolve - after-resolve<br>对其中一个模块位置进行解析</li><li>build-module<br>开始构建 (build) 这个module,这里将使用文件对应的loader加载</li><li>normal-module-loader<br>对用loader加载完成的module(是一段js代码)进行编译,用 <a href="https://github.com/ternjs/acorn" target="_blank" rel="noopener">acorn</a> 编译,生成ast抽象语法树。</li><li>program<br>开始对ast进行遍历，当遇到require等一些调用表达式时，触发call require<br>事件的handler执行，收集依赖，并。如：AMDRequireDependenciesBlockParserPlugin等</li><li>seal<br>所有依赖build完成，下面将开始对chunk进行优化，比如合并,抽取公共模块,加hash</li><li>bootstrap<br>生成启动代码<br>emit<br>把各个chunk输出到结果文件</li></ul><h2 id="包体积优化"><a href="#包体积优化" class="headerlink" title="包体积优化"></a>包体积优化</h2><h3 id="包分析"><a href="#包分析" class="headerlink" title="包分析"></a>包分析</h3><p>通过插件<a href="https://www.npmjs.com/package/webpack-bundle-analyzer" target="_blank" rel="noopener">webpack-bundle-analyzer</a>进行分析。</p><p><code>npm i webpack-bundle-analyzer --save</code></p><p>这个插件在使用后会开启一个网页，一般为localhost:8888，当然这个可以配置。通过图像展示我们打包的每个文件组成，各个部分体积，总体积等一些信息。</p><p>详细的配置可以查看npm上面的文档，这里我也是用了npm的案例配置。</p><p><strong>PS：</strong>个人认为优化还是要基于对项目的熟悉上，否则可能会无从下手。</p><h3 id="lodash-优化"><a href="#lodash-优化" class="headerlink" title="lodash 优化"></a>lodash 优化</h3><p><code>npm install babel-plugin-lodash lodash-webpack-plugin --save</code></p><pre><code>const LodashModuleReplacementPlugin = require(&apos;lodash-webpack-plugin&apos;);const config = {  plugins: [    new LodashModuleReplacementPlugin({      path: true,      flattening: true    })  ]};.babelrcplugins: [&apos;transform-runtime&apos;, &apos;lodash&apos;],</code></pre><h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p><code>npm i bundle-loader --save</code></p><pre><code>require(&quot;bundle-loader?lazy&amp;name=my-chunk!./file.js&quot;);ORimport XXX from &quot;bundle-loader?lazy&amp;[name=[name]]!./file.js&quot;</code></pre><h3 id="CDN优化"><a href="#CDN优化" class="headerlink" title="CDN优化"></a>CDN优化</h3><p>CDN优化依赖一个包管理器Bower</p><p>Bower算是一个很老的前端包管理器，虽说它叫包管理器，其实他只是提供了扁平化的下载和记录功能。</p><p>目前Bower已宣告终止开发，前端模块管理全面移向npm。</p><p>这里npm3已经号称是JavaScript的包管理器，而不仅仅是node的包管理器了。：）</p><p>####　安装Bower</p><p><code>npm i -g bower</code></p><h4 id="Bower部分命令"><a href="#Bower部分命令" class="headerlink" title="Bower部分命令"></a>Bower部分命令</h4><p>bower的命令和npm大同小异，以下是几个常用的命令：</p><ul><li>初始化，生成bower.json文件，功效和package.json差不多<br><code>bower init</code></li><li>查找包，当然也可以通过官网查找<br><code>bower search XXX</code></li><li>安装包，规则和npm一致，可以下载对应版本的包<br><code>bower install XXX@XX --save</code></li></ul><h4 id="webpack和bower的连接"><a href="#webpack和bower的连接" class="headerlink" title="webpack和bower的连接"></a>webpack和bower的连接</h4><p>通过插件<a href="https://www.npmjs.com/package/bower-webpack-plugin" target="_blank" rel="noopener">bower-webpack-plugin</a>进行webpack和bower的连接。</p><p><code>npm i bower-webpack-plugin --save</code></p><p>这里其实他做的很类似resolve的alise，就是通过插件指定了require/import一个bower包的时候的地址和文件。</p><p>以下是它的配置：</p><pre><code>var BowerWebpackPlugin = require(&quot;bower-webpack-plugin&quot;);new BowerWebpackPlugin({  modulesDirectories: [&quot;bower_components&quot;],  manifestFiles:&quot;bower.json&quot;,  excludes: /.*\.less/}),</code></pre><p>通过modulesDirectories指向bower的依赖文件夹，manifestFiles指向入口文件。这里一般配置一般都是固定的，详细的配置可以查看NPM文档。<br>下面是bootstrap的bower.json文件，可以看出它是通过main字段来引入对应文件的。</p><p>bower包的引入和正常的npm包一样引入，通过import或者require，测试发现还是require效果好一点，少一点坑。</p><p>在升级到webpack2之后，发现这个插件已经不支持了，转采用<a href="https://github.com/codewizz/bower-resolve-webpack-plugin" target="_blank" rel="noopener">bower-resolve-webpack-plugin</a><br>它的配置参考github文档，发现只能加载js文件，废弃！不过可以借鉴一下它写插件</p><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p>bootstrap-loader用来解决bootstrap加载<br>查找网上webpack引入bootstrap一致推荐bootstrap-loader，测试后发现引入这个东西bootstrap会占用将近150kb的空间，记录一下<br>vendor占用544kb<br>app占用158kb</p><p>安装<br><code>npm install bootstrap-loader --save</code><br><code>npm install bootstrap-sass --save</code><br><code>npm install css-loader node-sass resolve-url-loader sass-loader style-loader url-loader --save</code></p><p>加载<br> <code>require(&#39;bootstrap-loader&#39;)</code></p><p>详细请看<a href="http://www.cnblogs.com/liuyt/p/5708508.html" target="_blank" rel="noopener">如何把bootstrap用webpack打包</a></p><p>另一种办法是通过bower引入，但是bower中bootstrap给的入口文件有一个less，无法解决，只能修改less为css。这样bootstrap占用会只有不到50kb<br>vendor占用390kb<br>app占用190kb</p><hr><h2 id="webpack2-tree-shaking"><a href="#webpack2-tree-shaking" class="headerlink" title="webpack2 tree-shaking"></a>webpack2 tree-shaking</h2><p>node的import语法允许我们只引入我们需要的方法，这对于js的内存占用是一种极大的提升。同时在webpack打包的时候也利用了这种特性，只打包我们引入的方法。但是这一点和babel的转码会有冲突，具体原因看这里如下：</p><blockquote><p>tree-shaking 是指借助es6 import export 语法静态性的特点来删掉export但是没有import过的东西，babel会在编译转化es6代码时把import export转换为cmd的module.export<br>原文请看<a href="http://www.2ality.com/2015/12/webpack-tree-shaking.html" target="_blank" rel="noopener">Tree-shaking with webpack 2 and Babel 6</a>。</p></blockquote><p>我们为了利用webpack2的这种特性，需要做一些配置，见原文。<br>经过测试，我发现这个特性能减少的包体积量几乎可以忽略不计。难怪会有此讨论-&gt;<a href="https://www.zhihu.com/question/41922432" target="_blank" rel="noopener">如何评价 Webpack 2 新引入的 Tree-shaking 代码优化技术？</a></p><h2 id="打包速度优化"><a href="#打包速度优化" class="headerlink" title="打包速度优化"></a>打包速度优化</h2><p>flag</p><h2 id="webpack2入坑"><a href="#webpack2入坑" class="headerlink" title="webpack2入坑"></a>webpack2入坑</h2><ol><li>入口和出口其实改动不大</li><li>resolve改动会大一点，不过因为我们不经常用，所以不用太关注，这里需要注意的就是以下几点：<ul><li>resolve.extensions配置，数组不需要在第一位加空字符串了</li><li>resolve.root, resolve.fallback, resolve.modulesDirectories合并为resolve.modules</li></ul></li><li>module语法改动<ul><li>module.loaders改为module.rules</li><li>不再支持简写loader，也就是说css以后要写成css-loader</li><li>链式调用style!css!less改为use[]</li></ul></li><li>plugins改动<br> 这个就需要看各个插件的支持了，有部分插件是只支持1不支持2的，还有webpack内置插件的有部分语法改动，需要用的时候查看。改动最大的就是extract-text-webpack-plugin，不升级无法使用。</li></ol><p>webpack2主要的变更就是对ES6的支持更好了，当然我升级到2以后除了踩了很多语法坑和插件坑之外，并没有体验到所谓的性能提升，很尴尬。利用了tree shaking特性后包的体积也并没有减小多少。只能说webpack2比1更大的规范化，并且目前webpack已经升级到了3.5，语法已经稳定，市面上的各类资料和插件也都是webpack2更完善、支持更好。</p><p><strong>传送门</strong></p><p><a href="http://www.tuicool.com/articles/2Inmeyn" target="_blank" rel="noopener">webpack之loader和plugin简介</a></p><p><a href="https://lihuanghe.github.io/2016/05/30/webpack-source-analyse.html" target="_blank" rel="noopener">webpack 源码解析</a></p><p><a href="https://doc.webpack-china.org/" target="_blank" rel="noopener">webpack中文官网</a></p><p><a href="http://blog.csdn.net/keliyxyz/article/details/51571386" target="_blank" rel="noopener">webpack入门（一）——webpack 介绍</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIyMjE0ODQ0OQ==&amp;mid=402764877&amp;idx=1&amp;sn=aa40a80bb1920a80fc187e8df99c4824" target="_blank" rel="noopener">[译] Webpack 2 有哪些新东西</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;从webpack文件上来看，主要用到的有entry，output，resolve，module，plugins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;e
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git 使用入门</title>
    <link href="http://jhmobile.github.io/2017/06/15/Git%20%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>http://jhmobile.github.io/2017/06/15/Git 使用入门/</id>
    <published>2017-06-15T07:17:48.000Z</published>
    <updated>2018-10-31T01:40:24.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Git-客户端安装"><a href="#Git-客户端安装" class="headerlink" title="Git 客户端安装"></a>Git 客户端安装</h1><p>讲真，这个对大家应该都没有难度。。。提供下载地址，自己玩</p><h2 id="Mac-安装"><a href="#Mac-安装" class="headerlink" title="Mac 安装"></a>Mac 安装</h2><ul><li>图形化的Git安装工具 <a href="https://sourceforge.net/projects/git-osx-installer/files/" target="_blank" rel="noopener">点我</a></li><li><a href="https://brew.sh/index_zh-cn.html" target="_blank" rel="noopener">HomeBrew</a> 安装 </li></ul><h2 id="Windows安装"><a href="#Windows安装" class="headerlink" title="Windows安装"></a>Windows安装</h2><p><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">Git For Windows</a>  提供命令行 Git Bash 和图形化 Git GUI</p><hr><a id="more"></a><h1 id="玩转本地仓库"><a href="#玩转本地仓库" class="headerlink" title="玩转本地仓库"></a>玩转本地仓库</h1><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git init</span><br><span class="line">Initialized empty Git repository in /Users/LeoPoldCrossing/Development/work/android-pay-git-test/.git/</span><br></pre></td></tr></table></figure><p>android-pay-git-test 目录下多了一个 .git 目录，意味着该目录已经成为可以通过Git管理的Repository。</p><blockquote><p>Tips: .git 目录不要乱动~切记。。。</p></blockquote><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git add     : 将修改添加到暂存区</span><br><span class="line">$ git commit  : 提交代码</span><br></pre></td></tr></table></figure><blockquote><p>Tips: </p><ol><li>git commit -m “description”</li><li>git add . 可以add所有修改文件</li></ol></blockquote><h3 id="查看状态及修改内容"><a href="#查看状态及修改内容" class="headerlink" title="查看状态及修改内容"></a>查看状态及修改内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git status        : 查看状态</span><br><span class="line">$ git diff &lt;file&gt;   : 查看修改的内容</span><br></pre></td></tr></table></figure><blockquote><p>Tips:<br>多使用 git status 命令查看当前状态</p></blockquote><h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git log    // 查看提交历史</span><br><span class="line">commit f91b85aa785e5ecb84f8a103dc8646bee17878fe</span><br><span class="line">Author: LeoPoldCrossing &lt;18911378366@163.com&gt;</span><br><span class="line">Date:   Tue Jun 13 12:37:58 2017 +0800</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git log --pretty=oneline</span><br><span class="line">f91b85aa785e5ecb84f8a103dc8646bee17878fe first commit</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reflog // 查看提交命令历史</span><br><span class="line">f91b85a HEAD@&#123;0&#125;: commit (initial): first commit</span><br></pre></td></tr></table></figure><h3 id="后悔药-撤销修改及版本回退"><a href="#后悔药-撤销修改及版本回退" class="headerlink" title="后悔药-撤销修改及版本回退"></a>后悔药-撤销修改及版本回退</h3><ul><li><p>场景一： 仅修改了工作区，直接丢弃工作区的修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>场景二： 修改已经提交到暂存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git reset HEAD &lt;file&gt;</span><br><span class="line">$ git checkout -- &lt;file&gt;</span><br></pre></td></tr></table></figure></li><li><p>场景三： 修改已经 commit</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git reset --hard &lt;版本&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Tips : </p><ol><li>HEAD 表示当前版本，上一个版本为HEAD^，上上个版本 HEAD^^，之前的第100个版本 HEAD~100</li><li>每一次 commit 都会生成一个唯一SHA1值，我们称之为 commit id，可以根据该 id 准确的定位到某一版本。</li></ol></blockquote><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm &lt;file&gt;</span><br></pre></td></tr></table></figure><p>执行 rm 命令后，文件在工作区删除，我们可以使用 checkout 找回或者 commit提交删除。</p><h2 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h2><h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建并切换分支</span><br><span class="line">$ git branch &lt;branch name&gt;</span><br><span class="line">$ git checkout &lt;branch name&gt;</span><br><span class="line">or</span><br><span class="line">$ git checkout -b &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看分支列表"><a href="#查看分支列表" class="headerlink" title="查看分支列表"></a>查看分支列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git branch </span><br><span class="line">* dev     // * 标注为当前所在分支</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 删除已合并分支</span><br><span class="line">$ git branch -d &lt;branch name&gt;</span><br><span class="line">// 强行删除</span><br><span class="line">$ git branch -D &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git merge &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="查看分支合并日志"><a href="#查看分支合并日志" class="headerlink" title="查看分支合并日志"></a>查看分支合并日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br></pre></td></tr></table></figure><h3 id="分支冲突"><a href="#分支冲突" class="headerlink" title="分支冲突"></a>分支冲突</h3><p>冲突的原因：不同的分支修改同一位置的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD   // 当前分支</span><br><span class="line">git#Git冲突master分支</span><br><span class="line">=======         </span><br><span class="line">git#Git冲突分支</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; conflictTest // 冲突分支</span><br></pre></td></tr></table></figure></p><p>删除多余内容，保留所需内容，提交即可。</p><h3 id="分支操作流程"><a href="#分支操作流程" class="headerlink" title="分支操作流程"></a>分支操作流程</h3><blockquote><p>初始状态：HEAD 执行 master<br>创建分支：创建dev指针，指向 master 相同的 commit<br>切换分支：HEAD 指向 dev<br>修改分支：dev 指向最新的 commit，master指向不变，HEAD 跟随 dev<br>切换至master：HEAD 指向 master 的 commit<br>合并dev分支：master 指向 dev 最新的commit，HEAD 跟随 master </p></blockquote><h3 id="分支合并模式"><a href="#分支合并模式" class="headerlink" title="分支合并模式"></a>分支合并模式</h3><ul><li>Fast-forward: “快进模式”,直接将 master 指向 dev 最新的 commit。Git默认采用这种模式，合并速度快，删除分支后，会丢失分支信息。</li></ul><p>fast-forward 合并分支<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge dev</span><br><span class="line">Updating <span class="number">732</span>a5c7..c8898aa</span><br><span class="line">Fast-forward</span><br><span class="line">markets.txt | <span class="number">3</span> ++-</span><br><span class="line"><span class="number">1</span> file changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</span><br></pre></td></tr></table></figure></p><p>合并日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$  git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   65df01a resolve conflict</span><br><span class="line">|\  </span><br><span class="line">| * 0b22857 conflict branch commit</span><br><span class="line">* | cfadfe0 conflict master</span><br><span class="line">|/  </span><br><span class="line">* c8898aa git branch test</span><br><span class="line">* 732a5c7 android-pay first commit</span><br></pre></td></tr></table></figure></p><ul><li>–no-ff模式:不使用快进模式，该模式在merge时生成一个新的commit，需要 -m 描述信息，git log 命令可以查看分支历史提交信息</li></ul><p>–no-ff 合并分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --no-ff -m &quot;merge form no-ff branch&quot; dev</span><br><span class="line"># 因为本次合并会创建一个新的commit ，所以需要 -m 参数</span><br><span class="line">Merge made by the &apos;recursive&apos; strategy.</span><br><span class="line"> markets.txt | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br></pre></td></tr></table></figure></p><p>合并日志<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   2d45171 merge form no-ff branch</span><br><span class="line">|\  </span><br><span class="line">| * 6907c87 --no-ff branch</span><br><span class="line">|/  </span><br><span class="line">*   65df01a resolve conflict</span><br><span class="line">|\  </span><br><span class="line">| * 0b22857 conflict branch commit</span><br><span class="line">* | cfadfe0 conflict master</span><br><span class="line">|/  </span><br><span class="line">* c8898aa git branch test</span><br><span class="line">* 732a5c7 android-pay first commit</span><br></pre></td></tr></table></figure></p><h2 id="临时存储"><a href="#临时存储" class="headerlink" title="临时存储"></a>临时存储</h2><p>场景：开发过程中，我们需要切换到另一分支，当前分支的修改不能或不想提交，又不能丢弃。。。怎么玩？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 储存工作现场</span><br><span class="line">$ git stash     </span><br><span class="line">// 查看 stash 列表</span><br><span class="line">$ git stash list</span><br><span class="line">// 恢复工作现场 </span><br><span class="line">$ git stash apply</span><br><span class="line">$ git satsh apply stash@&#123;0&#125; </span><br><span class="line">// 删除工作现场</span><br><span class="line">$ git stash drop</span><br><span class="line">$ git satsh drop stash@&#123;0&#125;</span><br><span class="line">// 恢复，并删除 stash </span><br><span class="line">$ git stash pop </span><br><span class="line">$ git satsh pop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h2><h3 id="SSH-设置"><a href="#SSH-设置" class="headerlink" title="SSH 设置"></a>SSH 设置</h3><p>Git 本地仓库和远程仓库之前数据传输使用ssh协议。</p><ul><li><p>SSH key 生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</span><br><span class="line">...</span><br><span class="line">可以起个文件名</span><br><span class="line">...</span><br><span class="line">$ cat ~/.ssh/&lt;ssh file name&gt;.pub // 复制公钥，远程仓库设置</span><br></pre></td></tr></table></figure></li><li><p>Gitlab 设置 SSH Key<br><img src="http://static.zybuluo.com/LeoPoldCrossing/nk7noj9a8ls20rf5ahh1spo8/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-13%2016.33.52.png" alt="屏幕快照 2017-06-13 16.33.52.png-83.1kB"></p></li><li><p>验证链接是否成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi LeoPoldCrossing! You&apos;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ul><h3 id="多SSH管理"><a href="#多SSH管理" class="headerlink" title="多SSH管理"></a>多SSH管理</h3><p>多个Git平台账号共存，比如 Github 和 Gitlab ，如何处理？ </p><ul><li><p>生成对应平台的 SSH key</p></li><li><p>添加ssh私钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure></li><li><p>创建修改config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">    Host gitlab.jinhui365.cn</span><br><span class="line">    HostName gitlab.jinhui365.cn  </span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line">    User gitlab username</span><br><span class="line"># github</span><br><span class="line">    Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    User github username</span><br></pre></td></tr></table></figure></li></ul><h3 id="用户名和邮箱配置"><a href="#用户名和邮箱配置" class="headerlink" title="用户名和邮箱配置"></a>用户名和邮箱配置</h3><ul><li><p>全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;  </span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>局部配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;yourname&quot;  </span><br><span class="line">git config user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li><li><p>重置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name &quot;yourname&quot;</span><br><span class="line">git config --global --unset user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li></ul><h2 id="远程操作"><a href="#远程操作" class="headerlink" title="远程操作"></a>远程操作</h2><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p>这个很简单，就不演示了~ Github 或者 Gitlab 上找 New Reposity。得到类似下面的地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@gitlab.jinhui365.cn:android/android-pay.git</span><br></pre></td></tr></table></figure></p><h3 id="关联仓库"><a href="#关联仓库" class="headerlink" title="关联仓库"></a>关联仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure><h3 id="查看仓库信息"><a href="#查看仓库信息" class="headerlink" title="查看仓库信息"></a>查看仓库信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 查看信息</span><br><span class="line">$ git remote </span><br><span class="line">origin</span><br><span class="line">// 查看详细信息</span><br><span class="line">$ git remote -v </span><br><span class="line">origingit@gitlab.jinhui365.cn:android/android-pay.git (fetch)</span><br><span class="line">origingit@gitlab.jinhui365.cn:android/android-pay.git (push)</span><br></pre></td></tr></table></figure><h3 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 首次推送</span><br><span class="line">$ git push -u &lt;repository&gt; &lt;branch name&gt; </span><br><span class="line">// 再次推送</span><br><span class="line">$ git push &lt;repository&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 查看所有修改</span><br><span class="line">git diff &lt;repository&gt;/&lt;branch name&gt;...HEAD</span><br><span class="line">// 查看某一个文件的修改</span><br><span class="line">git diff &lt;repository&gt;/&lt;branch name&gt;...HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><ul><li><p>克隆仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone &lt;仓库地址&gt;</span><br></pre></td></tr></table></figure></li><li><p>拉取代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git pull &lt;repository&gt; &lt;branch name&gt;</span><br></pre></td></tr></table></figure></li></ul><h3 id="关联分支"><a href="#关联分支" class="headerlink" title="关联分支"></a>关联分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch –set-upstream-to=&lt;repository&gt;/&lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>分支关联后，git pull 或者 push 直接使用。。。</p><hr><h1 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h1><h2 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h2><ul><li><p>默认标签,打在HEAD</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tag name&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定commit </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag &lt;tag name&gt; &lt;commit id&gt;</span><br></pre></td></tr></table></figure></li><li><p>创建说明标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -a &lt;tag name&gt; &quot;description&quot; &lt;commit id&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h2><ul><li><p>查看列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag</span><br></pre></td></tr></table></figure></li><li><p>查看标签信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git show &lt;tag name&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Push-标签"><a href="#Push-标签" class="headerlink" title="Push  标签"></a>Push  标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin &lt;tag name&gt;</span><br></pre></td></tr></table></figure><h2 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h2><ul><li><p>本地删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tag name&gt;</span><br></pre></td></tr></table></figure></li><li><p>远程删除</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git tag -d &lt;tag name&gt;</span><br><span class="line">$ git push origin :refs/tags/&lt;tag name&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="拉取TAG代码"><a href="#拉取TAG代码" class="headerlink" title="拉取TAG代码"></a>拉取TAG代码</h2><ul><li><p>不可编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout &lt;tag name&gt;</span><br></pre></td></tr></table></figure></li><li><p>可编辑:从TAG checkout 一个分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b &lt;branch name&gt; &lt;tag name&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><p>author: <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Git-客户端安装&quot;&gt;&lt;a href=&quot;#Git-客户端安装&quot; class=&quot;headerlink&quot; title=&quot;Git 客户端安装&quot;&gt;&lt;/a&gt;Git 客户端安装&lt;/h1&gt;&lt;p&gt;讲真，这个对大家应该都没有难度。。。提供下载地址，自己玩&lt;/p&gt;
&lt;h2 id=&quot;Mac-安装&quot;&gt;&lt;a href=&quot;#Mac-安装&quot; class=&quot;headerlink&quot; title=&quot;Mac 安装&quot;&gt;&lt;/a&gt;Mac 安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;图形化的Git安装工具 &lt;a href=&quot;https://sourceforge.net/projects/git-osx-installer/files/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://brew.sh/index_zh-cn.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HomeBrew&lt;/a&gt; 安装 &lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Windows安装&quot;&gt;&lt;a href=&quot;#Windows安装&quot; class=&quot;headerlink&quot; title=&quot;Windows安装&quot;&gt;&lt;/a&gt;Windows安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://git-for-windows.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Git For Windows&lt;/a&gt;  提供命令行 Git Bash 和图形化 Git GUI&lt;/p&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jhmobile.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jhmobile.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git 使用分享</title>
    <link href="http://jhmobile.github.io/2017/06/15/Git%20%E4%BD%BF%E7%94%A8%E5%88%86%E4%BA%AB/"/>
    <id>http://jhmobile.github.io/2017/06/15/Git 使用分享/</id>
    <published>2017-06-15T07:03:48.000Z</published>
    <updated>2018-10-31T01:40:24.170Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-几个重要的概念"><a href="#Git-几个重要的概念" class="headerlink" title="Git 几个重要的概念"></a>Git 几个重要的概念</h2><ul><li>本地仓库<br>Git 中大部分都是针对本地仓库的操作，完全不用担心污染远程仓库，比如 git add ，git commit ，git reset，checkout 等等。</li><li>远程仓库<br>服务端的代码仓库，用于多人协作开发。。。每个开发人员的本地仓库都是一份完整的远程仓库备份。</li></ul><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git push  // 推送至远程</span><br><span class="line">$ git pull  // 从远程拉取</span><br></pre></td></tr></table></figure><ul><li><p>工作区<br>个人电脑中代码所在目录（除版本库之外的内容），比如我们android的项目在我电脑里的工作区就是 android-pay项目。</p></li><li><p>暂存区<br>stage 或者 index，在 .git 目录下，有一个 index 文件，它是一个包含文件索引的目录树，记录了文件名，文件的状态信息（时间戳，文件长度等）。文件的内容并不存储其中，而是保存在Git对象库（.git/objects）中，文件索引建立了文件和对象库中对象实体之间的对应。<br>如果当前仓库，有文件更新，并且使用git add命令，那么这些更新就会出现在暂存区中。</p></li><li><p>版本库<br>执行 git init 命令后，生成的.git 目录。</p></li></ul><table><thead><tr><th style="text-align:center">工作原理示意图</th></tr></thead><tbody><tr><td style="text-align:center"></td></tr></tbody></table><p><img src="http://static.zybuluo.com/LeoPoldCrossing/ir365lewu7qq77m6wbvohe60/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-14%2017.21.06.png" alt="屏幕快照 2017-06-14 17.21.06.png-159.7kB"></p><hr><h2 id="为什么使用Git？"><a href="#为什么使用Git？" class="headerlink" title="为什么使用Git？"></a>为什么使用Git？</h2><ul><li><p>Git为分布式，SVN为集中式<br>最核心的区别，Git几乎所有操作都可以脱离网络，SVN对网络依赖性比较强。</p></li><li><p>commit 更有意义<br>随时随地，commit。。。区分功能的提交，保护临时开发成果，还不用担心影响到别人</p></li><li><p>恢复版本<br>Git版本库，记录了所有的提交历史，找到commit id就 可以一些文件恢复到上次改动之前的版本（甚至整个项目恢复到之前的版本）。</p></li><li><p>查看历史<br>本地即可查看历史提交，历史版本等Log。</p></li><li><p>备份<br>当然出现问题的概率很小，至少 Git 在每个开发人员电脑都做了一份备份。</p></li><li><p>分支管理<br>git clone 命令是 clone 整个完整的代码录，<code>git branch -r</code> 命令可以查看到项目所有的分支，checkout 移动指针切换分支。<br>SVN 的 checkout 分支会在你的本地建立一个新目录。</p></li><li><p>Code Review<br>代码合并前申请merge request，code review 更直观。<br>Git 鼓励小功能也分支，简单快速么，合并分支需要 code review ，更利于我们代码质量的提高。</p></li><li><p>开发中断，应对方便<br>开发过程中必须切换分支，当前工作区修改处理方便。</p></li><li><p>顺应潮流，拥抱变化</p></li></ul><p>个人最大的感触是 SVN 慢，Git 快。Git对于临时开发成果的保护更好，更方便。<br>但是 Git 操作更繁琐一些，需要一定的学习成本。我们当初选择Git最大的原因是 Code Review。</p><hr><h2 id="SVN-迁移-Git-流程"><a href="#SVN-迁移-Git-流程" class="headerlink" title="SVN 迁移 Git 流程"></a>SVN 迁移 Git 流程</h2><ol><li>项目管理员初始化版本库<br> <code>$ git init</code> </li><li>创建远程仓库，本地生成 SSH key ，设置 SSK key。<br> <code>$ ssh-keygen -t rsa -C &quot;youremail@example.com&quot;</code></li><li>关联本地仓库和远程仓库。<br> <code>$ git remote add origin &lt;仓库地址&gt;</code></li><li>提交代码，推送至远程仓库<br> <code>$ git add &lt;file&gt; or git add .</code><br> <code>$ git commit -m &lt;description&gt;</code><br> <code>$ git push -u origin &lt;branch name&gt;</code></li><li>其余小伙伴 clone 仓库，创建关联分支，一起愉快的开发。<br> <code>$ git checkout -b &lt;branch name&gt;</code><br> <code>$ git branch –set-upstream-to=&lt;repository&gt;/&lt;branch name&gt;</code><br>or<br> <code>$ git checkout -b &lt;branch name&gt; origin/&lt;remote branch name&gt;</code></li></ol><hr><h2 id="代码管理策略"><a href="#代码管理策略" class="headerlink" title="代码管理策略"></a>代码管理策略</h2><h3 id="git-flow推荐工作流"><a href="#git-flow推荐工作流" class="headerlink" title="git flow推荐工作流"></a>git flow推荐工作流</h3><ul><li><p>主要分支<br>master: 永远处在即将发布(production-ready)状态<br>develop: 最新的开发状态</p></li><li><p>辅助分支<br>feature: 开发新功能的分支, 基于 develop, 完成后 merge 回 develop<br>release: 准备要发布版本的分支, 用来修复 bug. 基于 develop, 完成后 merge 回 develop 和 master<br>hotfix: 修复 master 上的问题, 等不及 release 版本就必须马上上线. 基于 master, 完成后 merge 回 master 和 develop</p></li></ul><h3 id="Android-团队"><a href="#Android-团队" class="headerlink" title="Android 团队"></a>Android 团队</h3><ul><li><p>常设分支<br>master：即将发布出去的版本，可以理解为测试所用版本，QA测试Bug在该分支修改。发布新版本时在该分支打tag发布。<br>dev：开发分支，小伙伴的feature分支都从该分支 chekcout ，feature分支 Demo 前合并到该分支（1.code review  2.检测CI是否正常），Demo通过后合并至master（Demo问题在dev修改，修改后code review通过合并），TAG标记。</p></li><li><p>临时分支<br>feature： 从 dev checkout，开发完成后，code view 合并至dev，进行Demo。<br>Bug分支： 1. QA 提测 bug ， master checkout，修复后合并至master及dev 2. 线上热修复 TAG checkout，修复后合并至master 及 dev ，打TAG。</p></li><li><p>TAG： 发布版本，提测，热修复操作时打TAG进行标记。</p></li></ul><h4 id="移动团队另一种工作流"><a href="#移动团队另一种工作流" class="headerlink" title="移动团队另一种工作流"></a>移动团队另一种工作流</h4><ul><li><p>常设分支<br>master：开发及测试共用，发布在该分支打标签。</p></li><li><p>临时分支<br>feature： 从 master checkout，开发完成后Demo，Demo 通过后 code review 合并至 master。<br>bug分支（热修复）： 从 tag checkout分支，修复以后合并至 master 及当前临时feature分支。打 tag 进行标记。</p></li></ul><p>移动团队<br>Tips： 移动团队问题： dev 常设的必要性？</p><hr><h2 id="一些小Tip"><a href="#一些小Tip" class="headerlink" title="一些小Tip"></a>一些小Tip</h2><h3 id="常用-status-命令"><a href="#常用-status-命令" class="headerlink" title="常用 status 命令"></a>常用 status 命令</h3><p>多使用 git status 查看当前状态。</p><h3 id="高质量的提交"><a href="#高质量的提交" class="headerlink" title="高质量的提交"></a>高质量的提交</h3><ul><li>提交仅对应一个相关的改动</li><li>完整的提交，不完整的请使用”Stash”</li><li>提交前测试</li><li>高质量的注释</li></ul><p>养成一个频繁地进行提交的习惯。这样做将自然而然的让你避免一个很庞大的提交，并且使这些提交可以更好只对映一个相关的改动。</p><h3 id="多使用分支"><a href="#多使用分支" class="headerlink" title="多使用分支"></a>多使用分支</h3><p>分支功能应该广泛地被运用在不同的开发主题中。比如添加新功能，修复错误，尝试新的想法等等。</p><h3 id="遵循一个工作流程"><a href="#遵循一个工作流程" class="headerlink" title="遵循一个工作流程"></a>遵循一个工作流程</h3><p>选择什么样的开发流程要取决如下一些因素：项目开发的类型，部署模式和开发团队成员的个人习惯（可能是最重要的）。不管怎样，选择什么样的流程都需要得到所有开发成员的一致认可，并且一直遵循它。</p><h3 id="合并主分支代码到feature分支"><a href="#合并主分支代码到feature分支" class="headerlink" title="合并主分支代码到feature分支"></a>合并主分支代码到feature分支</h3><p>如果功能开发周期比较长，建议定期合dev分支代码到feature，减少冲突。</p><h3 id="关联本地分支和远程分支"><a href="#关联本地分支和远程分支" class="headerlink" title="关联本地分支和远程分支"></a>关联本地分支和远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 关联后pull 和 push 时可以偷个懒</span><br><span class="line">$ git branch –set-upstream-to=&lt;repository&gt;/&lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="多SSH管理"><a href="#多SSH管理" class="headerlink" title="多SSH管理"></a>多SSH管理</h3><ul><li><p>生成对应平台的 SSH key</p></li><li><p>添加ssh私钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add ~/.ssh/id_rsa_github</span><br><span class="line">$ ssh-add ~/.ssh/id_rsa_gitlab</span><br></pre></td></tr></table></figure></li><li><p>创建修改config文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">    Host gitlab.jinhui365.cn</span><br><span class="line">    HostName gitlab.jinhui365.cn  </span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_gitlab</span><br><span class="line">    User gitlab username</span><br><span class="line"># github</span><br><span class="line">    Host github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br><span class="line">    User github username</span><br></pre></td></tr></table></figure></li><li><p>设置局部用户名和邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name &quot;yourname&quot;  </span><br><span class="line">git config user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure></li></ul><h3 id="临时存储更改"><a href="#临时存储更改" class="headerlink" title="临时存储更改"></a>临时存储更改</h3><p>开发过程中，由于某些原因需要切换分支，中断开发。。。需要把当前的工作区清理出来.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 储存工作现场</span><br><span class="line">$ git stash     </span><br><span class="line">// 查看 stash 列表</span><br><span class="line">$ git stash list</span><br><span class="line">// 恢复工作现场 </span><br><span class="line">$ git stash apply</span><br><span class="line">$ git satsh apply stash@&#123;0&#125; </span><br><span class="line">// 删除工作现场</span><br><span class="line">$ git stash drop</span><br><span class="line">$ git satsh drop stash@&#123;0&#125;</span><br><span class="line">// 恢复，并删除 stash </span><br><span class="line">$ git stash pop </span><br><span class="line">$ git satsh pop stash@&#123;0&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>Tip：临时存储时机：1， 切换分支之前 2，pull 之前 3，合并分支之前</p></blockquote><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-几个重要的概念&quot;&gt;&lt;a href=&quot;#Git-几个重要的概念&quot; class=&quot;headerlink&quot; title=&quot;Git 几个重要的概念&quot;&gt;&lt;/a&gt;Git 几个重要的概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;本地仓库&lt;br&gt;Git 中大部分都是针对本地仓库的操作，完全不用担心污染远程仓库，比如 git add ，git commit ，git reset，checkout 等等。&lt;/li&gt;
&lt;li&gt;远程仓库&lt;br&gt;服务端的代码仓库，用于多人协作开发。。。每个开发人员的本地仓库都是一份完整的远程仓库备份。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Git" scheme="http://jhmobile.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="http://jhmobile.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>ButterKnife 框架使用详解</title>
    <link href="http://jhmobile.github.io/2017/05/04/Android%20ButterKnife%20%E6%A1%86%E6%9E%B6%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>http://jhmobile.github.io/2017/05/04/Android ButterKnife 框架使用详解/</id>
    <published>2017-05-04T07:00:48.000Z</published>
    <updated>2018-10-31T01:40:24.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>findViewById 是每一个 Android 开发者的必经之路，同样也是噩梦。为了提高开发效率，准备在项目中使用 ButterKnife（PS：感谢JakeWharton大神），本文基于8.5.1 版本官方文档翻译，不同的版本在用法上可能会差异，实际使用时，请参考官网文档。<br><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="noopener">Github 地址</a><br><a href="http://jakewharton.github.io/butterknife/" target="_blank" rel="noopener">官方文档</a></p><a id="more"></a><h1 id="ButterKnife-介绍"><a href="#ButterKnife-介绍" class="headerlink" title="ButterKnife 介绍"></a>ButterKnife 介绍</h1><ul><li>Android 开发者的福音，专为 Android View 设计的绑定注解，专治 findViewById。</li><li>配合 AndroidStudio 插件使用，一键生成 view field。。。爽歪歪</li><li>还有其他很多有用的注解。。。</li></ul><h1 id="ButterKnife引入"><a href="#ButterKnife引入" class="headerlink" title="ButterKnife引入"></a>ButterKnife引入</h1><h2 id="Download"><a href="#Download" class="headerlink" title="Download"></a>Download</h2><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  compile <span class="string">'com.jakewharton:butterknife:8.5.1'</span></span><br><span class="line">  annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.5.1'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Library-Module中使用"><a href="#Library-Module中使用" class="headerlink" title="Library Module中使用"></a>Library Module中使用</h2><p>###在 Module 的 build.gradle 添加如下配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">   &#125;</span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">'com.jakewharton:butterknife-gradle-plugin:8.5.1'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'com.android.library'</span></span><br><span class="line">apply plugin: <span class="string">'com.jakewharton.butterknife'</span></span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用 R2 代替 R<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.user) EditText username;</span><br><span class="line">    <span class="meta">@BindView</span>(R2.id.pwd) EditText pwd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="控件绑定"><a href="#控件绑定" class="headerlink" title="控件绑定"></a>控件绑定</h1><p>用 @BindView 注解，并注明view id，ButterKnife 会自动查找控件，并转换成layout文件中指定的类型。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.title)</span><br><span class="line">    TextView title;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.subtitle)</span><br><span class="line">    TextView subtitle;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.footer)</span><br><span class="line">    TextView footer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.simple_activity);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">// TODO Use fields...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="资源绑定"><a href="#资源绑定" class="headerlink" title="资源绑定"></a>资源绑定</h1><p><strong>@BindArray, @BindBitmap, @BindBool, @BindColor, @BindDimen, @BindDrawable, @BindFloat, @BindInt, @BindString</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExampleActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindString</span>(R.string.title) String title;</span><br><span class="line">    <span class="meta">@BindDrawable</span>(R.drawable.graphic) Drawable graphic;</span><br><span class="line">    <span class="meta">@BindColor</span>(R.color.red) <span class="keyword">int</span> red; <span class="comment">// int or ColorStateList field</span></span><br><span class="line">    <span class="meta">@BindDimen</span>(R.dimen.spacer) Float spacer; <span class="comment">// int (for pixel size) or float (for exact value) field</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="非Activity绑定"><a href="#非Activity绑定" class="headerlink" title="非Activity绑定"></a>非Activity绑定</h1><p>ButterKnife 提供了 bind 的几个重载，只要传入根布局，便可以在任何对象中使用注解绑定。</p><p>例如在 Fragment 中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.button1) Button button1;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.button2) Button button2;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">        <span class="comment">// TODO Use fields...</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>还有一种比较常见的场景，是 adapter 中的 ViewHolder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View view, ViewGroup parent)</span></span>&#123;</span><br><span class="line">        ViewHolder holder;</span><br><span class="line">        <span class="keyword">if</span>(view != <span class="keyword">null</span>)&#123;</span><br><span class="line">            holder = (ViewHolder) view.getTag();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            view = inflater.inflate(R.layout.whatever,parent,<span class="keyword">false</span>);</span><br><span class="line">            holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">            view.setTag(holder);</span><br><span class="line">        &#125;</span><br><span class="line">        holder.name.setText(<span class="string">"John Doe"</span>);</span><br><span class="line">        <span class="comment">// etc...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span></span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.title)</span><br><span class="line">    TextView name;</span><br><span class="line">    <span class="meta">@BindViewe</span>(R.id.job_title)</span><br><span class="line">    TextView jobTitle;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">        ButterKnife.bind(<span class="keyword">this</span>,view)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ButterKnife 可以在任何调用 fingViewById 的地方使用。</p><p>提供的其他绑定 API ： </p><ul><li><p>使用Activity作为跟布局在任意对象中进行绑定。如果你使用了类似MVC的编程模式，你可以对controller使用它的Activity用ButterKnife.bind(this, activity)进行绑定。</p></li><li><p>使用ButterKnife.bind(this)绑定一个布局的子布局。如果你在布局中使用了<merge>标签并且在自定义的控件构造时inflate这个布局，你可以在inflate之后立即调用它。或者，你可以在onFinishInflate()回调中使用它。</merge></p></li></ul><h1 id="View-Lists"><a href="#View-Lists" class="headerlink" title="View Lists"></a>View Lists</h1><p>一次性将多个 Views 绑定到一个 List 或数组中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindViews</span>(&#123;R.id.first_name,R.id.middle_name,R.id.last_name&#125;)</span><br><span class="line">List&lt;EditText&gt; nameViews;</span><br></pre></td></tr></table></figure></p><p>我们可以通过 <code>apply</code> 函数在列表中的所有view上执行一个动作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews,DISABLE);</span><br><span class="line">ButterKnife.apply(nameViews,ENABLED,<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure></p><p><code>Action</code> 和 <code>Setter</code> 接口指定一些动作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">static final ButterKnife.Action&lt;View&gt; DISABLE = new ButterKnife.Action&lt;View&gt;()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void apply(View view, int index)&#123;</span><br><span class="line">        view.setEnabled(false);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">static final ButterKnife.Setter&lt;View,Boolean&gt; ENABLED = new ButterKnife.Setter&lt;View,Boolean&gt;()&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public void set(View view,Boolean value,int index)&#123;</span><br><span class="line">        view.setEnabled(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>Android 中的 <code>Property</code> 属性也可以使用 <code>apply</code> 方法进行设置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ButterKnife.apply(nameViews,View.ALPHA,<span class="number">0.0f</span>);</span><br></pre></td></tr></table></figure></p><h1 id="监听器绑定"><a href="#监听器绑定" class="headerlink" title="监听器绑定"></a>监听器绑定</h1><h2 id="事件绑定示例"><a href="#事件绑定示例" class="headerlink" title="事件绑定示例"></a>事件绑定示例</h2><p>监听器可以自动绑定到指定的方法上<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">    <span class="comment">// TODO something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>监听器方法的参数是可选的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// TODO something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>指定一个特定的类型，ButterKnife 会将它自动转换<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnClick</span>(R.id.submit)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(Button button)</span></span>&#123;</span><br><span class="line">    button.setText(<span class="string">"Hello!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在一个方法上指定多个 view id ，多个 view 共用一个处理方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@OnClick(&#123;R.id.door1,R.id.door2,R.id.door3&#125;)</span><br><span class="line">public void pickDoor(DoorView door)&#123;</span><br><span class="line">    if(door.hasPrizeBehind())&#123;</span><br><span class="line">        Toast.makeText(this,&quot;You win!&quot;,LENGTH_SHORT).show();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        Toast.makeText(this,&quot;Try again&quot;,LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>自定义 view 绑定事件监听不需要指定ID<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyButton</span> <span class="keyword">extends</span> <span class="title">Button</span></span>&#123;</span><br><span class="line">    <span class="meta">@OnClick</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// todo something!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="ButterKnife-事件监听注解"><a href="#ButterKnife-事件监听注解" class="headerlink" title="ButterKnife 事件监听注解"></a>ButterKnife 事件监听注解</h2><p><img src="http://static.zybuluo.com/LeoPoldCrossing/1ya8vcbqp161x7w6sud4mssv/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%2010.46.33.png" alt="屏幕快照 2017-05-04 10.46.33.png-26.3kB"></p><p>可以看到，我们常用的事件，ButterKniffe 都提供了注解。</p><h2 id="多个方法的监听绑定"><a href="#多个方法的监听绑定" class="headerlink" title="多个方法的监听绑定"></a>多个方法的监听绑定</h2><p>当一个监听器包含多个回调函数时，使用函数的注解能够对其中任何一个函数进行绑定。每一个注解都会绑定到一个默认的回调。你也可以使用callback参数来指定一个其他函数作为回调。</p><p><img src="http://static.zybuluo.com/LeoPoldCrossing/3kykjy0w58n01rpoz5bc5snz/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%2015.01.15.png" alt="屏幕快照 2017-05-04 15.01.15.png-142kB"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@OnItemSelected</span>(R.id.list_view)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onItemSelected</span><span class="params">(<span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">    <span class="comment">// TODO </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@OnItemSelected</span>(value =  R.id.maybe_missing,callback = NOTHING_SELSECTED)</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onNothingSelected</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解除绑定"><a href="#解除绑定" class="headerlink" title="解除绑定"></a>解除绑定</h1><p>Fragment 的生命周期和Activity是不同的。如果在 <code>onCreateView</code> 中绑定了 Fragment，我们应该在 <code>onDestoryView</code> 方法中解除绑定。ButterKnife 返回了 Unbinder 实例来完成这个操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FancyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span></span>&#123;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.button1) Button button1;</span><br><span class="line">    <span class="meta">@BindView</span>(R.id.button2) Button button2;</span><br><span class="line">    <span class="keyword">private</span> Unbinder unbinder；</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.fancy_fragment, container, <span class="keyword">false</span>);</span><br><span class="line">        unbinder = ButterKnife.bind(<span class="keyword">this</span>, view);</span><br><span class="line">        <span class="comment">// TODO Use fields...</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroyView();</span><br><span class="line">        unbinder.unbind();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="可选绑定"><a href="#可选绑定" class="headerlink" title="可选绑定"></a>可选绑定</h1><p>默认情况下， @Bind 和 监听绑定是必须得，如果目标view没有找到的话，ButterKnife会抛出异常。<br>我们可以通过 @Nullable 标注字段或者 @Optional 标注方法，防止异常的抛出，创建可选的绑定。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Nullable</span> <span class="meta">@BindView</span>(R.id.might_not_be_there) TextView mightNotBeThere;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Optional</span> <span class="meta">@OnClick</span>(R.id.maybe_missing) <span class="function"><span class="keyword">void</span> <span class="title">onMaybeMissingClicked</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">// TODO ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><p>ButterKnife 提供了 findViewById 方法的简化版： findById，可以在Activity，View 和 Dialog 中查找view。 它使用泛型对返回值类型进行自动转换，不需要我们进行强转。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">View view = LayoutInflater.from(context).inflate(R.layout.thing, <span class="keyword">null</span>);</span><br><span class="line">TextView firstName = ButterKnife.findById(view, R.id.first_name);</span><br><span class="line">TextView lastName = ButterKnife.findById(view, R.id.last_name);</span><br><span class="line">ImageView photo = ButterKnife.findById(view, R.id.photo);</span><br></pre></td></tr></table></figure></p><hr><p>author: <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言：&quot;&gt;&lt;a href=&quot;#前言：&quot; class=&quot;headerlink&quot; title=&quot;前言：&quot;&gt;&lt;/a&gt;前言：&lt;/h1&gt;&lt;p&gt;findViewById 是每一个 Android 开发者的必经之路，同样也是噩梦。为了提高开发效率，准备在项目中使用 ButterKnife（PS：感谢JakeWharton大神），本文基于8.5.1 版本官方文档翻译，不同的版本在用法上可能会差异，实际使用时，请参考官网文档。&lt;br&gt;&lt;a href=&quot;https://github.com/JakeWharton/butterknife&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Github 地址&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="ButterKnife" scheme="http://jhmobile.github.io/tags/ButterKnife/"/>
    
  </entry>
  
  <entry>
    <title>Gson 泛型封装</title>
    <link href="http://jhmobile.github.io/2017/04/17/Gson%20%E6%B3%9B%E5%9E%8B%E5%B0%81%E8%A3%85/"/>
    <id>http://jhmobile.github.io/2017/04/17/Gson 泛型封装/</id>
    <published>2017-04-17T09:40:48.000Z</published>
    <updated>2018-10-31T01:40:24.171Z</updated>
    
    <content type="html"><![CDATA[<p>前言： 在《Gson正确使用姿势(一)》的 Gson 泛型使用一节中介绍了如何使用泛型来简化POJO的设计，但是每次都要写 <code>new TypeToken&lt;XXX&gt;(){};</code>, 你能忍么？ 我不能。。。本文主要介绍如何去将泛型的使用封装起来。</p><a id="more"></a><h1 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h1><p>还是使用项目中的json数据格式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>:&#123;</span><br><span class="line">        <span class="attr">"code"</span>:<span class="string">"0"</span></span><br><span class="line">        <span class="string">"message"</span>:<span class="string">"success"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"message"</span>:&#123;</span><br><span class="line">        <span class="attr">"code"</span>:<span class="string">"0"</span></span><br><span class="line">        <span class="string">"message"</span>:<span class="string">"success"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"data"</span>:[]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="方法原型"><a href="#方法原型" class="headerlink" title="方法原型"></a>方法原型</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 处理 data 为 Object 的情况</span><br><span class="line">public static &lt;T&gt; Result&lt;T&gt; fromJsonObject(Reader reader,Class&lt;T&gt; class)&#123;&#125;</span><br><span class="line">// 处理 data 为 array 的情况</span><br><span class="line">public static &lt;T&gt; Result&lt;List&lt;T&gt;&gt; fromJsonArray(Reader reader,Class&lt;T&gt; clazz)&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="封装步骤"><a href="#封装步骤" class="headerlink" title="封装步骤"></a>封装步骤</h1><p>封装最重要的就是获取我们需要Type，使用 java 提供的 ParameterizedType 接口</p><h2 id="实现一个简易的ParameterizedType"><a href="#实现一个简易的ParameterizedType" class="headerlink" title="实现一个简易的ParameterizedType"></a>实现一个简易的ParameterizedType</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParameterizedTypeImpl</span> <span class="keyword">implements</span> <span class="title">ParameterizedType</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class raw;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Type[] args;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ParameterizedTypeImpl</span><span class="params">(Class raw, Type[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.raw = raw;</span><br><span class="line">        <span class="keyword">this</span>.args = args != <span class="keyword">null</span> ? args : <span class="keyword">new</span> Type[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Type[] getActualTypeArguments() &#123;</span><br><span class="line">        <span class="keyword">return</span> args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getRawType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> raw;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Type <span class="title">getOwnerType</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="keyword">null</span>;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成Gson-需要的泛型"><a href="#生成Gson-需要的泛型" class="headerlink" title="生成Gson 需要的泛型"></a>生成Gson 需要的泛型</h2><h3 id="解析data是Object的情况"><a href="#解析data是Object的情况" class="headerlink" title="解析data是Object的情况"></a>解析data是Object的情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Result&lt;T&gt; fromJsonObject(Reader reader,Class&lt;T&gt; clazz)&#123;</span><br><span class="line">    Type type = new ParameterizedTypeImpl(Result.class,new Class[]&#123;clazz&#125;);</span><br><span class="line">    return Gson.fromJson(reader,type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解析data是array的情况"><a href="#解析data是array的情况" class="headerlink" title="解析data是array的情况"></a>解析data是array的情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Result&lt;List&lt;T&gt;&gt; fromJsonArray(Reader reader, Class&lt;T&gt; clazz)&#123;</span><br><span class="line">    // 生成 List&lt;T&gt; 的 type </span><br><span class="line">    Type listType = new ParameterizedTypeImpl(List.class,new Class[]&#123;class&#125;);</span><br><span class="line">    // 生成 Result&lt;List&lt;T&gt;&gt; 的 type</span><br><span class="line">    Type type = new ParameterizedTypeImpl(Result.class,new Type[]&#123;listTYpe&#125;);</span><br><span class="line">    return Gson.fromJson(reader,type);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言： 在《Gson正确使用姿势(一)》的 Gson 泛型使用一节中介绍了如何使用泛型来简化POJO的设计，但是每次都要写 &lt;code&gt;new TypeToken&amp;lt;XXX&amp;gt;(){};&lt;/code&gt;, 你能忍么？ 我不能。。。本文主要介绍如何去将泛型的使用封装起来。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://jhmobile.github.io/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>Gson 正确打开姿势（二）</title>
    <link href="http://jhmobile.github.io/2017/04/17/Gson%20%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://jhmobile.github.io/2017/04/17/Gson 正确使用姿势（二）/</id>
    <published>2017-04-17T03:40:48.000Z</published>
    <updated>2018-10-31T01:40:24.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="GsonBuilder-初探"><a href="#GsonBuilder-初探" class="headerlink" title="GsonBuilder 初探"></a>GsonBuilder 初探</h1><p>Gson 类提供的API满足我们大部分的使用场景，但是有时我们需要更强大的功能，这时候就需要使用 GsonBuilder。<br>GsonBuilder，见名知意，它用于构建Gson的实例，用来改变Gson的默认配置。</p><a id="more"></a><h2 id="GsonBuilder-用法"><a href="#GsonBuilder-用法" class="headerlink" title="GsonBuilder 用法"></a>GsonBuilder 用法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 返回自定义的Gson实例。</span><br><span class="line">Gson gson = new GsonBuilder()</span><br><span class="line">            // 各种配置</span><br><span class="line">            .creat();</span><br></pre></td></tr></table></figure><p>我们来看一个示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"Leo"</span>,<span class="number">28</span>);</span><br><span class="line">System.out.println(gson.toJson(user)); <span class="comment">//&#123;"name":"Leo","age":28&#125;</span></span><br></pre></td></tr></table></figure><p>从结果可以看出email字段，在输出的json串中没有体现。如果我们需要通过日志输出查看User中所有的字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">            .serializeNulls()</span><br><span class="line">            .create();</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"Leo"</span>,<span class="number">28</span>);</span><br><span class="line">System.out.println(gson.toJson(user)); <span class="comment">//&#123;"name":"Leo","age":28,"email":null&#125;</span></span><br></pre></td></tr></table></figure></p><p>再来看一些高级点的功能，格式化输出，日期时间等<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        <span class="comment">//序列化null</span></span><br><span class="line">        .serializeNulls()</span><br><span class="line">        <span class="comment">// 设置日期时间格式，另有2个重载方法</span></span><br><span class="line">        <span class="comment">// 在序列化和反序化时均生效</span></span><br><span class="line">        .setDateFormat(<span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">        <span class="comment">// 禁此序列化内部类</span></span><br><span class="line">        .disableInnerClassSerialization()</span><br><span class="line">        <span class="comment">//生成不可执行的Json, 多了 )]&#125;' 这4个字符）</span></span><br><span class="line">        .generateNonExecutableJson()</span><br><span class="line">        <span class="comment">//禁止转义html标签</span></span><br><span class="line">        .disableHtmlEscaping()</span><br><span class="line">        <span class="comment">//格式化输出</span></span><br><span class="line">        .setPrettyPrinting()</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></p><h1 id="字段过滤"><a href="#字段过滤" class="headerlink" title="字段过滤"></a>字段过滤</h1><p>在项目开发过程中，我们有些字段是不需要进行序列化的，那么在序列化时，我们就要将这些字段过滤，让我们来看一下 Gson 如何解决的这个问题，它提供四种方式：</p><h2 id="基于-Expose-注解"><a href="#基于-Expose-注解" class="headerlink" title="基于 @Expose 注解"></a>基于 @Expose 注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Expose &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If &#123;<span class="doctag">@code</span> true&#125;, the field marked with this annotation is written out in the JSON while</span></span><br><span class="line"><span class="comment">   * serializing. If &#123;<span class="doctag">@code</span> false&#125;, the field marked with this annotation is skipped from the</span></span><br><span class="line"><span class="comment">   * serialized output. Defaults to &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">serialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * If &#123;<span class="doctag">@code</span> true&#125;, the field marked with this annotation is deserialized from the JSON.</span></span><br><span class="line"><span class="comment">   * If &#123;<span class="doctag">@code</span> false&#125;, the field marked with this annotation is skipped during deserialization. </span></span><br><span class="line"><span class="comment">   * Defaults to &#123;<span class="doctag">@code</span> true&#125;.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deserialize</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看源码注释，我们得知： @Expose 有两个属性 serialize 和 deserialize<br>，默认值为 true。<br>|属性|true|false|<br>|–|–|<br>|serialize|序列化|不序列化|<br>|deserialize|反序列化|不反序列化|</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="meta">@Expose</span></span><br><span class="line">    <span class="keyword">public</span> String name;<span class="comment">// 序列化和反序列化都生效</span></span><br><span class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">true</span>;serialize=<span class="keyword">false</span>) </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;<span class="comment">// 序列化不生效，反序列化生效</span></span><br><span class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">false</span>;serialize=<span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">public</span> String email; <span class="comment">// 序列化生效，反序列化不生效</span></span><br><span class="line">    <span class="meta">@Expose</span>(deserialize=<span class="keyword">false</span>;serialize=<span class="keyword">false</span>) ： 可以不写</span><br><span class="line">    <span class="keyword">public</span> String des; <span class="comment">// 序列化和反序列化都不生效 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Expose 注解必须配合 GsonBuilder 使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">            .excludeFieldsWithoutExposeAnnotation()</span><br><span class="line">            .create();</span><br></pre></td></tr></table></figure></p><h2 id="基于版本-setVersion"><a href="#基于版本-setVersion" class="headerlink" title="基于版本 setVersion()"></a>基于版本 setVersion()</h2><p>Gson 另外提供了两个注解 @Since 和 @Util ，配合setVersion(double version) 使用。当然我们还是通过代码来演示：</p><ul><li>创建Gson实例 调用 setVersion(),设置版本为1.0<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = new GsonBuilder()</span><br><span class="line">            .setVersion(1.0)</span><br><span class="line">            .create();</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class User &#123;</span><br><span class="line">    @Since(1.0) private String emailAddress;</span><br><span class="line">    @Since(1.1) private Address address;</span><br><span class="line">    @Util(1.0)  private String password;</span><br><span class="line">    @Util(1.1)  private String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>@Since<br>当前版本<strong>大于或等于</strong>@Since标注版本时，字段可以序列化和反序列化。<br>上面代码 emailAddress 可以序列化和反序列化，address 不可以。</p></li><li><p>@Util<br>当前版本<strong>小于</strong>@Util标注版本时，字段可以序列化和反序列化。<br>上面代码 username 可以序列化和反序列化，password 不可以。</p></li></ul><p>注：当一个字段被 @Since 和 @Util 同时注解时，需两者同时满足条件。</p><h2 id="基于访问修饰符"><a href="#基于访问修饰符" class="headerlink" title="基于访问修饰符"></a>基于访问修饰符</h2><p>常用的修饰符 public、static、final、private、protected等等。<br>我们可以通过 excludeFieldsWithModifiers(int… modifiers)来过滤字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ModifierSample</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String finalField = <span class="string">"final"</span>;</span><br><span class="line">    <span class="keyword">static</span> String staticField = <span class="string">"static"</span>;</span><br><span class="line">    <span class="keyword">public</span> String publicField = <span class="string">"public"</span>;</span><br><span class="line">    <span class="keyword">protected</span> String protectedField = <span class="string">"protected"</span>;</span><br><span class="line">    String defaultField = <span class="string">"default"</span>;</span><br><span class="line">    <span class="keyword">private</span> String privateField = <span class="string">"private"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用GsonBuilder.excludeFieldsWithModifiers构建gson,支持int形的可变参数，值由java.lang.reflect.Modifier提供，下面的程序排除了privateField 、 finalField 和staticField 三个字段。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        .excludeFieldsWithModifiers(Modifier.FINAL, Modifier.STATIC, Modifier.PRIVATE)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></p><h2 id="自定义规则"><a href="#自定义规则" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>自定义规则相对麻烦一些，但是更强大，更灵活。<br>Gson提供了ExclusionStrategy接口，同样需要使用GsonBuilder,相关API 分别是addSerializationExclusionStrategy(序列化)和addDeserializationExclusionStrategy（反序列化）。下面我们以序列化为例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = new GsonBuilder()</span><br><span class="line">        .addSerializationExclusionStrategy(new ExclusionStrategy() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipField(FieldAttributes f) &#123;</span><br><span class="line">                // 这里作判断，决定要不要排除该字段,return true为排除</span><br><span class="line">                if (&quot;finalField&quot;.equals(f.getName())) return true; //按字段名排除</span><br><span class="line">                Expose expose = f.getAnnotation(Expose.class); </span><br><span class="line">                if (expose != null &amp;&amp; expose.deserialize() == false) return true; //按注解排除</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            @Override</span><br><span class="line">            public boolean shouldSkipClass(Class&lt;?&gt; clazz) &#123;</span><br><span class="line">                // 直接排除某个类 ，return true为排除</span><br><span class="line">                return (clazz == int.class || clazz == Integer.class);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></p><h1 id="序列化命名自定义"><a href="#序列化命名自定义" class="headerlink" title="序列化命名自定义"></a>序列化命名自定义</h1><p>涉及到的API ： </p><ol><li>GsonBuilder :  setFieldNamingPolicy() 和 setFieldNamingStrategy()</li><li>FieldNamingStrategy 接口 </li><li>实现了FieldNamingStrategy 的枚举类 FieldNamingPolicy</li></ol><h2 id="Gson-提供的默认实现"><a href="#Gson-提供的默认实现" class="headerlink" title="Gson 提供的默认实现"></a>Gson 提供的默认实现</h2><p>setFieldNamingPolicy() 结合 FieldNamingPolicy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        .setFieldNamingPolicy(FieldNamingPolicy.UPPER_CAMEL_CASE)           .create();</span><br><span class="line">Log.e(<span class="string">"GsonDemo"</span>, gson.toJson(repository));</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>FieldNamingPolicy</th><th>输出结果（emailAddress字段为例）</th></tr></thead><tbody><tr><td>IDENTITY</td><td>{“emailAddress”:”<a href="mailto:leo@example.com" target="_blank" rel="noopener">leo@example.com</a>“}</td></tr><tr><td>LOWER_CASE_WITH_DASHES</td><td>{“email-address”:”<a href="mailto:leo@example.com" target="_blank" rel="noopener">leo@example.com</a>“}</td></tr><tr><td>LOWER_CASE_WITH_UNDERSCORES</td><td>{“email_address”:”<a href="mailto:leo@example.com" target="_blank" rel="noopener">leo@example.com</a>“}</td></tr><tr><td>UPPER_CAMEL_CASE</td><td>{“EmailAddress”:”<a href="mailto:leo@example.com" target="_blank" rel="noopener">leo@example.com</a>“}</td></tr><tr><td>UPPER_CAMEL_CASE_WITH_SPACES</td><td>{“Email Address”:”<a href="mailto:leo@example.com" target="_blank" rel="noopener">leo@example.com</a>“}</td></tr></tbody></table><h2 id="自定义规则-1"><a href="#自定义规则-1" class="headerlink" title="自定义规则"></a>自定义规则</h2><p>setFieldNamingStrategy() 结合 FieldNamingStrategy<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        .setFieldNamingStrategy(<span class="keyword">new</span> FieldNamingStrategy() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">translateName</span><span class="params">(Field f)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//实现自己的规则</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></p><p>注： @SerializedName 注解拥有最高优先级，在 @SerializedName 标注的字段上 FieldNamingStrategy 不生效！</p><h1 id="随心所欲玩转序列化和反序列化"><a href="#随心所欲玩转序列化和反序列化" class="headerlink" title="随心所欲玩转序列化和反序列化"></a>随心所欲玩转序列化和反序列化</h1><h2 id="TypeAdapter"><a href="#TypeAdapter" class="headerlink" title="TypeAdapter"></a>TypeAdapter</h2><p><code>TypeAdapter</code> 是Gson2.1提供的一个抽象类，用于POJO的序列化和反序列化。主要重写两个方法 write(JsonWriter out, T value) 和 read(JsonReader in)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">TypeAdapter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, T value)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"leo"</span>, <span class="number">28</span>,<span class="string">"leo@example.com"</span>);</span><br><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        <span class="comment">//为User注册TypeAdapter</span></span><br><span class="line">        .registerTypeAdapter(User.class, <span class="keyword">new</span> UserTypeAdapter())</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserTypeAdapter</span> <span class="keyword">extends</span> <span class="title">TypeAdapter</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(JsonWriter out, User value)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        out.beginObject();</span><br><span class="line">        out.name(<span class="string">"name"</span>).value(value.name);</span><br><span class="line">        out.name(<span class="string">"age"</span>).value(value.age);</span><br><span class="line">        out.name(<span class="string">"email"</span>).value(value.email);</span><br><span class="line">        out.endObject();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">read</span><span class="params">(JsonReader in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        in.beginObject();</span><br><span class="line">        <span class="keyword">while</span> (in.hasNext()) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (in.nextName()) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"name"</span>:</span><br><span class="line">                    user.name = in.nextString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"age"</span>:</span><br><span class="line">                    user.age = in.nextInt();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"email"</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"email_address"</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"emailAddress"</span>:</span><br><span class="line">                    user.email = in.nextString();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        in.endObject();</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们为 User.class 注册了 TypeAdapter 之后，操作User.class的 那些@SerializedName、FieldNamingStrategy、@Since、@Until、@Expose，q全部废废，只会调用我们实现的UserTypeAdapter.write(JsonWriter, User) 方法，我们想怎么玩就怎么玩。</p><p>当然上面的序列化和反序列化的操作是有缺点的，如果我们想要对多个POJO随心所欲的操作，那么在创建 Gson 实例就要注册很多个 TypeAdapter ，追求代码洁癖的人会疯的。解决这个问题就需要用到 @JsonAdapter 注解。</p><h2 id="JsonAdapter"><a href="#JsonAdapter" class="headerlink" title="@JsonAdapter"></a>@JsonAdapter</h2><p>前面提到 @JsonAdapter 可以解决注册多个 TypeAdapter 的问题~ 它用来标注POJO类，接收一个参数，参数必须是 TypeAdapter，JsonSerializer或 JsonDeserializer 中的一个。</p><p>使用方法(以User为例)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@JsonAdapter(UserTypeAdapter.class)</span><br><span class="line">public class User&#123;</span><br><span class="line">    public String name;</span><br><span class="line">    public int age;</span><br><span class="line">    @SerializedName(value=&quot;emialAddress&quot;)</span><br><span class="line">    public String email;</span><br><span class="line">    </span><br><span class="line">    public User()&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    public User(String name,int age,String email)&#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">        this.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用时不用再 GsonBuilder 去注册 UserTypeAdapter 了。</p><p>注：</p><ul><li>@JsonAdapter 仅支持 TypeAdapter 或 TypeAdapterFactory。</li><li>@JsonAdapter 的优先级比 GsonBuilder.registerTypeAdapter 的优先级高。</li></ul><h1 id="JsonDeserializer-与-JsonSerializer"><a href="#JsonDeserializer-与-JsonSerializer" class="headerlink" title="JsonDeserializer 与 JsonSerializer"></a>JsonDeserializer 与 JsonSerializer</h1><p>那么问题来了，我们只想控制序列化过程或者反序列化过程，比如我们后端经常在我们需要double类型数据时，返回空串””，导致我们数据异常，引起崩溃。肿么办？</p><p>同样见名知意， JsonDeserializer 可以用控制反序列化，JsonSerializer 控制序列化。</p><h2 id="JsonDeserializer-反序列化操作"><a href="#JsonDeserializer-反序列化操作" class="headerlink" title="JsonDeserializer 反序列化操作"></a>JsonDeserializer 反序列化操作</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()</span><br><span class="line">        .registerTypeAdapter(Double.class, <span class="keyword">new</span> JsonDeserializer&lt;Double&gt;()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Double <span class="title">deserialize</span><span class="params">(JsonElement json, Type typeOfT, JsonDeserializationContext context)</span> <span class="keyword">throws</span> JsonParseException</span>&#123;</span><br><span class="line">                <span class="comment">// 处理脏数据，返回一个默认值</span></span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> json.getAsDouble();</span><br><span class="line">                &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1.0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .create();</span><br></pre></td></tr></table></figure><h2 id="JsonSerializer"><a href="#JsonSerializer" class="headerlink" title="JsonSerializer"></a>JsonSerializer</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">JsonSerializer&lt;Number&gt; jsonSerializer = <span class="keyword">new</span> JsonSerializer&lt;Number&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JsonElement <span class="title">serialize</span><span class="params">(Number src, Type typeOfSrc, JsonSerializationContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonPrimitive(String.valueOf(src));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Gson gson = <span class="keyword">new</span> GsonBuilder()&#123;</span><br><span class="line">    .registerTypeAdapter(Integer.class, jsonSerializer)</span><br><span class="line">    .registerTypeAdapter(Double.class, jsonSerializer)</span><br><span class="line">    .registerTypeAdapter(Long.class, jsonSerializer)</span><br><span class="line">    .registerTypeAdapter(Float.class, jsonSerializer)</span><br><span class="line">    .create();</span><br></pre></td></tr></table></figure><p>注： <code>registerTypeAdapter</code> 必须使用包装类型，所以 int.class ,long.class,double.class 是不可以的。 </p><hr><p>author: <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;GsonBuilder-初探&quot;&gt;&lt;a href=&quot;#GsonBuilder-初探&quot; class=&quot;headerlink&quot; title=&quot;GsonBuilder 初探&quot;&gt;&lt;/a&gt;GsonBuilder 初探&lt;/h1&gt;&lt;p&gt;Gson 类提供的API满足我们大部分的使用场景，但是有时我们需要更强大的功能，这时候就需要使用 GsonBuilder。&lt;br&gt;GsonBuilder，见名知意，它用于构建Gson的实例，用来改变Gson的默认配置。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://jhmobile.github.io/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>Gson 正确打开姿势（一）</title>
    <link href="http://jhmobile.github.io/2017/04/16/Gson%20%E6%AD%A3%E7%A1%AE%E6%89%93%E5%BC%80%E5%A7%BF%E5%8A%BF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://jhmobile.github.io/2017/04/16/Gson 正确打开姿势（一）/</id>
    <published>2017-04-16T03:40:48.000Z</published>
    <updated>2018-10-31T01:40:24.171Z</updated>
    
    <content type="html"><![CDATA[<p>JSON (官网) 是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便。其重要性不言而喻。解析和生成的方式很多，Java中最常用的类库有：JSON-Java、Gson、Jackson、FastJson等。<br>项目中使用了Gson，然而现在发现Gson差点被自己玩坏，所以决定好好学习一下~</p><a id="more"></a><h1 id="Gson-基本用法"><a href="#Gson-基本用法" class="headerlink" title="Gson 基本用法"></a>Gson 基本用法</h1><p>Gson 提供了两个方法 <code>fromJson()</code> 和 <code>toJson()</code>方法直接用于解析和生成Json。前者实现反序列化，后者实现序列化。</p><h2 id="基本数据类型解析"><a href="#基本数据类型解析" class="headerlink" title="基本数据类型解析"></a>基本数据类型解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line"><span class="keyword">int</span> i = gson.fromJson(<span class="string">"100"</span>, <span class="keyword">int</span>.class);              <span class="comment">//100</span></span><br><span class="line"><span class="keyword">double</span> d = gson.fromJson(<span class="string">"\"99.99\""</span>, <span class="keyword">double</span>.class);  <span class="comment">//99.99</span></span><br><span class="line"><span class="keyword">boolean</span> b = gson.fromJson(<span class="string">"true"</span>, <span class="keyword">boolean</span>.class);     <span class="comment">// true</span></span><br><span class="line">String str = gson.fromJson(<span class="string">"String"</span>, String.class);   <span class="comment">// String</span></span><br></pre></td></tr></table></figure><h2 id="基本数据类型生成"><a href="#基本数据类型生成" class="headerlink" title="基本数据类型生成"></a>基本数据类型生成</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonNumber = gson.toJson(<span class="number">100</span>);       <span class="comment">// 100</span></span><br><span class="line">String jsonBoolean = gson.toJson(<span class="keyword">false</span>);    <span class="comment">// false</span></span><br><span class="line">String jsonString = gson.toJson(<span class="string">"String"</span>); <span class="comment">//"String"</span></span><br></pre></td></tr></table></figure><h2 id="POJO类的生成与解析"><a href="#POJO类的生成与解析" class="headerlink" title="POJO类的生成与解析"></a>POJO类的生成与解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String emailAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成Json：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">User user = <span class="keyword">new</span> User(<span class="string">"怪盗kidou"</span>,<span class="number">24</span>);</span><br><span class="line">String jsonObject = gson.toJson(user); <span class="comment">// &#123;"name":"怪盗kidou","age":24&#125;</span></span><br></pre></td></tr></table></figure></p><p>解析Json：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonString = <span class="string">"&#123;\"name\":\"怪盗kidou\",\"age\":24&#125;"</span>;</span><br><span class="line">User user = gson.fromJson(jsonString, User.class);</span><br></pre></td></tr></table></figure></p><h1 id="属性重命名"><a href="#属性重命名" class="headerlink" title="属性重命名"></a>属性重命名</h1><p>之前我们认为Gson对于服务器json数据的解析，属性名称需要与json中的key保持一致，一一对应。但是我们经常会遇到一些不和谐的情况。。。</p><h2 id="SerializedName注解使用"><a href="#SerializedName注解使用" class="headerlink" title="@SerializedName注解使用"></a>@SerializedName注解使用</h2><p>我们期望的json数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"leo"</span>,<span class="attr">"age"</span>:<span class="number">28</span>,<span class="attr">"emailAddress"</span>:<span class="string">"leo@example.com"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>服务端返回的json数据<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"leo"</span>,<span class="attr">"age"</span>:<span class="number">28</span>,<span class="attr">"email_address"</span>:leo@example.com&#125;</span><br></pre></td></tr></table></figure></p><p>谷歌的大神，怎么可能不考虑这个问题，我们来看一下如何处理，我们只需要将POJO中属性变成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@SerializedName(&quot;email_address&quot;)</span><br><span class="line">public String emailAddress;</span><br></pre></td></tr></table></figure></p><p>哦了，重命名的问题搞定~如果接口重用，后端的开发人员也更换了，来了一个偷懒的人。。。出现了下面的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;emailAddress&quot;:&quot;leo@example.com&quot;&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;email_address&quot;:leo@example.com&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;leo&quot;,&quot;age&quot;:28,&quot;email&quot;:leo@example.com&#125;</span><br></pre></td></tr></table></figure><p>我们如何处理？</p><h2 id="为POJO字段提供属性备选名"><a href="#为POJO字段提供属性备选名" class="headerlink" title="为POJO字段提供属性备选名"></a>为POJO字段提供属性备选名</h2><p>SerializedName注解提供了两个属性，上面用到了其中一个，另外还有一个属性alternate（2.4版本以上），接收一个String数组。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SerializedName</span>(value = <span class="string">"emailAddress"</span>, alternate = &#123;<span class="string">"email"</span>, <span class="string">"email_address"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> String emailAddress;</span><br></pre></td></tr></table></figure></p><p>当上面的三个属性(email_address、email、emailAddress)出现任意一个时都可以得到正确的结果。</p><h1 id="Gson泛型使用"><a href="#Gson泛型使用" class="headerlink" title="Gson泛型使用"></a>Gson泛型使用</h1><p>Gson 为我们提供了 <code>TypeToken</code> 来实现对泛型的支持。</p><h2 id="基本类型数据解析"><a href="#基本类型数据解析" class="headerlink" title="基本类型数据解析"></a>基本类型数据解析</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">String jsonArray = <span class="string">"[\"Android\",\"Java\",\"PHP\"]"</span>;</span><br><span class="line">List&lt;String&gt; stringList = gson.fromJson(jsonArray,<span class="keyword">new</span> TypeToken&lt;List&lt;String&gt;&gt;()&#123;&#125;.getType());</span><br></pre></td></tr></table></figure><h2 id="POJO的泛型数据解析"><a href="#POJO的泛型数据解析" class="headerlink" title="POJO的泛型数据解析"></a>POJO的泛型数据解析</h2><p>泛型的引入可以减少很多无关的代码，我们现在后台的数据接口数据主要有下面两类:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    message : &#123;"code":0,"message":"操作成功"&#125;,</span><br><span class="line">    "data":&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    message : &#123;"code":0,"message":"操作成功"&#125;,</span><br><span class="line">    "data":&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们真正需要的是 data 所包含的数据，message 中的数据我们只需要统一处理一次。如果我们不定义泛型那么我们就需要这样定义POJO。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageBean message;</span><br><span class="line">    <span class="keyword">private</span> User data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageBean <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageBean</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * code : 0</span></span><br><span class="line"><span class="comment">         * message : 操作成功</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>定义成泛型，就会简洁很多<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MessageBean message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们只需编写data字段所对应的POJO即可，专注于我们的业务逻辑。</p><p>解析数据的写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type userType = <span class="keyword">new</span> TypeToken&lt;Result&lt;User&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">Result&lt;User&gt; userResult = gson.fromJson(json,userType);</span><br><span class="line">User user = userResult.data;</span><br></pre></td></tr></table></figure></p><p>或<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Type userListType = <span class="keyword">new</span> TypeToken&lt;Result&lt;List&lt;User&gt;&gt;&gt;()&#123;&#125;.getType();</span><br><span class="line">Result&lt;List&lt;User&gt;&gt; userListResult = gson.fromJson(json,userListType);</span><br><span class="line">List&lt;User&gt; users = userListResult.data;</span><br></pre></td></tr></table></figure></p><h1 id="Gson-流操作"><a href="#Gson-流操作" class="headerlink" title="Gson 流操作"></a>Gson 流操作</h1><p>Gson 的流操作是通过stream包下的JsonReader类和JsonWriter来实现的。</p><h2 id="Gson-流反序列化"><a href="#Gson-流反序列化" class="headerlink" title="Gson 流反序列化"></a>Gson 流反序列化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">String json = <span class="string">"&#123;\"name\":\"leo\",\"age\":\"28\"&#125;"</span>;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">JsonReader reader = <span class="keyword">new</span> JsonReader(<span class="keyword">new</span> StringReader(json));</span><br><span class="line">reader.beginObject(); <span class="comment">// throws IOException</span></span><br><span class="line"><span class="keyword">while</span> (reader.hasNext()) &#123;</span><br><span class="line">    String s = reader.nextName();</span><br><span class="line">    <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"name"</span>:</span><br><span class="line">            user.name = reader.nextString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"age"</span>:</span><br><span class="line">            user.age = reader.nextInt(); </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"email"</span>:</span><br><span class="line">            user.email = reader.nextString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">reader.endObject(); <span class="comment">// throws IOException</span></span><br></pre></td></tr></table></figure><p>fromJson()方法实际上就是通过JsonReader来进行数据解析的，不信？ 去看源码喽~<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">fromJson</span><span class="params">(String json, Type typeOfT)</span> <span class="keyword">throws</span> JsonSyntaxException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (json == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    StringReader reader = <span class="keyword">new</span> StringReader(json);</span><br><span class="line">    T target = (T) fromJson(reader, typeOfT);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><h2 id="Gson-流序列化"><a href="#Gson-流序列化" class="headerlink" title="Gson 流序列化"></a>Gson 流序列化</h2><p>序列化和反序列化始终是成对出现的，咱们这也不能让它落单不是。。。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JsonWriter writer = <span class="keyword">new</span> JsonWriter(<span class="keyword">new</span> OutputStreamWriter(System.out));</span><br><span class="line">writer.beginObject() <span class="comment">// throws IOException</span></span><br><span class="line">        .name(<span class="string">"name"</span>).value(<span class="string">"leo"</span>)</span><br><span class="line">        .name(<span class="string">"age"</span>).value(<span class="number">28</span>)</span><br><span class="line">        .name(<span class="string">"email"</span>).nullValue() <span class="comment">//演示null</span></span><br><span class="line">        .endObject(); <span class="comment">// throws IOException</span></span><br><span class="line">writer.flush(); <span class="comment">// throws IOException</span></span><br></pre></td></tr></table></figure></p><p>类似的，toJson() 方法自然是通过JsonWriter实现序列化<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toJson</span><span class="params">(Object src, Type typeOfSrc)</span> </span>&#123;</span><br><span class="line">    StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    toJson(src, typeOfSrc, writer);</span><br><span class="line">    <span class="keyword">return</span> writer.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JSON (官网) 是一种文本形式的数据交换格式，它比XML更轻量、比二进制容易阅读和编写，调式也更加方便。其重要性不言而喻。解析和生成的方式很多，Java中最常用的类库有：JSON-Java、Gson、Jackson、FastJson等。&lt;br&gt;项目中使用了Gson，然而现在发现Gson差点被自己玩坏，所以决定好好学习一下~&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="Gson" scheme="http://jhmobile.github.io/tags/Gson/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 实践</title>
    <link href="http://jhmobile.github.io/2017/04/05/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6%20--%20Dagger2%20%E5%AE%9E%E8%B7%B5/"/>
    <id>http://jhmobile.github.io/2017/04/05/依赖注入框架 -- Dagger2 实践/</id>
    <published>2017-04-05T03:40:48.000Z</published>
    <updated>2018-10-31T01:40:24.173Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在基础和进阶两篇文章中，讨论很多的理论知识，不知道你们怎么样，反正我是有点懵逼了，程序猿么，终归是要垒代码。来吧，我们用代码说话，看一看Dagger2到底是怎么个用法。</p></blockquote><p><a href="https://github.com/LeoPoldCrossing/ArchiSamples" target="_blank" rel="noopener">本文代码地址 Dagger2 示例 app-mvp-dagger2</a><br>示例中采用了MVP架构，使用Retrofit进行网络通信，并融入了 Rxjava RxBus 等。Dagger2 使用示例 在 app-mvp-dagger2 分支，请自行chekcout。</p><a id="more"></a><h1 id="依赖标注"><a href="#依赖标注" class="headerlink" title="依赖标注"></a>依赖标注</h1><h2 id="Inject-标注"><a href="#Inject-标注" class="headerlink" title="@Inject 标注"></a>@Inject 标注</h2><ul><li>@Inject 注解 BaseActivity 和 BaseFragment 的 Presenter 实例。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span> </span><br><span class="line">    <span class="keyword">protected</span> T mPresenter</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportFragment</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    <span class="keyword">public</span> T mPresenter;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Inject标注依赖构造函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MainPresenter</span><span class="params">(RetrofitHelper retrofitHelper)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.retrofitHelper = retrofitHelper;</span><br><span class="line">    registerEvent();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Inject</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RepositoryPresenter</span><span class="params">(RetrofitHelper retrofitHelper)</span></span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.retrofitHelper = retrofitHelper;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Moudle-工厂类"><a href="#Moudle-工厂类" class="headerlink" title="@Moudle 工厂类"></a>@Moudle 工厂类</h2><ul><li><p>AppModule 提供全局依赖实例 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ArchiApplication application;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppModule</span><span class="params">(ArchiApplication application)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.application = application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">ArchiApplication <span class="title">provideApplicationContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="function">RetrofitHelper <span class="title">provideRetrofitHelper</span><span class="params">(RepositoriesService repositoriesService, UserInfoService userInfoService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RetrofitHelper(repositoriesService, userInfoService);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ActivityModule 为 Activity 提供 this 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>FragmentModule 为 Fragment 提供 Activity 实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Fragment fragment;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FragmentModule</span><span class="params">(Fragment fragment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fragment = fragment;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@FragmentScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fragment.getActivity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Component组织"><a href="#Component组织" class="headerlink" title="Component组织"></a>Component组织</h1><p>Component 是依赖和被依赖的的桥梁，注入依赖。</p><h2 id="AppComponent"><a href="#AppComponent" class="headerlink" title="AppComponent"></a>AppComponent</h2><ul><li>定义 AppComponent 接口 ，@Singleton 标注，增加可读性</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Singleton</span><br><span class="line">// modules 定义提供依赖实例的 Module </span><br><span class="line">@Component(modules = &#123;AppModule.class, HttpModule.class&#125;)</span><br><span class="line">public interface AppComponent &#123;</span><br><span class="line">    ArchiApplication getContext();  // 提供App的Context</span><br><span class="line"></span><br><span class="line">    RetrofitHelper getRetrofitHelper();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>创建 AppComponent 单例<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArchiApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AppComponent appComponent;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            appComponent = DaggerAppComponent.builder()</span><br><span class="line">                    .appModule(<span class="keyword">new</span> AppModule(mInstance))</span><br><span class="line">                    .httpModule(<span class="keyword">new</span> HttpModule())</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> appComponent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="ActivityComponent"><a href="#ActivityComponent" class="headerlink" title="ActivityComponent"></a>ActivityComponent</h2><ul><li><p>自定义 ActivityScope 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ActivityScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 ActivityComponent 使用 @ActivityScope 标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = ActivityModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@ActivityScope 标注 Module 中的依赖实例提供方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mActivity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Build ActivityComponent实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportActivity</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ActivityComponent <span class="title">getActivityComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerActivityComponent.builder()</span><br><span class="line">                <span class="comment">// 添加依赖 component</span></span><br><span class="line">                .appComponent(ArchiApplication.getAppComponent())</span><br><span class="line">                .activityModule(<span class="keyword">new</span> ActivityModule(<span class="keyword">this</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注入实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span>&lt;<span class="title">RepositoryPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">RepositoryContract</span>.<span class="title">View</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getActivityComponent().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="FragmentComponent"><a href="#FragmentComponent" class="headerlink" title="FragmentComponent"></a>FragmentComponent</h2><ul><li><p>自定义 FragmentComponent 注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scope</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FragmentScope &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义 FragmentComponent 使用 @FragmentScope 标注</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FragmentScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = FragmentModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">FragmentComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(MainFragment mainFragment)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>@FragmentScope 标注 Module 中的依赖实例提供方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="meta">@FragmentScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fragment.getActivity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Build FragmentComponent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&gt; <span class="keyword">extends</span> <span class="title">SupportFragment</span> <span class="keyword">implements</span> <span class="title">BaseView</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> FragmentComponent <span class="title">getFragmentComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DaggerFragmentComponent.builder()</span><br><span class="line">                <span class="comment">// 添加依赖 component </span></span><br><span class="line">                .appComponent(ArchiApplication.getAppComponent())</span><br><span class="line">                .fragmentModule(<span class="keyword">new</span> FragmentModule(<span class="keyword">this</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注入实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span>&lt;<span class="title">MainPresenter</span>&gt; <span class="keyword">implements</span> <span class="title">MainContract</span>.<span class="title">View</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initInject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getFragmentComponent().inject(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="RetrofitHelper-注入流程"><a href="#RetrofitHelper-注入流程" class="headerlink" title="RetrofitHelper 注入流程"></a>RetrofitHelper 注入流程</h1><p>MainPresenter 和 RepositoryPresenter 的构造函数中，有一个参数为 RetrofitHelper，根据Dagger2的注入流程，我们可以知道，RetrofitHelper会优先创建注入。<br>在 AppComponent 中管理的 Modules 中有一个 HttpModule，该 Module 主要作用是提供网络访问实例。<br>我们来看一下 RetrofitHelper 的注入流程。</p><ul><li>Presenter 的构造函数参数为 RetrofitHelper，所以 RetrofitHelper 会优先创建。</li><li><p>RetrofitHelper 构造函数参数为网络访问实例 RepositoriesService,  UserInfoService。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RetrofitHelper</span><span class="params">(RepositoriesService repositoriesService, UserInfoService userInfoService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.repositoriesService = repositoriesService;</span><br><span class="line">        <span class="keyword">this</span>.userInfoService = userInfoService;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>RepositoriesService 和 UserInfoService 实例由 HttpModule 提供 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpModule</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供builder</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    Retrofit.<span class="function">Builder <span class="title">provideRetrofitBuilder</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Retrofit.Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    OkHttpClient.<span class="function">Builder <span class="title">provideOkHttpClientBuilder</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供客户端</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@RespositoriesUrl</span></span><br><span class="line">    <span class="function">Retrofit <span class="title">provideRepositoriesRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@UserInfoUrl</span></span><br><span class="line">    <span class="function">Retrofit <span class="title">provideUserInfoRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">OkHttpClient <span class="title">provideClient</span><span class="params">(OkHttpClient.Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder.connectTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                .readTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                .writeTimeout(<span class="number">60000L</span>, TimeUnit.MILLISECONDS)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供API</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">RepositoriesService <span class="title">provideRepositoriesService</span><span class="params">(@RespositoriesUrl Retrofit retrofit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(RepositoriesService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Singleton</span></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="function">UserInfoService <span class="title">provideUserInfoService</span><span class="params">(@UserInfoUrl Retrofit retrofit)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> retrofit.create(UserInfoService.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Retrofit <span class="title">createRetrofit</span><span class="params">(Retrofit.Builder builder, OkHttpClient client, String host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> builder</span><br><span class="line">                .baseUrl(host)</span><br><span class="line">                .client(client)</span><br><span class="line">                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>RetrofitHelper 完成创建后由 AppComponent 注入，为全局单一实例。</p><h1 id="Qualifier-使用"><a href="#Qualifier-使用" class="headerlink" title="@Qualifier 使用"></a>@Qualifier 使用</h1><p>@Qualifier 的作用是使 Dagger2 避免依赖混乱。</p><ul><li><p>定义 Qualifier 以 RespositoriesUrl 为例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RespositoriesUrl &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 @RespositoriesUrl 标注依赖实例提供方法，该方法和其他方法的返回相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="meta">@RespositoriesUrl</span></span><br><span class="line"><span class="function">Retrofit <span class="title">provideRepositoriesRetrofit</span><span class="params">(Retrofit.Builder builder,OkHttpClient client)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createRetrofit(builder, client, RepositoriesService.HOST);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 @RespositoriesUrl 标注 provideRepositoriesRetrofit 的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="function">RepositoriesService <span class="title">provideRepositoriesService</span><span class="params">(@RespositoriesUrl Retrofit retrofit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> retrofit.create(RepositoriesService.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在基础和进阶两篇文章中，讨论很多的理论知识，不知道你们怎么样，反正我是有点懵逼了，程序猿么，终归是要垒代码。来吧，我们用代码说话，看一看Dagger2到底是怎么个用法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/LeoPoldCrossing/ArchiSamples&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;本文代码地址 Dagger2 示例 app-mvp-dagger2&lt;/a&gt;&lt;br&gt;示例中采用了MVP架构，使用Retrofit进行网络通信，并融入了 Rxjava RxBus 等。Dagger2 使用示例 在 app-mvp-dagger2 分支，请自行chekcout。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="依赖注入" scheme="http://jhmobile.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://jhmobile.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 进阶</title>
    <link href="http://jhmobile.github.io/2017/04/05/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6%20--%20Dagger2%20%E8%BF%9B%E9%98%B6/"/>
    <id>http://jhmobile.github.io/2017/04/05/依赖注入框架 -- Dagger2 进阶/</id>
    <published>2017-04-05T03:25:48.000Z</published>
    <updated>2018-10-31T01:40:24.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Dagger2 基础分析了 @Inject，@Component，@Module，@Provides 是如何构成 dagger2 整个依赖注入框架的。</p><p>主线已经完成，dagger2 中剩下的 @Qualifier（限定符）， @Singleton（单例），@Scope（作用域）是对整个依赖注入框架细节上完善，提供更完善的功能。</p><a id="more"></a><h1 id="Qualifier"><a href="#Qualifier" class="headerlink" title="@Qualifier"></a>@Qualifier</h1><p>Dagger2 基础中分析到 @Component 是一个注入器，起着桥梁的作用。被依赖类的实例有两种创建方式：</p><ul><li>@Inject 标注构造函数创建</li><li>@Module 中工厂模式创建</li></ul><p>这两种方式是有优先级之分的，Component会首先从Module中查找实例，找不到才会去查找Inject方式创建的实例。<br>问题随之而来，在同一种实例创建方式中，可能有多个方法创建类示例，注入器应该选择哪个？ @Qualifier 的作用就是用来决定 Component 做选择的。</p><p>我们使用 @Qualifier 来定义自己的注解，然后通过自定义注解去标注依赖的方法和依赖需求方，这样 Dagger2 就知道为谁提供依赖了。</p><h1 id="Component-组织方式"><a href="#Component-组织方式" class="headerlink" title="Component 组织方式"></a>Component 组织方式</h1><p>@Scope， @Singleton 有些坑，结合Component讲解，个人认为会更要效果。</p><h2 id="如何划分Component"><a href="#如何划分Component" class="headerlink" title="如何划分Component"></a>如何划分Component</h2><p>如果一个 app 只有一个Component，脑补一下吧，简直是世界末日。这个Component会很难维护，变化率极高，很庞大，职责不明确。所以我们要将Component进行划分</p><ul><li>要有一个全局的Component，定义为 ApplicationComponent，负责管理整个 app 的全局类示例（整个app都要用到的类的实例，比如applicationContext，这些类都是单例的）</li><li>每一个页面对应一个Component，比如一个Activity或者Fragment页面定义一个Component，当然这个不是必须的，某些页面依赖的类是一样的，可以共用一个Component。</li></ul><h2 id="Singleton仅起标注作用"><a href="#Singleton仅起标注作用" class="headerlink" title="@Singleton仅起标注作用"></a>@Singleton仅起标注作用</h2><p>前面提到 ApplicationComponent 负责管理整个app用到的全局类示例，如何才能创建单例？ </p><ul><li>Module 中定义创建全局类实例 </li><li>ApplicationComponent 管理Module </li><li>保证ApplicationComponent只有一个实例（在app的Application中实例化）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AppComponent <span class="title">getAppComponent</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        appComponent = DaggerAppComponent.builder()</span><br><span class="line">                .appModule(<span class="keyword">new</span> AppModule(instance))</span><br><span class="line">                .httpModule(<span class="keyword">new</span> HttpModule())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> appComponent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>Dagger2 中真正创建单例的方法是上面的不走，全局类实例的生命周期就和Application一致了。疑问又来了，@Singleton 岂不是多余的？ 答案当然是NO！！！ @Singleton有以下作用：</p><ul><li>更好的管理 ApplicationComponent 和 Module 之间的关系，保证 ApplicationComponent 和 Module是匹配的。若两者的作用域不一样，则在编译时报错。</li><li>提高代码可读性，让猿们清晰的看到 Module中创建的类实例是单例。</li></ul><h2 id="组织Component"><a href="#组织Component" class="headerlink" title="组织Component"></a>组织Component</h2><p>我们划分好Component之后，全局类实例也已经创建了单例模式，如果其他的Component想要把全局的类实例注入到目标类中，怎么办？ 我们需要组织Component之间的关系。 具体的组织方式有以下2种：</p><ul><li>依赖方式<br>一个Component是依赖于一个或多个Component，使用<code>dependencies</code>属性来添加依赖的Component</li><li>包含方式<br>一个 Component 包含一个或多个Component，被包含的Component还可以继续包含其他的Component。 使用 @Subcomponent 注解组织Component </li></ul><h2 id="Scope的真正用处"><a href="#Scope的真正用处" class="headerlink" title="@Scope的真正用处"></a>@Scope的真正用处</h2><p>@Scope的真正用处是用于组织Component</p><ul><li>为了更好的管理Component，不管是依赖还是包含，都有必要用自定义的Scope标注，使用不同的自定义Scope来提现Component之间的组织方式。编译器会检查有依赖关系或包含关系的Component，如果没有自定义Scope标注，会报错。</li><li>更好的管理Component与Module之间的匹配关系，编译器会检查Component管理的Modules，若发现标注Component的自定义Scope注解与Modules中的标注创建类示例方法的注解不一样，报错。</li><li>可读性提高，比如用Singleton标注全局类，这样我们可以立刻明白这类是全局单例类。</li></ul><h1 id="Dagger原理分析"><a href="#Dagger原理分析" class="headerlink" title="Dagger原理分析"></a>Dagger原理分析</h1><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><p><strong>我们的代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Activity mActivity;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.mActivity = activity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Provides</span></span><br><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mActivity;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>生成的工厂类代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Generated</span>(<span class="string">"dagger.internal.codegen.ComponentProcessor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule_ProvideActivityFactory</span> <span class="keyword">implements</span> <span class="title">Factory</span>&lt;<span class="title">Activity</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ActivityModule <span class="keyword">module</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityModule_ProvideActivityFactory</span><span class="params">(ActivityModule <span class="keyword">module</span>)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">assert</span> <span class="keyword">module</span> != <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">this</span>.<span class="keyword">module</span> = <span class="keyword">module</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">get</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">Activity provided = <span class="keyword">module</span>.provideActivity();</span><br><span class="line"><span class="keyword">if</span> (provided == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot return null from a non-@Nullable @Provides method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> provided;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory&lt;Activity&gt; <span class="title">create</span><span class="params">(ActivityModule <span class="keyword">module</span>)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ActivityModule_ProvideActivityFactory(<span class="keyword">module</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>ActivityModule_ProvideActivityFactory 中的 get() 方法调用了 ActivityModule 中的 provideActivity() 方法来获取我们需要的依赖 provideActivity 对象。 </li><li>ActivityModule_ProvideActivityFactory 的对象是由 create() 方法创建，并且传入 ActivityModule 对象。</li></ul><p>那么一定有地方调用了 create() 方法创建 Factory 对象，并通过 get 方法获取实例。</p><p>之前多次说到 Component 是依赖提供方和依赖需求方之间的桥梁，下面我们分析一下，Dagger2 是如何通过 Component 将两者联系起来的。</p><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><p><strong>我们的代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ActivityScope</span></span><br><span class="line"><span class="meta">@Component</span>(dependencies = AppComponent.class,modules = ActivityModule.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="function">Activity <span class="title">getActivity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>生成代码</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Generated</span>(<span class="string">"dagger.internal.codegen.ComponentProcessor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DaggerActivityComponent</span> <span class="keyword">implements</span> <span class="title">ActivityComponent</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Provider&lt;Activity&gt; provideActivityProvider;</span><br><span class="line"><span class="keyword">private</span> Provider&lt;RetrofitHelper&gt; getRetrofitHelperProvider;</span><br><span class="line"><span class="keyword">private</span> Provider&lt;RepositoryPresenter&gt; repositoryPresenterProvider;</span><br><span class="line"><span class="keyword">private</span> MembersInjector&lt;BaseActivity&lt;RepositoryPresenter&gt;&gt; baseActivityMembersInjector;</span><br><span class="line"><span class="keyword">private</span> MembersInjector&lt;RepositoryActivity&gt; repositoryActivityMembersInjector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">DaggerActivityComponent</span><span class="params">(Builder builder)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">assert</span> builder != <span class="keyword">null</span>;</span><br><span class="line">initialize(builder);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">builder</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(<span class="keyword">final</span> Builder builder)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">this</span>.provideActivityProvider = ScopedProvider.create(ActivityModule_ProvideActivityFactory.create(builder.activityModule));</span><br><span class="line"><span class="keyword">this</span>.getRetrofitHelperProvider = <span class="keyword">new</span> Factory&lt;RetrofitHelper&gt;() &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AppComponent appComponent = builder.appComponent;</span><br><span class="line"><span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> RetrofitHelper <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RetrofitHelper provided = appComponent.getRetrofitHelper();</span><br><span class="line"><span class="keyword">if</span> (provided == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Cannot return null from a non-@Nullable component method"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> provided;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">this</span>.repositoryPresenterProvider = RepositoryPresenter_Factory.create((MembersInjector) MembersInjectors.noOp(), getRetrofitHelperProvider);</span><br><span class="line"><span class="keyword">this</span>.baseActivityMembersInjector = BaseActivity_MembersInjector.create((MembersInjector) MembersInjectors.noOp(), repositoryPresenterProvider);</span><br><span class="line"><span class="keyword">this</span>.repositoryActivityMembersInjector = MembersInjectors.delegatingTo(baseActivityMembersInjector);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Activity <span class="title">getActivity</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">return</span> provideActivityProvider.get();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(RepositoryActivity repositoryActivity)</span> </span>&#123;  </span><br><span class="line">repositoryActivityMembersInjector.injectMembers(repositoryActivity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> ActivityModule activityModule;</span><br><span class="line"><span class="keyword">private</span> AppComponent appComponent;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ActivityComponent <span class="title">build</span><span class="params">()</span> </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (activityModule == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"activityModule must be set"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"appComponent must be set"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DaggerActivityComponent(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">activityModule</span><span class="params">(ActivityModule activityModule)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (activityModule == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"activityModule"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.activityModule = activityModule;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Builder <span class="title">appComponent</span><span class="params">(AppComponent appComponent)</span> </span>&#123;  </span><br><span class="line"><span class="keyword">if</span> (appComponent == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"appComponent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.appComponent = appComponent;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>Dagger2 生成了 ActivityComponent 的实现类 DaggerActivityComponent</li><li>DaggerActivityComponent 对象是在调用 build() 方法时进行初始化（initialize方法）</li></ul><ul><li>初始化Provider</li><li>初始化MembersInjector</li></ul><ul><li>inject 方法中，调用injectMembers() 进行注入。</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>关于 Dagger2 的的一些概念，就介绍到这里了。啰里啰嗦的说了好多，我们来总结一下 Dagger2 到底有些什么好处呢，应该如何使用。</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ul><li><p>提高开发效率，不做油漆工<br>Dagger2 把 new 对象和注入的工作给做了，我们只需要将精力集中在关建业务上。<br>省去了单例的写法，也不用再操心单例线程安全的问题。</p></li><li><p>更方便的管理类实例<br>每个app中的ApplicationComponent管理整个app的全局类实例，他们的生命周期和app的生命周期一样。<br>每个页面的Component管理自己页面所以来的类实例。<br>Component,Module让整个类实例结构变得很清晰。</p></li><li><p>解耦<br>正常情况下，new 关键字到处都有，一旦类的构造函数发生变化，哭死的心都有。。。设计模式中提倡<strong>把容易变化的部分封装起来</strong>。<br>Dagger2 通过 @Inject 注解 和 @Module 来创建实例<br>@Inject构造函数变化时，我们不用做任何修改<br>@Module 管理的实例，我们也只需要修改Module，比如HttpModule。</p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>依赖注入的流程</li></ul><blockquote></blockquote><ol><li>查找Module中是否存在创建该类实例的方法 </li><li>存在创建类实例的方法，查看该方法是否需要参数<br>2.1 需要，则从步骤1开始，初始化每个参数<br>2.2 不需要，直接初始化类实例，一次依赖注入完成</li><li>若不存在创建类方法，则查找Inject注解的构造函数，查看是否需要参数<br>3.1 需要，从步骤1开始一次初始化每个参数<br>3.2 不需要，初始化该实例，一次依赖注入完成</li></ol><ul><li>使用注意事项</li></ul><ul><li>一个app必须有一个Component来管理整个app的全局类实例</li><li>多个页面可以共享一个Component</li><li>最好使用自定义Scope，增强代码阅读性，及早的暴露问题（编译时检查）。</li></ul><hr><p>author:<a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Dagger2 基础分析了 @Inject，@Component，@Module，@Provides 是如何构成 dagger2 整个依赖注入框架的。&lt;/p&gt;
&lt;p&gt;主线已经完成，dagger2 中剩下的 @Qualifier（限定符）， @Singleton（单例），@Scope（作用域）是对整个依赖注入框架细节上完善，提供更完善的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="依赖注入" scheme="http://jhmobile.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://jhmobile.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入框架 -- Dagger2 基础</title>
    <link href="http://jhmobile.github.io/2017/03/30/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%E6%A1%86%E6%9E%B6%20--%20Dagger2%20%E5%9F%BA%E7%A1%80/"/>
    <id>http://jhmobile.github.io/2017/03/30/依赖注入框架 -- Dagger2 基础/</id>
    <published>2017-03-30T03:25:48.000Z</published>
    <updated>2018-10-31T01:40:24.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：</p><ul><li>dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用</li><li>dagger2 到底有什么魔力，让大家都推崇备至</li><li>如何在项目中更好的使用dagger2 ?</li></ul><p>在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。</p><a id="more"></a><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Inject，Component，Module，Provides他们是什么？ 怎么去理解？各自有什么作用？主要讲解抽象的概念，代码的剖析，后期实践中再说~ 下面请看黑板</p><h1 id="小科普"><a href="#小科普" class="headerlink" title="小科普"></a>小科普</h1><ul><li><p><a href="http://codethink.me/2015/08/01/dependency-injection-theory/" target="_blank" rel="noopener">依赖注入（Dependency Injection 简称DI)</a></p></li><li><p><a href="http://baike.baidu.com/item/Java%20%E6%B3%A8%E8%A7%A3?fr=aladdin" target="_blank" rel="noopener">注解（Annotation）</a></p></li></ul><p>Dagger2 就是通过注解实现依赖注入的一种技术手段。</p><h1 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h1><p>Dagger2 注入框架最重要的就是注解的使用，那么我们先来逐个分析这些东东。</p><h2 id="Inject注解"><a href="#Inject注解" class="headerlink" title="@Inject注解"></a>@Inject注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    B b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Inject</span></span><br><span class="line">    B()&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Inject 注解用来标注目标类依赖的实例以以及被依赖类的构造函数。这样，目标类中依赖的实例与被依赖类的构造函数之间有了一种的联系，茫茫大海中，如何找到相互关联的两个 @Inject注解？</p><h2 id="Component-注解"><a href="#Component-注解" class="headerlink" title="@Component 注解"></a>@Component 注解</h2><p>@Component 是连接目标类依赖的实例和被依赖类构造方法的桥梁，@Component标注的类是接口或者抽象类。既然说它是桥梁，我们来分析一下，它是如何工作的。</p><ul><li>Component类持有目标类的实例。</li><li>Component查找目标类中用@Inject注解标注的属性，然后查找该属性对应的用@Inject标注的构造函数。</li><li>初始化该属性的实例，并进行赋值。</li></ul><p>Component 就像是一个注入器，将目标类依赖的实例注入到目标类中。</p><blockquote><p>Tip：Dagger依赖注入的流程</p><ol><li>@Inject 标注目标类中的依赖类</li><li>@Inject 标注被依赖类的构造函数</li><li>若依赖类还有依赖类，重复 step1 step2</li><li>调用 Component 的 injectXXX(Object) 方法开始依赖注入。（injectXXX 方法名称是官方推荐。）</li></ol></blockquote><h2 id="Module-注解"><a href="#Module-注解" class="headerlink" title="@Module 注解"></a>@Module 注解</h2><p>新坑来啦！！！项目中会使用很多的第三方类库，对于这些类库的依赖，我们没有办法去修改，不能将@Inject加入到这些类中。这可如何是好。。。</p><p>@Module 应运而生，我们可以将第三方类库封装入Module中，来对第三方库进行封装，当然@Module的功能不止封装第三方库，它的应用场景主要有以下三个：</p><ul><li>接口（Interface）是没有构造方法的</li><li>第三方库提供的类，构造方法不能被注解</li><li>有些类需要灵活选择初始化配置，而不是使用单一的构造方法</li></ul><p>Module 其实是一个简单工厂模式，Module里面的方法基本都是创建类示例的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Module</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityModule</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Activity mActivity;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ActivityModule</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mActivity = activity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Provides</span></span><br><span class="line">    <span class="meta">@ActivityScope</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">provideActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mActivity;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Module 和 Component 又是如何关联起来呢？ </p><h2 id="Component的新任务"><a href="#Component的新任务" class="headerlink" title="Component的新任务"></a>Component的新任务</h2><p>Component 是注入器，它一段连接目标类，另一端链接被依赖类。之前说到Module类是一个提供类实例的类，所以Component的新职责就是将Module提供的被依赖类示例注入到目标类中。（Component中的modules属性可以把Module加入Component，modules可以加入多个Module）。</p><p>引入新问题，Modules 中创建的各种类实例如何注入到目标类中，如何与目标类中@Inject标注的依赖产生关联。</p><h2 id="Provides注解"><a href="#Provides注解" class="headerlink" title="@Provides注解"></a>@Provides注解</h2><p>Module 中创建类实例方法用Provides进行标注，Component 在搜索到目标类中用 @Inject 标注的属性后，Component就会去 Module 中去查找用 Provides 标注的对应的创建类实例方法，实现依赖注入。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>Inject，Component，Module，Provides 是dagger2中最基础最核心的知识点。</p><ul><li>@Inject 用来标注目标类的依赖和被依赖类的构造函数</li><li>@Component 是一个桥梁，一端是目标类，一端是目标类所依赖的实例。负责依赖注入，同时管理 Module。</li><li>Module 和 Provides  Module是一个简单工厂模式，主要包含创建类示例的方法，这些方法用Provides来标注。</li></ul><hr><p>author: <a href="http://codethink.me/2015/08/01/dependency-injection-theory/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;dagger2 是解决Android或着Java中依赖注入的一个类库（DI类库）。最近看了一些开源的项目都在使用dagger2，而且有很多对其是甚是推崇，我也蠢蠢欲动。。。在学习dagger2的过程中，我遇到了一下的困惑：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dagger2 中的Inject，Component，Module，Provides等等都是什么鬼？有什么作用&lt;/li&gt;
&lt;li&gt;dagger2 到底有什么魔力，让大家都推崇备至&lt;/li&gt;
&lt;li&gt;如何在项目中更好的使用dagger2 ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在具体的学习过程中，看了好多的博客，有时候感觉挺简单，就那么回事吧，但是真正使用的时候，一脸懵逼了。Component应该怎么用？Module应该放些神马？Scope怎么起到作用域控制？。。。一瞬间怀疑人生。本文将自己对dagger2的理解与大家分享一下，希望能对大家有所帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="依赖注入" scheme="http://jhmobile.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
      <category term="Dagger2" scheme="http://jhmobile.github.io/tags/Dagger2/"/>
    
  </entry>
  
  <entry>
    <title>依赖注入</title>
    <link href="http://jhmobile.github.io/2017/03/28/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    <id>http://jhmobile.github.io/2017/03/28/依赖注入/</id>
    <published>2017-03-28T03:25:48.000Z</published>
    <updated>2018-10-31T01:40:24.173Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式</p><a id="more"></a><h1 id="依赖注入的作用"><a href="#依赖注入的作用" class="headerlink" title="依赖注入的作用"></a>依赖注入的作用</h1><p>控制反转用于解耦，解的究竟是什么？<br>引用一下 Martin Flower在介绍注入时使用的部分代码说明这个问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder；</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">()</span></span>&#123;</span><br><span class="line">        finder = <span class="keyword">new</span> MovieFinderImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Movie[] moviesDirectedBy(String arg)&#123;</span><br><span class="line">        List allMovies = finder.findAll();</span><br><span class="line">        <span class="keyword">for</span>(Iterator it = allMovies.iterator(); it.hasNext();)&#123;</span><br><span class="line">            Movie movie = (Movie)it.next();</span><br><span class="line">            <span class="keyword">if</span>(!movie.getDirector().equals(arg)) it.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (Movie[]) allMovies.toArray(<span class="keyword">new</span> Movie[allMovies.size()]);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MovieFinder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>脑补一下这段代码的功能：</p><ul><li>MovieLister的类来提供需要的电影列表，依赖于MovieFinder对象</li><li>movieDirectedBy方法根据导演名来筛选电影</li><li>MovieFinder接口的实现类MovieFinderImpl负责与数据库交互，搜索电影</li></ul><p>目前看来，我们完美的实现了功能！然而，我们都晓得，需求是无时无刻不在改变的~😭，现在我们需要将finder的实现改变（比如增加一个参数）。那我们就需要修改多个类。</p><p>这就是依赖注入需要处理的耦合。这种在MovieLister中创建MovieFinderImpl的方式，是的MovieLister不仅仅依赖MovieFinder接口，还依赖于MovieFinderImpl这个实现。这种在一个类中，直接创建另一个累的对象的代码，我们称之为hard init , 它是有毒的：</p><ul><li>修改实现时，我们需要修改new Object的代码</li><li>不便于测试，上文中的MovieLister无法单独被测试，其行为和MovieFinderImpl紧紧耦合在一起。</li></ul><h1 id="依赖注入的实现方式"><a href="#依赖注入的实现方式" class="headerlink" title="依赖注入的实现方式"></a>依赖注入的实现方式</h1><p>其实我们在平常的工作过程中，会经常使用依赖注入，只不过很少注意（反正我是。。。），也不太注意使用依赖注入进行解耦。我们在这里介绍一下依赖注入实现的三种方式。</p><h2 id="构造函数注入（Contructor-Injection）"><a href="#构造函数注入（Contructor-Injection）" class="headerlink" title="构造函数注入（Contructor Injection）"></a>构造函数注入（Contructor Injection）</h2><p>在类的外面创建对象，然后通过构造方法传入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数注入，MovieLister类就只依赖于我们定义的MovieFinder接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MovieFinder finder;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MovieLister</span><span class="params">(MovieFinder finder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="setter方法注入"><a href="#setter方法注入" class="headerlink" title="setter方法注入"></a>setter方法注入</h2><p>增加一个setter方法来传入创建好的MovieFinder对象，同样可以避免在MovieFinder中hard init这个对象<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="接口注入"><a href="#接口注入" class="headerlink" title="接口注入"></a>接口注入</h2><p>接口注入使用接口来提供setter方法，其实现方法如下<br>首先创建一个注入使用的接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InjectFinder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span>；</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p><p>之后我们让MovieLister实现这个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MovieLister</span> <span class="keyword">implements</span> <span class="title">InjectFinder</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">injectFinder</span><span class="params">(MovieFinder finder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.finder = finder;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后我们需要根据不同的框架创建被依赖的MovieFinder的实现。</p><h1 id="Java中的注解依赖注入"><a href="#Java中的注解依赖注入" class="headerlink" title="Java中的注解依赖注入"></a>Java中的注解依赖注入</h1><p>在java中，使用注解进行依赖注入是最常用的。通过在字段的声明前添加@Inject注解进行标记，来实现依赖对象的自动注入。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Inject</span> Father father</span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Human</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>神奇的@Inject注解，一个注解就自动注入了？ 实质上，我们还需要使用依赖注入框架，进行一些配置。比如Dagger。</p><p>参考：</p><ol><li><a href="https://martinfowler.com/articles/injection.html" target="_blank" rel="noopener">Inversion of Control Containers and the Dependency Injection pattern</a></li><li><a href="https://github.com/android-cn/blog/tree/master/java/dependency-injection" target="_blank" rel="noopener">依赖注入</a></li></ol><hr><p>author: <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;先来一段看似比较装逼的介绍。在软件工程领域，依赖注入（Dependency Injection）是用于实现控制反转（Inversion of Control）的最常见的方式之一。本文主要介绍依赖注入原理和常见的实现方式&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="依赖注入" scheme="http://jhmobile.github.io/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>MVC，MVP，MVVM 架构分析</title>
    <link href="http://jhmobile.github.io/2017/03/10/MVC,MVP,MVVM/"/>
    <id>http://jhmobile.github.io/2017/03/10/MVC,MVP,MVVM/</id>
    <published>2017-03-10T01:55:48.000Z</published>
    <updated>2018-10-31T01:40:24.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~</p></blockquote><a id="more"></a><h1 id="MVC-MVP-MVVM"><a href="#MVC-MVP-MVVM" class="headerlink" title="MVC,MVP,MVVM"></a>MVC,MVP,MVVM</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>Model View Controller,软件中最常见的一种框架，Controller 层负责操作 Model 数据，并且返回给 View 层进行展示。</p><p><img src="http://static.zybuluo.com/LeoPoldCrossing/oanqhsxxmpa79b49rjc8fqry/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-08%2014.15.04.png" alt="MVC 架构图"></p><p>从上图看出，用户通过 view 层发出指令到 controller 层，controller 通知 model 层更新数据，model 完成后直接显示在 view 层上。</p><p>既然是 Android 猿，那我们从分析下 MVC模型在 Android 中的提现：</p><ul><li>View : layout.xml </li><li>Model: 各种 JavaBean</li><li>Controller : Activity，Fragment 等等</li></ul><p>我们来分析一个场景：点击按钮下载文件<br>按钮是卸载xml里面的，属于view层的<br>网络请求，数据解析相关代码写在其他类里，比如 netHelper ，属于model层。<br>view 和 model 通过button.setOnClickListener()关联其来，其卸载activity中，对应于 controller 层。</p><p>好像很清晰，看起来没毛病的样子~开始搞事情。。。<br>如果数据回来需要在view层进行展示，控制某些控件的隐藏/显示，xml文件就无能为力了，我们只能将代码写在 activity 中。activity 就开始找不到自己的归属了，我是谁？ view or controller？<br>如果一个逻辑复杂的页面，维护起来简直是噩梦。</p><p>当然从上图也可以看到Model层和View层并没有隔离开，这是一个重要的缺陷。违背了程序的低耦合原则。</p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p>MVP 作为 MVC 的演化，解决了不少 MVC 的问题。对于 android 来说，MVP 的 model 和 MVC 是一样的，而 activity 和 fragment 不再是 controller 层，而是纯粹的 view 层，所有关于用户事件的转发全部交由 presenter 层处理。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/wkn35fa4inl0j9j4gr9gkrgm/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2009.28.48.png" alt="MVP 架构示例图"></p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>看图说话~我们来分析一下，MVP架构是如何解决 MVC 面对的问题：</p><ul><li><p>view 层和 model 层完全解耦。<br>Presenter 充当桥梁，view 层发出的事件传递到 presenter 层，由P层操作model，获取数据后通知 view 层更新UI。</p></li><li><p>activity 和 fragment 臃肿的问题。<br>activity 和 fragment 属于 view 层，仅仅是数据回调后更新 UI。在activity中和fragment中没有任何与model相关的逻辑代码，而是将这部分代码放到presenter层中，通过接口的形式将 view 层需要的数据返回。</p></li><li><p>便于测试。<br>比如如果我们需要测试获取数据功能，只需要实现对应的接口，看presenter是否调用了相应的方法。也可以在presenter中制造假数据，分发给view ，用来测试布局是否正确。</p></li><li><p>逻辑清晰，耦合性低，可维护性提高</p></li></ul><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul><li>接口过多，一定程度影响我们的编码效率和代码可读性</li><li>逻辑比较复杂的页面，Activity 代码还是会比较多，当然要比MVC要好的多，而且逻辑清晰</li><li>Presenter 层比较臃肿</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ul><li>使用 Fragment 作为 view 层，而 activity 则是一个用于创建 view(fragment)和 presenter 的控制器。</li><li>根据业务需求抽取基类，定义接口，公共的逻辑尽量抽取，减少代码量。</li></ul><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p>MVVM 最早是由微软提出，先上图：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/032tt769o9u7x2kd45oijzrp/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-09%2018.03.19.png" alt="MVVM 架构图"><br>从 MVVM 架构图分析，MVVM 和 MVP 的区别貌似不大，presenter 换成了 viewmodel层，还有一点就是 view 层和 viewModel 层是binding的关系。viewmodel层的数据发生变化时，view层会相应的更新UI。</p><h3 id="DataBinding"><a href="#DataBinding" class="headerlink" title="DataBinding"></a>DataBinding</h3><p><a href="https://leopoldcrossing.github.io/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">DataBinding框架</a><br>Android 平台 MVVM 的目前相当火爆，谷歌欧巴的DataBinding框架功不可没。它可以让我们轻松的实现MVVM。看了网上很多的文章，都说DataBinding就是ViewModel层，我有点不同的看法，在这里提出来，大家讨论一下。</p><ul><li><p>众多博文的观点： Android 中 MVVM 就是 Databinding 框架的运用。Android Data Binding中的 ViewModel是根据layout自动生成的Binding类，比如 activity_main.xml ,生成的Binding类就是ActivityMainBinding。</p></li><li><p>不同观点：ViewModel 是可以进行 binding 的数据模型，Binding 类是View 和 ViewModel 之间的桥梁。ViewModel层数据对象三种形式：</p></li></ul><ol><li>继承BaseObservable </li><li>Observable Fields</li><li>Observable Collections<br>这样定义的数据对象发生改变时，同步更新UI。<br>DataBinding 框架通过<code>setContentView(int  resourceId)</code> 和<code>setXXX()</code> 方法完成View和ViewModel的绑定。</li></ol><h2 id="小结：理论知识讲完了，我们总结一下"><a href="#小结：理论知识讲完了，我们总结一下" class="headerlink" title="小结：理论知识讲完了，我们总结一下"></a>小结：理论知识讲完了，我们总结一下</h2><ul><li>了解区分 MVC，MVP，MVVM</li><li>初步了解这三种模式在Android中的使用。</li><li>DataBinding 在 MVVM 模式中的职责</li></ul><p>其实，真正的最佳实践都是人想出来的，我们并不一定要死磕一种模式。see一下谷歌大大实现的架构。</p><h1 id="Android-官方架构分析"><a href="#Android-官方架构分析" class="headerlink" title="Android 官方架构分析"></a>Android 官方架构分析</h1><h2 id="Android-architecture介绍"><a href="#Android-architecture介绍" class="headerlink" title="Android - architecture介绍"></a>Android - architecture介绍</h2><p><a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="noopener">项目地址:android-architecture</a><br>Android框架提供了很大的灵活性去创建一个APP。这种灵活性很有价值，但是也让app有很多类，不一致的命名和不规范的框架结构。导致测试，维护，扩展困难。<br>Android Architecture 演示了帮助解决或避免这些问题的常用方案，该项目用不同的架构实现了同一个APP。当然这些samples仅仅是作为参考，在我们创建自己的app时，还是根据需求选择最合适的。</p><h3 id="稳定的samples"><a href="#稳定的samples" class="headerlink" title="稳定的samples"></a>稳定的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/k6uhs2m0fx4ocf9ks4qer2hn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.21.png" alt="屏幕快照 2017-03-10 15.00.21.png-98.7kB"></p><h3 id="正在开发的samples"><a href="#正在开发的samples" class="headerlink" title="正在开发的samples"></a>正在开发的samples</h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/fe3cf56gby1dqt2ai4nr4g0b/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.00.41.png" alt="屏幕快照 2017-03-10 15.00.41.png-47.6kB"></p><p>废话不多说了，下面选择两个我想要在项目中使用的两个架构进行分析：<br><code>todo-mvp</code>和<code>todo-mvp-databinding</code></p><h2 id="TODO-MVP架构分析"><a href="#TODO-MVP架构分析" class="headerlink" title="TODO-MVP架构分析"></a>TODO-MVP架构分析</h2><p>todo-mvp 是基础的MVP架构，没有使用其他的任何类库。</p><h3 id="app设计"><a href="#app设计" class="headerlink" title="app设计"></a>app设计</h3><p>该示例项目的代码组织方式完全按照功能组织</p><ul><li>Tasks - 管理tasks列表</li><li>TaskDetail - 查看task详情，并提供删除功能</li><li>AddEditTask - 增加和编辑 tasks</li><li>Statistics - 查看最近的日程 </li></ul><p>每一个功能内部分为xActivity,xContract,xFragment,xPresenter四个类文件。</p><ul><li>Activity 类，用于创建Fragment 和 Presenter</li><li>Contract 类，这个与之前见到的mvp实现都不同，该类用于统一管理 view 和 presenter 的所有接口，使得 view 和 presenter 中的功能非常清晰。</li><li>Fragment类，View 层 ，实现 view 接口</li><li>Presenter类，Contract类中相应 Presenter 接口的实现类</li></ul><p>结构图如下：<br><img src="http://static.zybuluo.com/LeoPoldCrossing/65hqqxllygeeef2okibi9mfc/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-10%2015.29.23.png" alt="屏幕快照 2017-03-10 15.29.23.png-25.1kB"></p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><h4 id="基类"><a href="#基类" class="headerlink" title="基类"></a>基类</h4><p>我们先来看两个Base接口类， BasePresenter 和 BaseView<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BasePresenter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BasePresenter中含有方法start(),该方法的作用是presenter开始获取数据并调用 view 中的方法更新UI。其调用时机是在 Fragment 类的 onResume() 方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseView</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(T presenter)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>BaseView 中含有方法 setPresenter，该方法作用是将presenter示例传入 view 中，调用时机是 Presenter 实现类的构造函数中。</p><h4 id="契约类"><a href="#契约类" class="headerlink" title="契约类"></a>契约类</h4><p>之前说过契约类，是与之前所见的MVP实现不同，也是我感觉很优雅的地方。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">view 和 presenter 的职责很明了，增删改都很方便</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TaskDetailContract</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">View</span> <span class="keyword">extends</span> <span class="title">BaseView</span>&lt;<span class="title">Presenter</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setLoadingIndicator</span><span class="params">(<span class="keyword">boolean</span> active)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">showMissingTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">Presenter</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">editTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">deleteTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">completeTask</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">activateTask</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Activity-的作用"><a href="#Activity-的作用" class="headerlink" title="Activity 的作用"></a>Activity 的作用</h3><p>Activity 在项目中是一个控制者，负责创建 view 及 presenter 实例，并将二者进行关联。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">TaskDetailFragment taskDetailFragment = (TaskDetailFragment) getSupportFragmentManager()</span><br><span class="line">                .findFragmentById(R.id.contentFrame);</span><br><span class="line"></span><br><span class="line">        if (taskDetailFragment == null) &#123;</span><br><span class="line">            taskDetailFragment = TaskDetailFragment.newInstance(taskId);</span><br><span class="line"></span><br><span class="line">            ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</span><br><span class="line">                    taskDetailFragment, R.id.contentFrame);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // Create the presenter</span><br><span class="line">        new TaskDetailPresenter(</span><br><span class="line">                taskId,</span><br><span class="line">                Injection.provideTasksRepository(getApplicationContext()),</span><br><span class="line">                taskDetailFragment);</span><br></pre></td></tr></table></figure></p><h3 id="MVP-的实现与组织"><a href="#MVP-的实现与组织" class="headerlink" title="MVP 的实现与组织"></a>MVP 的实现与组织</h3><ul><li><p>Presenter 创建时将 Fragment 作为参数传入构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">TasksPresenter</span><span class="params">(@NonNull TasksRepository tasksRepository, @NonNull TasksContract.View tasksView)</span> </span>&#123;</span><br><span class="line">        mTasksRepository = checkNotNull(tasksRepository, <span class="string">"tasksRepository cannot be null"</span>);</span><br><span class="line">        mTasksView = checkNotNull(tasksView, <span class="string">"tasksView cannot be null!"</span>);</span><br><span class="line">        <span class="comment">// view 调用setPresenter方法，注入 presenter 示例</span></span><br><span class="line">        mTasksView.setPresenter(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>Fragment onResume() 方法中调用 presenter.start()方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TaskDetailFragment extends Fragment implements TaskDetailContract.View &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onResume() &#123;</span><br><span class="line">        super.onResume();</span><br><span class="line">        mPresenter.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    @Override</span><br><span class="line">    public void setPresenter(@NonNull TaskDetailContract.Presenter presenter) &#123;</span><br><span class="line">        mPresenter = checkNotNull(presenter);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p>分析代码得出view 和 presenter 相互持有，并且通过构造函数或set方法进行依赖注入。view 处理用户与界面的交互，presenter与model层交互，处理数据回调的逻辑判断，如果需要更新UI，直接调用view的方法，实现了 view 和 presenter 的各司其职。</p><h3 id="Model-层设计"><a href="#Model-层设计" class="headerlink" title="Model 层设计"></a>Model 层设计</h3><p>Model 最大的特点就是被赋予了获取数据的职责。与我们平常Model只定义Bean对象不同，todo-mvp中，数据的获取，存储，数据状态变化都是model层的任务。Presenter 只需要调用该层的方法并传入回调。</p><p>总结：MVP遵循类单一职责的编程原则，但是代码量相对增加，而且view层的代码依然略显臃肿，xml文件作为View层的能力依然很弱，UI的更新依然需要咋Fragment中处理。</p><h3 id="MVVM-与-MVP-相结合架构分析"><a href="#MVVM-与-MVP-相结合架构分析" class="headerlink" title="MVVM 与 MVP 相结合架构分析"></a>MVVM 与 MVP 相结合架构分析</h3><p>该架构基于 todo-mvp 示例并且使用了 DataBinding 库来展示数据和绑定事件。<br>它并不是严格的遵守 MVVM 模型 或者 MVP 模型，它同时使用了 ViewModel 和 Presenter 。</p><h4 id="app-设计"><a href="#app-设计" class="headerlink" title="app 设计"></a>app 设计</h4><p>目录结构与todo-mvp一致。只是多了一个ViewModel。Statistics 和 tasks 模块实现ViewModel的方式并不一样，我们来逐个分析。</p><p><img src="http://static.zybuluo.com/LeoPoldCrossing/72rwqh88tal6nq3okqgx23uu/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-03-11%2013.14.33.png" alt="屏幕快照 2017-03-11 13.14.33.png-31.5kB"></p><h4 id="Statistics-模块"><a href="#Statistics-模块" class="headerlink" title="Statistics 模块"></a>Statistics 模块</h4><p>Statistics 模块<br>主要类：Activity ,Fragment ,ViewModel,Presenter</p><ul><li><p>StatisticsActivity ： 创建 Fragment，ViewModel ， Presenter对象，管理注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">StatisticsFragment statisticsFragment = (StatisticsFragment) getSupportFragmentManager()</span><br><span class="line">    .findFragmentById(R.id.contentFrame);</span><br><span class="line">    <span class="keyword">if</span> (statisticsFragment == <span class="keyword">null</span>) &#123;</span><br><span class="line">        statisticsFragment = StatisticsFragment.newInstance();</span><br><span class="line">    ActivityUtils.addFragmentToActivity(getSupportFragmentManager(),</span><br><span class="line">                    statisticsFragment, R.id.contentFrame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">StatisticsViewModel statisticsViewModel = <span class="keyword">new</span> StatisticsViewModel(getApplicationContext());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注入viewModel，用于binding至xml文件</span></span><br><span class="line">statisticsFragment.setViewModel(statisticsViewModel);</span><br><span class="line"></span><br><span class="line"><span class="comment">// viewmodel 实现 view， 构造方法注入到presenter</span></span><br><span class="line">StatisticsPresenter statisticsPresenter = <span class="keyword">new</span> StatisticsPresenter(</span><br><span class="line">        Injection.provideTasksRepository(getApplicationContext()), statisticsViewModel);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Fragment 注入 presenter。</span></span><br><span class="line">statisticsFragment.setPresenter(statisticsPresenter);</span><br></pre></td></tr></table></figure></li><li><p>StatisticsFragment ： 调用presenter的方法获取数据，绑定 viewmodel 至xml </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPresenter</span><span class="params">(@NonNull StatisticsPresenter presenter)</span></span>&#123;</span><br><span class="line">    mPresenter = checkNotNull(presenter)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mViewDataBinding.setStats(mStatisticsViewModel)</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">"android.view.View"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">"stats"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">"com.example.android.architecture.blueprints.todoapp.statistics.StatisticsViewModel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>StatisticsViewModel ： 提供get set方法，binding 到 xml 文件，自动更新UI</p></li><li><p>StatisticsPresenter ： 与Model 层交互，获取数据后传递给viewmodel，更新UI</p></li></ul><h4 id="Tasks模块"><a href="#Tasks模块" class="headerlink" title="Tasks模块"></a>Tasks模块</h4><p>Tasks 模块 MVP 结构的组织与实现与todo-mvp一致。<br>主要类： TasksActivity,TasksFragment,TasksPresenter,TasksItemActionHandler,TasksViewModel。</p><ul><li><p>TasksActivity ：管理，创建对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TasksFragment tasksFragment =</span><br><span class="line">            (TasksFragment) getSupportFragmentManager().findFragmentById(R.id.contentFrame);</span><br><span class="line">    if (tasksFragment == null) &#123;</span><br><span class="line">        // Create the fragment</span><br><span class="line">        tasksFragment = TasksFragment.newInstance();</span><br><span class="line">        ActivityUtils.addFragmentToActivity(</span><br><span class="line">                getSupportFragmentManager(), tasksFragment, R.id.contentFrame);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Create the presenter</span><br><span class="line">    mTasksPresenter = new TasksPresenter(Injection.provideTasksRepository(</span><br><span class="line">            getApplicationContext()), tasksFragment);</span><br><span class="line">    </span><br><span class="line">    // 创建时注入Presenter，是为了方法的重用。</span><br><span class="line">    TasksViewModel tasksViewModel =</span><br><span class="line">            new TasksViewModel(getApplicationContext(), mTasksPresenter);</span><br><span class="line">    // 注入viewModel，通过Binding类与xml文件关联</span><br><span class="line">    tasksFragment.setViewModel(tasksViewModel);</span><br></pre></td></tr></table></figure></li><li><p>TasksFragment : View 层，持有ViewModel 和 Presenter。将ViewModel绑定至xml文件，根据数据自动更新UI，调用Presenter的方法获取或更新数据，处理用户和组件的交互。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TasksFragBinding tasksFragBinding = TasksFragBinding.inflate(inflater, container, false);</span><br><span class="line">// 绑定viewmodel 和 xml文件，自动更新UI。</span><br><span class="line">tasksFragBinding.setTasks(mTasksViewModel);</span><br><span class="line">// 将presenter与xml绑定，作为事件处理类，重用方法</span><br><span class="line">tasksFragBinding.setActionHandler(mPresenter);</span><br></pre></td></tr></table></figure></li><li><p>TasksPresenter : 和 todo-mvp 的presenter 没什么区别，获取数据，然后调用view的方法，更新UI。</p></li><li><p>TasksViewModel : 继承BaseObservable，在与Xml文件绑定后，内容发生改变时刻自动更新UI。<br>注意 <code>@Bindable</code> 注解和 <code>notifyPropertyChanged()</code>的使用; </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">public class TasksViewModel extends BaseObservable &#123;</span><br><span class="line"></span><br><span class="line">    int mTaskListSize = 0;</span><br><span class="line"></span><br><span class="line">    private final TasksContract.Presenter mPresenter;</span><br><span class="line"></span><br><span class="line">    private Context mContext;</span><br><span class="line"></span><br><span class="line">    public TasksViewModel(Context context, TasksContract.Presenter presenter) &#123;</span><br><span class="line">        mContext = context;</span><br><span class="line">        mPresenter = presenter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public String getCurrentFilteringLabel() &#123;</span><br><span class="line">        switch (mPresenter.getFiltering()) &#123;</span><br><span class="line">            case ALL_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.label_all);</span><br><span class="line">            case ACTIVE_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.label_active);</span><br><span class="line">            case COMPLETED_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.label_completed);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public String getNoTasksLabel() &#123;</span><br><span class="line">        switch (mPresenter.getFiltering()) &#123;</span><br><span class="line">            case ALL_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.no_tasks_all);</span><br><span class="line">            case ACTIVE_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.no_tasks_active);</span><br><span class="line">            case COMPLETED_TASKS:</span><br><span class="line">                return mContext.getResources().getString(R.string.no_tasks_completed);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public Drawable getNoTaskIconRes() &#123;</span><br><span class="line">        switch (mPresenter.getFiltering()) &#123;</span><br><span class="line">            case ALL_TASKS:</span><br><span class="line">                return mContext.getResources().getDrawable(R.drawable.ic_assignment_turned_in_24dp);</span><br><span class="line">            case ACTIVE_TASKS:</span><br><span class="line">                return mContext.getResources().getDrawable(R.drawable.ic_check_circle_24dp);</span><br><span class="line">            case COMPLETED_TASKS:</span><br><span class="line">                return mContext.getResources().getDrawable(R.drawable.ic_verified_user_24dp);</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public boolean getTasksAddViewVisible() &#123;</span><br><span class="line">        return mPresenter.getFiltering() == ALL_TASKS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public boolean isNotEmpty() &#123;</span><br><span class="line">        return mTaskListSize &gt; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTaskListSize(int taskListSize) &#123;</span><br><span class="line">        mTaskListSize = taskListSize;</span><br><span class="line">        notifyPropertyChanged(BR.noTaskIconRes);</span><br><span class="line">        notifyPropertyChanged(BR.noTasksLabel);</span><br><span class="line">        notifyPropertyChanged(BR.currentFilteringLabel);</span><br><span class="line">        notifyPropertyChanged(BR.notEmpty);</span><br><span class="line">        notifyPropertyChanged(BR.tasksAddViewVisible);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TasksItemActionHandler : 绑定至xml文件，通过set方法注入，传入Presenter，可以重用方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class TasksItemActionHandler &#123;</span><br><span class="line"></span><br><span class="line">    private TasksContract.Presenter mListener;</span><br><span class="line"></span><br><span class="line">    public TasksItemActionHandler(TasksContract.Presenter listener) &#123;</span><br><span class="line">        mListener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Called by the Data Binding library when the checkbox is toggled.</span><br><span class="line">     */</span><br><span class="line">    public void completeChanged(Task task, boolean isChecked) &#123;</span><br><span class="line">        if (isChecked) &#123;</span><br><span class="line">            mListener.completeTask(task);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            mListener.activateTask(task);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Called by the Data Binding library when the row is clicked.</span><br><span class="line">     */</span><br><span class="line">    public void taskClicked(Task task) &#123;</span><br><span class="line">        mListener.openTaskDetails(task);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>总结：该架构节省去了findViewById的苦力活，通过Binding库和ViewModel层增强了XMl的功能。<br>相比MVP，view层中的代码减少，UI展式改变只需改变ViewModel层。<br>项目MVVM，业务逻辑代码放在了Presenter中，明确了各层的职责。<br>这也是我比较倾向在项目中使用的架构。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>作为程序猿，纸上来的终觉浅，既然觉得浅了，咱们就去玩一些深的，自己去实现以下MVC，MVP，MVVM。实践出真知，真正的理解这三种架构。敬请期待~</p><hr><p>author:<a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt; MVC,MVP,MVVM 作为 Android 开发中耳熟能详的三个框架，一直处半懵逼的状态，最近分析了一些谷歌官方给出的samples代码，记录下自己的理解，轻喷~&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="架构分析" scheme="http://jhmobile.github.io/tags/%E6%9E%B6%E6%9E%84%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding- Say Goodye to FindViewById</title>
    <link href="http://jhmobile.github.io/2017/02/17/DataBinding%E4%BB%8B%E7%BB%8D/"/>
    <id>http://jhmobile.github.io/2017/02/17/DataBinding介绍/</id>
    <published>2017-02-17T01:55:48.000Z</published>
    <updated>2018-10-31T01:40:24.169Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DataBinding介绍"><a href="#DataBinding介绍" class="headerlink" title="DataBinding介绍"></a>DataBinding介绍</h1><p>Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。</p><p>Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。</p><p>Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。</p><a id="more"></a><p>Data Binding 之前，我们不可避免地要编写大量的毫无营养的代码，如 findViewById()、setText()，setVisibility()，setEnabled() 或 setOnClickListener() 等，通过 Data Binding , 我们可以通过声明式布局以精简的代码来绑定应用程序逻辑和布局，这样就不用编写大量的毫无营养的代码了。</p><p>文中的示例代码地址<a href="https://github.com/LeoPoldCrossing/DataBindingSamples" target="_blank" rel="noopener">DataBindingSamples</a></p><hr><h1 id="DataBinding简单使用示例"><a href="#DataBinding简单使用示例" class="headerlink" title="DataBinding简单使用示例"></a>DataBinding简单使用示例</h1><h2 id="DataBinding环境"><a href="#DataBinding环境" class="headerlink" title="DataBinding环境"></a>DataBinding环境</h2><p>App Module - build.gradle中开启dataBinding<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android&#123;</span><br><span class="line">    ...</span><br><span class="line">    dataBinding&#123;</span><br><span class="line">        enable = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="修改Layout文件"><a href="#修改Layout文件" class="headerlink" title="修改Layout文件"></a>修改Layout文件</h2><p>使用dataBingding需要修改Layout文件，根标签不再是线性布局，相对布局等，而是使用layout标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;layout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">        xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</span><br><span class="line">        xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;</span><br><span class="line">        &lt;!-- 原根节点 --&gt;</span><br><span class="line">        &lt;LinearLayout&gt;</span><br><span class="line">        ...</span><br><span class="line">        &lt;/LinearLayout&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure></p><h2 id="数据对象"><a href="#数据对象" class="headerlink" title="数据对象"></a>数据对象</h2><p>就是一个Model，就不贴代码了</p><h2 id="UI绑定"><a href="#UI绑定" class="headerlink" title="UI绑定"></a>UI绑定</h2><ul><li>修改布局文件,定义variable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;layout</span><br><span class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</span><br><span class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</span><br><span class="line">    &gt;</span><br><span class="line">    &lt;data&gt;</span><br><span class="line">    </span><br><span class="line">        &lt;variable</span><br><span class="line">            name=&quot;user&quot;</span><br><span class="line">            type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</span><br><span class="line">        # 也可以写成</span><br><span class="line">        &lt;import type=&quot;com.example.databindingsamples.model.User&quot; /&gt;</span><br><span class="line">        &lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/data&gt;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    &lt;TextView</span><br><span class="line">            ...</span><br><span class="line">            # 使用 variable</span><br><span class="line">            android:text=&quot;@&#123;user.firstName&#125;&quot;</span><br><span class="line">            ...</span><br><span class="line">            /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            ...</span><br><span class="line">            android:text=&quot;@&#123;user.lastName&#125;&quot;</span><br><span class="line">            ... /&gt;</span><br><span class="line">         &lt;TextView</span><br><span class="line">            ...</span><br><span class="line">            android:visibility=&quot;@&#123;!user.adult ? View.VISIBLE:View.GONE&#125;&quot;</span><br><span class="line">            ... /&gt;</span><br><span class="line">&lt;/layout&gt;</span><br></pre></td></tr></table></figure><ul><li><p>绑定 variable<br>修改<code>onCreate</code>方法 使用<code>DataBingdingUtil.setContentView</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    ActivityBasicBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_basic);</span><br><span class="line">    User user = new User(&quot;leo&quot;, &quot;wang&quot;, 20);</span><br><span class="line">    binding.setUser(user);</span><br><span class="line">    # 或者使用setVariable()</span><br><span class="line">    binding.setVariable(BR.user,user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>ActivityBasicBinding</code>类是自动生成的，所有的<code>set</code>方法也是根据<code>variable</code>名称生成的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 类名生成</span><br><span class="line">activity_basic.xml -&gt; ActivityBasicBinding</span><br><span class="line"># set方法生成</span><br><span class="line">user -&gt; setUser(User user)</span><br></pre></td></tr></table></figure></li></ul><h2 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h2><h3 id="创建代理类"><a href="#创建代理类" class="headerlink" title="创建代理类"></a>创建代理类</h3><p>先来创建一个事件的处理类，并在<code>layout</code>文件中声明。<br>知道大家都是好奇宝宝，先忍会哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class EventHandler &#123;</span><br><span class="line">    public void onDisplayNameClick(View view) &#123;</span><br><span class="line">        Toast.makeText(view.getContext(), &quot;DisplayName : &quot; + user.getDisplayName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onFirstNameClick(User user) &#123;</span><br><span class="line">        Toast.makeText(BasicActivity.this, &quot;FirstName : &quot; + user.getFirstName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onLastNameClick(View view, User user) &#123;</span><br><span class="line">        Toast.makeText(BasicActivity.this, &quot;LastName : &quot; + user.getLastName(), Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onAgeClick(View view) &#123;</span><br><span class="line">        if (user.getAge() &gt; 18) &#123;</span><br><span class="line">            user.setAge(16);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            user.setAge(28);</span><br><span class="line">        &#125;</span><br><span class="line">        binding.setUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Method-Reference"><a href="#Method-Reference" class="headerlink" title="Method Reference"></a>Method Reference</h3><p>事件绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=&quot;@&#123;handler.onDisplayNameClick&#125;&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>Tip:引用的方法参数必须和事件回调参数一致<br>比如 android:onClick , 引用的方法参数必须为（View view）</p></blockquote><h3 id="Listener-Binding"><a href="#Listener-Binding" class="headerlink" title="Listener Binding"></a>Listener Binding</h3><p>监听器绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=&quot;@&#123;()-&gt; handler.onFirstNameClick(user)&#125;&quot;</span><br><span class="line"></span><br><span class="line">android:onClick=&quot;@&#123;(view)-&gt; handler.onLastNameClick(view,user)&#125;&quot;</span><br></pre></td></tr></table></figure></p><blockquote><p>Tip: 可自定义传递参数</p></blockquote><h3 id="绑定-handler"><a href="#绑定-handler" class="headerlink" title="绑定 handler"></a>绑定 handler</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binding.setHandler(new EventHandler());)</span><br></pre></td></tr></table></figure><h1 id="布局细节"><a href="#布局细节" class="headerlink" title="布局细节"></a>布局细节</h1><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><ul><li>Java代码中一样在xml文件中 import class <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;imports type=&quot;android.view.View&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">    android:visibility=&quot;@&#123;user.isAdult?View.VISIBLE:View.GONE&#125;&quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><ul><li><p>类型别名<br>如果在data节点导入两个同名类，使用<code>alias</code>属性，给类赋一个别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;import type=&quot;com.example.home.data.User&quot; /&gt;</span><br><span class="line">&lt;import type=&quot;com.examle.detail.data.User&quot; alias=&quot;DetailUser&quot; /&gt;</span><br><span class="line">&lt;variable name=&quot;detailUser&quot; type=&quot;DetailUser&quot; /&gt;</span><br><span class="line">&lt;variable name=&quot;user&quot; type=&quot;User&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>表达式使用导入的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;com.example.User&quot;/&gt;</span><br><span class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;user&quot; type=&quot;User&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;userList&quot; type=&quot;List&amp;lt;User&amp;gt&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></li><li><p>静态字段和方法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">     &lt;import type=&quot;com.example.databindingsamples.utils.MyStringUtils&quot; alias=&quot;StringUtil&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br><span class="line">…</span><br><span class="line">&lt;TextView</span><br><span class="line">   android:text=&quot;@&#123;MyStringUtils.capitalize(user.lastName)&#125;&quot;</span><br><span class="line">   android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">   android:layout_height=&quot;wrap_content&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p><code>data</code> 标签下可以定义任意数量的 <code>variable</code> 标签，每一个<code>variable</code>标签都描述一个可以在binding表达式中使用的变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;android.graphics.drawable.Drawable&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;user&quot; type=&quot;com.example.User&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;image&quot; type=&quot;Drawable&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;note&quot; type=&quot;String&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br></pre></td></tr></table></figure></p><p>变量类型会在编译时检查，所以如果一个变量实现了了Observable 或者 是一个 Observable 集合，它会被反射调用。</p><p>如果变量声明的是一个未实现的Observable基类或者接口，该变量不会被观察，也就是变量的改动不会改变UI。</p><p>binding 类自动生成会为每一个变量自动生成 getter 和 setter 方法。在 setter 方法没有调用之前，他们都被设置为默认值：Object 设置为 null ， int 设置为 0 ， boolean 设置为 false 等等。。。</p><h2 id="Binding类自定义"><a href="#Binding类自定义" class="headerlink" title="Binding类自定义"></a>Binding类自定义</h2><ul><li><p>自定义类名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成的binding类位于databinding包下</span><br><span class="line">&lt;!--&lt;data class=&quot;ContactBinding&quot;&gt;--&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义类名，并修改生成路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--&lt;data class=&quot;.ContactBinding&quot;&gt;--&gt;</span><br></pre></td></tr></table></figure></li><li><p>自定义类名和生成路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;data class=&quot;com.example.databindingsamples.ContactBinding&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Includes"><a href="#Includes" class="headerlink" title="Includes"></a>Includes</h2><p>在使用应用命名空间的布局中，变量可以传递到任何 include 布局中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Root添加命名空间</span><br><span class="line">xmlns:bind=&quot;http://schemas.android.com/apk/res-auto</span><br><span class="line"># 绑定数据</span><br><span class="line"></span><br><span class="line">&lt;include</span><br><span class="line">    android:id=&quot;@+id/layout_user&quot;</span><br><span class="line">    layout=&quot;@layout/include_user&quot;</span><br><span class="line">    bind:user=&quot;@&#123;user&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>Tip：</p><ol><li>需要注意的是<code>user</code>变量必须在 include 的布局中声明。</li><li>如果在非根节点的 ViewGroup 中使用 include 会导致 crash</li></ol></blockquote><h2 id="ViewStubs"><a href="#ViewStubs" class="headerlink" title="ViewStubs"></a>ViewStubs</h2><blockquote><p>ViewStub 是一种不可见的，0尺寸在运行时懒加载的View。当其设置为visible或者调用了inflate()方法时，它会被加载完成的view或者views替换掉。因此，ViewStub 在 setVisibility(int) 或者 inflate() 方法被调用后在 hierarchy 中就不存在了。加载后的 view 会被添加到Viewstub的父容器中，并且参数为ViewStub的布局参数。 </p></blockquote><p>因为 ViewStub 会被移除，且 Binding 类中的 View 全部都是 final 修饰，所以 Binding 类中使用 ViewStubProxy 来代替 ViewStub， 开发者可以通过 ViewStubProxy 来获取 viewStub 或者 viewstub 填充后的 view。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.viewstub = new android.databinding.ViewStubProxy((android.view.ViewStub) bindings[1]);</span><br></pre></td></tr></table></figure></p><p>inflate 一个新的 layout 时，会为新的 layout 创建一个新 binding 对象。因此，ViewStubProxy 必须监听 ViewStub 的 ViewStub.OnInflateListener，并及时建立 binding。由于 ViewStub 只能有一个 OnInflateListener，你可以将你自己的 listener 设置在 ViewStubProxy 上，在 binding 建立之后， listener 就会被触发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.viewStub.setOnInflateListener(new ViewStub.OnInflateListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onInflate(ViewStub stub, View inflated) &#123;</span><br><span class="line">                ViewStubBinding viewStubBinding = DataBindingUtil.bind(inflated);</span><br><span class="line">                Contact contact = new Contact(&quot;Messi&quot;, &quot;122134567&quot;, &quot;2345@gmail.com&quot;);</span><br><span class="line">                viewStubBinding.setContact(contact);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure></p><h1 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h1><h2 id="Common-Features"><a href="#Common-Features" class="headerlink" title="Common Features"></a>Common Features</h2><ul><li>数学计算 <code>+ - * %</code></li><li>字符串链接 <code>+</code> </li><li>逻辑 <code>|| &amp;&amp;</code></li><li>二进制 <code>&amp; | ^</code></li><li>一元 <code>+ - ! ~</code></li><li>位移 <code>&gt;&gt; &gt;&gt;&gt; &lt;&lt; &lt;&lt;&lt;</code></li><li>比较 <code>&gt; &lt; &gt;= &lt;= ==</code></li><li>instance of</li><li>Grouping()</li><li>字面量 <code>字符 字符串 数字 null</code></li><li>类型转换</li><li>方法调用 使用<code>.</code>或者 <code>::</code></li><li>Field 访问 </li><li>Array 访问</li><li>三元运算符<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Examples:</span><br><span class="line">android:text=&quot;@&#123;String.valueOf(index + 1)&#125;&quot;</span><br><span class="line">android:visibility=&quot;@&#123;age&lt;13?View.GONE:View.VISIBLE&#125;&quot;</span><br><span class="line">android:transitionName=&apos;@&#123;&quot;image_&quot; + id&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="缺失的操作符"><a href="#缺失的操作符" class="headerlink" title="缺失的操作符"></a>缺失的操作符</h2><ul><li><code>this</code></li><li><code>super</code></li><li><code>new</code> </li><li>显示泛型调用<code>&lt;T&gt;</code></li><li>缺省 无法访问 this,super,new，显示泛型调用</li></ul><h2 id="Null-合并运算符"><a href="#Null-合并运算符" class="headerlink" title="Null 合并运算符"></a>Null 合并运算符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text=&apos;@&#123;user.displayName ?? &quot;displayName is null&quot;&#125;&apos;</span><br><span class="line">等同于</span><br><span class="line">android:text=&apos;@&#123;user.displayName != null ? user.displayName : &quot;displayName is null&quot;&#125;&apos;</span><br></pre></td></tr></table></figure><h2 id="属性引用"><a href="#属性引用" class="headerlink" title="属性引用"></a>属性引用</h2><p>JavaBean 引用，当表达式引用了一个类内的属性时，他会尝试直接调用域，getter，还有ObservableFields<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=&quot;@&#123;user.firstName&#125;&quot;</span><br></pre></td></tr></table></figure></p><h2 id="避免-NullPointerException"><a href="#避免-NullPointerException" class="headerlink" title="避免 NullPointerException"></a>避免 NullPointerException</h2><p>自动生成的 data binding 代码会自动检查和避免 NullPointerException.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@&#123;user.name&#125;</span><br><span class="line">如果 user 为 null，则 user.name 赋予默认值 null</span><br><span class="line">@&#123;user.age&#125; </span><br><span class="line">如果 user 为 null，则 user.age 赋予默认值 0</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 分析ActivityMainBinding 源码，看到有对user是否为null的判断</span><br><span class="line">if ((dirtyFlags &amp; 0x6L) != 0) &#123;</span><br><span class="line">    if (user != null) &#123;</span><br><span class="line">        // read user.firstName</span><br><span class="line">        firstNameUser = user.getFirstName();</span><br><span class="line">        // read user.lastName</span><br><span class="line">        lastNameUser = user.getLastName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>通用的容器类，数组，lists，sparse lists 和 map，可以用[]操作符来存取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;data&gt;</span><br><span class="line">    &lt;import type=&quot;android.util.SparseArray&quot;/&gt;</span><br><span class="line">    &lt;import type=&quot;java.util.Map&quot;/&gt;</span><br><span class="line">    &lt;import type=&quot;java.util.List&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;list&quot; type= &quot;List&amp;lt;String&amp;gt;&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;sparse&quot; type=&quot;SparseArray&amp;lt;String&amp;gt;&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;map&quot; type=&quot;Map&amp;lt;String,String&amp;gt;&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;index type=&quot;int&quot;/&gt;</span><br><span class="line">    &lt;variable name=&quot;key&quot; type=&quot;String&quot;/&gt;</span><br><span class="line">&lt;/data&gt;</span><br><span class="line">...</span><br><span class="line">android:text=&quot;@&#123;list[index]&#125;&quot;</span><br><span class="line">...</span><br><span class="line">android:text=&quot;@&#123;sparse[index]&#125;&quot;</span><br><span class="line">...</span><br><span class="line">android:text=&quot;@&#123;map[key]&#125;&quot;</span><br></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用单引号将属性值括起来，就可以在表达式中使用双引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=&apos;@&#123;map[&quot;firstName&quot;]&#125;&apos;</span><br></pre></td></tr></table></figure></p><p>也可以用双引号将属性值括起来，然后字符串使用&amp;<code>quot；</code>或者反引号`来调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">android:text=&quot;@&#123;map[&amp;quot;firstName&amp;quot;]&#125;&quot;</span><br><span class="line">android:text=&quot;@&#123;map[`firstName`]&#125;&quot;</span><br></pre></td></tr></table></figure></p><h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><p>普通的语法在表达式中访问资源 <a href="http://blog.csdn.net/feelang/article/details/46342699" target="_blank" rel="noopener"><strong>官方教程的坑</strong></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">android:padding=@&#123;large? (int)@dimen/largePadding: (int)@dimen/smallPadding&#125;</span><br><span class="line"></span><br><span class="line">android:background=&quot;@&#123;large? @color/red:@color/green&#125;&quot;</span><br><span class="line"></span><br><span class="line">android:text=&quot;@&#123;@string/nameFormat(firstName,lastName)&#125;&quot;</span><br><span class="line"></span><br><span class="line">android:text=&quot;@&#123;@plurals/banana(bananaCount,bananaCount)&#125;&quot;</span><br></pre></td></tr></table></figure></p><p>需要显示声明的资源<br><img src="http://static.zybuluo.com/LeoPoldCrossing/we3idy2ri20tt8de1i4rj3am/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-13%2018.14.05.png" alt="屏幕快照 2017-02-13 18.14.05.png-32.8kB"></p><h1 id="数据对象-1"><a href="#数据对象-1" class="headerlink" title="数据对象"></a>数据对象</h1><p>DataBinding 让我决定引入到项目中的原因是它具备<strong>数据改变，UI随之更新</strong>的能力。<br>Data Binding 为我们提供了三种数据变动通知机制：<code>Observable Objects，Observable fields，Observable collections</code>。</p><p>Come on！ Baby~ 让我们一起看一下这三种机制的神奇之处。</p><h2 id="Observable-Objects"><a href="#Observable-Objects" class="headerlink" title="Observable Objects"></a>Observable Objects</h2><p>我们只需要修改Model类，数据改变后，更新UI的事情由Binding完成，再也不用费时费力的去写<code>binding.setXXX</code>~so cool！<br><code>@Bindable</code>在编译时会在BR类内生成一个元素。BR类会在生成在 module package下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class ObservableUser extends BaseObservable &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private long idNumber;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public long getIdNumber() &#123;</span><br><span class="line">        return idNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setIdNumber(long idNumber) &#123;</span><br><span class="line">        this.idNumber = idNumber;</span><br><span class="line">        notifyPropertyChanged(BR.idNumber);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bindable</span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        notifyPropertyChanged(BR.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">        notifyChange();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Observable-Fields"><a href="#Observable-Fields" class="headerlink" title="Observable Fields"></a>Observable Fields</h2><p>如果我们的Model类里面只有少量的 Field 或者 想要节省时间，可以使用<code>Observable Field</code>及其派生的 <code>ObservableBoolean</code>,<code>ObservableByte</code>,<code>ObservableChar</code>,<code>ObservableShort</code>,<code>ObservableInt</code>,<code>ObservableLong</code>,<code>ObservableFloat</code>,<code>ObservableDouble</code>,<code>ObservableParcelable</code>。<br>ObaservableField自包含obsevable对象，并且只有一个Field。</p><ul><li><p>Step 1 Model 定义 ObservableField</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public final ObservableField&lt;String&gt; name = new ObservableField&lt;String&gt;();</span><br><span class="line">public final ObservableLong NO = new ObservableLong();</span><br><span class="line">public final ObservableInt age = new ObservableInt();</span><br></pre></td></tr></table></figure></li><li><p>Step 2 Field Value 的set和get</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">observableFieldUser.name.set(&quot;James&quot;);</span><br><span class="line">observableFieldUser.NO.set(23);</span><br><span class="line">observableFieldUser.age.set(31);</span><br><span class="line"></span><br><span class="line">observableFieldUser.name.get();</span><br><span class="line">observableFieldUser.age.get();</span><br><span class="line">observableFieldUser.NO.get();</span><br></pre></td></tr></table></figure></li></ul><h2 id="Observable-Collections"><a href="#Observable-Collections" class="headerlink" title="Observable Collections"></a>Observable Collections</h2><h3 id="ObservableMap"><a href="#ObservableMap" class="headerlink" title="ObservableMap"></a>ObservableMap</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">private ObservableMap&lt;String, Object&gt; observableArrayMap = new ObservableArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"># 数据</span><br><span class="line">observableArrayMap.put(&quot;system&quot;, &quot;Android&quot;);</span><br><span class="line">observableArrayMap.put(&quot;brand&quot;, &quot;三星&quot;);</span><br><span class="line">observableArrayMap.put(&quot;version&quot;, &quot;6.0.1&quot;);</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">&lt;import type=&quot;android.databinding.ObservableMap&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;variable</span><br><span class="line">    name=&quot;map&quot;</span><br><span class="line">    type=&quot;ObservableMap&amp;lt;String,Object&amp;gt;&quot;/&gt;</span><br><span class="line"></span><br><span class="line">android:text=&apos;@&#123;@string/mapFormatString(map[&quot;system&quot;],map[`brand`],map[&quot;version&quot;])&#125;&apos;</span><br></pre></td></tr></table></figure><h3 id="ObservableList"><a href="#ObservableList" class="headerlink" title="ObservableList"></a>ObservableList</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 创建</span><br><span class="line">private ObservableList&lt;Object&gt; observableArrayList = new ObservableArrayList();</span><br><span class="line"></span><br><span class="line"># 数据</span><br><span class="line">observableArrayList.add(0, &quot;Android&quot;);</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">&lt;import type=&quot;android.databinding.ObservableList&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;variable</span><br><span class="line">    name=&quot;list&quot;</span><br><span class="line">    type=&quot;ObservableList&amp;lt;Object&amp;gt;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">android:text=&quot;@&#123;@string/listFormatString(list[0])&#125;&quot;</span><br></pre></td></tr></table></figure><h1 id="高级-Binding"><a href="#高级-Binding" class="headerlink" title="高级 Binding"></a>高级 Binding</h1><h2 id="Dynamic-Variables"><a href="#Dynamic-Variables" class="headerlink" title="Dynamic Variables"></a>Dynamic Variables</h2><p>以 RecyclerView 为例， Adapter 的 Databinding 需要动态生成，这时我们就需要动态创建 Binding 。</p><ul><li>在 OnCreateViewHolder 中创建 binding ，在 onBindViewHolder 中获取 binding。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">        ViewDataBinding viewDataBinding = DataBindingUtil.inflate(LayoutInflater.from(parent.getContext()), R.layout.dynamic_list_item, parent, false);</span><br><span class="line">        DynamicBindingViewHolder holder = new DynamicBindingViewHolder(viewDataBinding.getRoot());</span><br><span class="line">        holder.setBinding(viewDataBinding);</span><br><span class="line">        return holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int getItemCount() &#123;</span><br><span class="line">        return users.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</span><br><span class="line">        User user = users.get(position);</span><br><span class="line">        holder.getBinding().setVariable(BR.user, user);</span><br><span class="line">        holder.getBinding().executePendingBindings();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>构建Holder时直接绑定view<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public DynamicBindingViewHolder onCreateViewHolder(ViewGroup parent, int viewType) &#123;</span><br><span class="line">    View inflate = LayoutInflater.from(parent.getContext()).inflate(R.layout.dynamic_list_item, parent,false);</span><br><span class="line">    return new DynamicBindingViewHolder(inflate);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void onBindViewHolder(DynamicBindingViewHolder holder, int position) &#123;</span><br><span class="line">    User user = users.get(position);</span><br><span class="line">    holder.bind(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public DynamicBindingViewHolder(View itemView) &#123;</span><br><span class="line">    super(itemView);</span><br><span class="line">    binding = DataBindingUtil.bind(itemView);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void bind(User user)&#123;</span><br><span class="line">    binding.setUser(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Attribute-Setters"><a href="#Attribute-Setters" class="headerlink" title="Attribute Setters"></a>Attribute Setters</h2><p>写过自定义控件的童鞋都知道，自定义属性需要在<code>attrs</code> 文件中定义 <code>declare-styleable</code>, 在java代码调用<code>set</code>方法来进行赋值的。</p><p>在 Databinding中，不在 <code>attrs</code> 文件中定义 <code>declare-styleable</code> ，也可以在xml文件中进行赋值，只需要对应的setter方法。</p><p>DataBinding 框架内置了几种调用 set 进行赋值的方式。</p><h3 id="Automatic-Setters"><a href="#Automatic-Setters" class="headerlink" title="Automatic Setters"></a>Automatic Setters</h3><p>属性和set方法对应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;com.example.databindingsamples.view.NameCard</span><br><span class="line">    android:layout_width=&quot;match_parent&quot;</span><br><span class="line">    android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">    app:object=&quot;@&#123;user&#125;&quot; /&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public void setObject(User user)&#123;</span><br><span class="line">    firstName.setText(user.getFirstName());</span><br><span class="line">    lastName.setText(user.getLastName());</span><br><span class="line">    age.setText(user.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Rename-Attribute-Setter"><a href="#Rename-Attribute-Setter" class="headerlink" title="Rename Attribute Setter"></a>Rename Attribute Setter</h3><p>一些属性的命名与 setter 不对应。针对这些函数，可以用 BindingMethods 注解来将属性与 setter 绑定在一起。举个例子，<code>android:tint</code> 属性可以这样与 <code>setImageTintList(ColorStateList)</code>绑定，而不是 setTint:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingMethods</span>(&#123;</span><br><span class="line">      <span class="meta">@BindingMethod</span>(type = <span class="string">"android.widget.ImageView"</span>,</span><br><span class="line">                      attribute = <span class="string">"android:tint"</span>,</span><br><span class="line">                      method = <span class="string">"setImageTintList"</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>Android 框架中的 setter 重命名已经在库中实现了，我们只需要关注自己的 setter。</p><h3 id="Custom-Attribute-Setter"><a href="#Custom-Attribute-Setter" class="headerlink" title="Custom Attribute Setter"></a>Custom Attribute Setter</h3><p>一些属性需要自定义 setter 逻辑。比如目前没有与<code>android:paddingLeft</code> 相对应的 setter，只有一个<code>setPadding(l,t,r,b)</code>函数。结合静态 binding adapter 函数与 BindingAdapter ，我们可以自定义属性 setter。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@BindingAdater(&quot;android:paddingLeft&quot;)</span><br><span class="line">public static void setPaddingLeft(View view,int padding)&#123;</span><br><span class="line">    view.setPadding(padding,</span><br><span class="line">                    view.getPaddingTop(),</span><br><span class="line">                    view.getPaddingRight(),</span><br><span class="line">                    view.getPaddingBotton())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Binding adapter 在其他自定义类型上也很是 very nice 的。 For example，一个 loader 可以在非主线程加载图片。 当存在冲突时，开发者创建的 binding adapter 会覆盖 Data Binding 的默认adapter。<br>我们还可以创建多个 adapters 并且传递多个参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 不需要主动调用</span><br><span class="line">@BindingAdapter(&#123;&quot;imageUrl,&quot;error&quot;&#125;)&#123;</span><br><span class="line">public static void loadImage(ImageView view, String url, Drawable error)&#123;</span><br><span class="line">     Glide.with(context)</span><br><span class="line">                .load(url)</span><br><span class="line">                .error(error)</span><br><span class="line">                .into(imageView); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>layout 文件的 ImageView 按照下面的写法，就会调用上面的adapter。<br>imageUrl 和 error 都使用，并且 imageUrl 为 String，error 为 drawable。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:imageUrl</span>=<span class="string">"@&#123;url&#125;"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:error</span>=<span class="string">"@&#123;@drawable/ic_launcher&#125;"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>Tip： </p><ol><li>在匹配adapter时，自定义命名空间将被忽略</li><li>我们可以为 android 命名空间编写 adapter </li></ol></blockquote><p>事件 handler 仅可以用于只有一个抽象方法的接口或者抽象类,比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onLayoutChange"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOnLayoutChangeListener</span><span class="params">(View view, View.OnLayoutChangeListener oldValue,</span></span></span><br><span class="line"><span class="function"><span class="params">       View.OnLayoutChangeListener newValue)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</span><br><span class="line">        <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnLayoutChangeListener(oldValue);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnLayoutChangeListener(newValue);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当一个 listener 有多个方法，它必须分割成多个 listener 。例如， View.OnAttachStateChangeListener 内置两个函数： <code>onViewAttachedToWindow()</code>与 <code>onViewDetachedFromWindow()</code> 。在这里必须为两个不同的属性创建不同的接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewDetachedFromWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TargetApi</span>(VERSION_CODES.HONEYCOMB_MR1)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnViewAttachedToWindow</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>因为改变一个 listener 会影响到另外一个，我们必须编写三个不同的 adapter，包括修改一个属性的和修改两个属性的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewAttachedToWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewAttachedToWindow attached)</span> </span>&#123;</span><br><span class="line">    setListener(view, <span class="keyword">null</span>, attached);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter</span>(<span class="string">"android:onViewDetachedFromWindow"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, OnViewDetachedFromWindow detached)</span> </span>&#123;</span><br><span class="line">    setListener(view, detached, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BindingAdapter</span>(&#123;<span class="string">"android:onViewDetachedFromWindow"</span>, <span class="string">"android:onViewAttachedToWindow"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">(View view, <span class="keyword">final</span> OnViewDetachedFromWindow detach,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">final</span> OnViewAttachedToWindow attach)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.HONEYCOMB_MR1) &#123;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener newListener;</span><br><span class="line">        <span class="keyword">if</span> (detach == <span class="keyword">null</span> &amp;&amp; attach == <span class="keyword">null</span>) &#123;</span><br><span class="line">            newListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            newListener = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (attach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        attach.onViewAttachedToWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (detach != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        detach.onViewDetachedFromWindow(v);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> OnAttachStateChangeListener oldListener = ListenerUtil.trackListener(view,</span><br><span class="line">                newListener, R.id.onAttachStateChangeListener);</span><br><span class="line">        <span class="keyword">if</span> (oldListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.removeOnAttachStateChangeListener(oldListener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (newListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            view.addOnAttachStateChangeListener(newListener);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的例子比普通情况下复杂，因为 View 是 <code>add/remove</code>　<code>View.OnAttachStateChangeListener</code> 而不是 <code>set</code>。 <code>android.databinding.adapters.ListenerUtil</code>可以用来辅助跟踪旧的 listener 并移除它。</p><p>对应 <code>addOnAttachStateChangeListener(View.OnAttachStateChangeListener) )</code>支持的 api 版本，通过向 <code>OnViewDetachedFromWindow</code> 和 <code>OnViewAttachedToWindow</code> 添加 <code>@TargetApi(VERSION_CODES.HONEYCHOMB_MR1)</code> 注解，<br>Data Binding 代码生成器会知道这些 listener 只会在 Honeycomb MR1 或更新的设备上使用。</p><h2 id="Converters"><a href="#Converters" class="headerlink" title="Converters"></a>Converters</h2><h3 id="Object-Conversions"><a href="#Object-Conversions" class="headerlink" title="Object Conversions"></a>Object Conversions</h3><p>当 binding 表达式返回对象时，会选择一个 setter（自动 Setter，重命名 Setter，自定义 Setter），将返回对象强制转换成 setter 需要的类型。<br>下面是一个使用 ObservableMap 保存数据的例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:text</span>=<span class="string">'@&#123;userMap["lastName"]&#125;'</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在这里， userMap 会返回 Object 类型的值，而返回值会被自动转换成 setText(CharSequence) 需要的类型。当对参数类型存在疑惑时，开发者需要手动做类型转换。</p><h3 id="Custom-Conversions"><a href="#Custom-Conversions" class="headerlink" title="Custom Conversions"></a>Custom Conversions</h3><p>有些时候我们需要自动转换成特定的类型。比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:background</span>=<span class="string">"@&#123;isError ? @color/red : @color/white&#125;"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">   <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>在这里，背景需要的是 Drawable ，但是 color 是一个整数。这时，我们需要使用 BindingConversation 来实现类型的转换。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingConversion</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Android-Studio对Data-Binding的支持"><a href="#Android-Studio对Data-Binding的支持" class="headerlink" title="Android Studio对Data Binding的支持"></a>Android Studio对Data Binding的支持</h1><ul><li><p>Android Studio 支持 Data Binding 表现为：</p><ul><li>语法高亮</li><li>标记表达式语法错误</li><li>XML 代码补全</li><li>跳转到声明或快速文档 </li></ul></li></ul><blockquote><p>注意：数组和泛型类型，如 Observable 类，当没有错误时可能会显示错误。</p></blockquote><ul><li>在预览窗口可显示 Data Binding 表达式的默认值。例如：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@&#123;user.firstName, default=FirstName&#125;"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- TextView 的 text 默认值为 FirstName --&gt;</span></span><br></pre></td></tr></table></figure><p>如果你需要在设计阶段显示默认值，你可以使用 <code>tools</code> 属性代替默认值表达式，详见 <a href="http://tools.android.com/tips/layout-designtime-attributes" target="_blank" rel="noopener">设计阶段布局属性 </a></p><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DataBinding介绍&quot;&gt;&lt;a href=&quot;#DataBinding介绍&quot; class=&quot;headerlink&quot; title=&quot;DataBinding介绍&quot;&gt;&lt;/a&gt;DataBinding介绍&lt;/h1&gt;&lt;p&gt;Data binding 在2015年7月发布的Android Studio v1.3.0 版本上引入，在2016年4月Android Studio v2.0.0 上正式支持。目前为止，Data Binding 已经支持双向绑定了。&lt;/p&gt;
&lt;p&gt;Databinding 是一个实现数据和UI绑定的框架，是一个实现 MVVM 模式的工具，有了 Data Binding，在Android中也可以很方便的实现MVVM开发模式。&lt;/p&gt;
&lt;p&gt;Data Binding 是一个support库，最低支持到Android 2.1（API Level 7+）。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://jhmobile.github.io/categories/Android/"/>
    
    
      <category term="databingding" scheme="http://jhmobile.github.io/tags/databingding/"/>
    
  </entry>
  
  <entry>
    <title>Blog美化、写作、部署</title>
    <link href="http://jhmobile.github.io/2017/02/09/Blog%E7%BE%8E%E5%8C%96%E3%80%81%E5%86%99%E4%BD%9C%E3%80%81%E9%83%A8%E7%BD%B2/"/>
    <id>http://jhmobile.github.io/2017/02/09/Blog美化、写作、部署/</id>
    <published>2017-02-09T02:47:53.000Z</published>
    <updated>2018-10-31T01:40:24.169Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~</p></blockquote><hr><blockquote><p>内容摘要</p><ol><li>利用Hexo Theme美化Blog    </li><li>Hexo命令功能介绍及使用</li></ol></blockquote><hr><a id="more"></a><h1 id="Blog美化"><a href="#Blog美化" class="headerlink" title="Blog美化"></a>Blog美化</h1><p>在开始美化之前，先来了解一下下_config.yml文件，在Hexo中有两份主要的配置文件，名称都为_config.yml。</p><ul><li>站点根目录下的_config.yml<br>主要用于Hexo站点的配置，我们称之为<code>站点配置文件</code></li><li>主题目录的_config.yml，<br>主要用于主题相关的配置，称之为<code>主题配置文件</code></li></ul><h2 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h2><h3 id="Hexo-Theme"><a href="#Hexo-Theme" class="headerlink" title="Hexo Theme"></a><a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Theme</a></h3><p><img src="http://static.zybuluo.com/LeoPoldCrossing/chy99uv8c2g1frc7he5efmc7/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2012.54.24.png" alt="屏幕快照 2017-02-09 12.54.24.png-639.2kB"></p><h3 id="选择主题，安装"><a href="#选择主题，安装" class="headerlink" title="选择主题，安装"></a>选择主题，安装</h3><p>Hexo 安装主题的方式非常简单，只需要将主题文件copy至站点没有理由的 themes 目录下，以Next主题举例：</p><ul><li><p>Step 1 点击进入主题作者的博客，点击Github<br><img src="http://static.zybuluo.com/LeoPoldCrossing/fdj97m3v6l0zn5v07imub0sz/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.03.29.png" alt="屏幕快照 2017-02-09 14.03.29.png-287kB"></p></li><li><p>Step 2 获取主题地址 ，使用Git checkout 代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd &lt;your hexo folder&gt;</span><br><span class="line"># https://github.com/iissnan/hexo-theme-next 为主题代码地址</span><br><span class="line"># themes/next为主题保存路径，next为主题名，可以修改</span><br><span class="line">$ git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li><li><p>Step 3 启用主题<br>修改<code>站点配置文件</code>,找到theme字段，将其值修改为next(主题名)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></li></ul><p>OK~主题安装完成，让我来验证一下，主题是否安装成功</p><ul><li>Step 4 验证主题效果<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 终端输入命令</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure></li></ul><p>使用浏览器访问<a href="http://localhost:4000，查看站点是否正确运行。" target="_blank" rel="noopener">http://localhost:4000，查看站点是否正确运行。</a></p><h2 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h2><h3 id="选择Scheme"><a href="#选择Scheme" class="headerlink" title="选择Scheme"></a>选择Scheme</h3><p>Scheme是Next提供的一种特性，为Next提供了多种不同的外观。</p><ul><li>Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</li><li>Mist - Muse 的紧凑版本，整洁有序的单栏外观</li><li>Pisces - 双栏 Scheme，小家碧玉似的清新</li></ul><p>Scheme的切换通过<code>主题配置文件</code>的scheme字段。效果图，就不上了哈~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">scheme: Muse</span><br><span class="line">#scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br></pre></td></tr></table></figure></p><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>编辑<code>站点配置文件</code>，将language设置为所需要的语言。例如简体中文：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-Hans</span><br></pre></td></tr></table></figure></p><p>Next语言对照表<br><img src="http://static.zybuluo.com/LeoPoldCrossing/r1qp2pht6wrhw0hevowoornk/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2014.43.50.png" alt="屏幕快照 2017-02-09 14.43.50.png-51.1kB"></p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>菜单设置分为三个部分</p><ul><li><p>名称和链接：在<code>主题配置文件</code>中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#配置示例</span><br><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  categories: /categories</span><br><span class="line">  #about: /about</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">  #search: /search</span><br><span class="line">  #sitemap: /sitemap.xml</span><br><span class="line">  #commonweal: /404.html</span><br></pre></td></tr></table></figure></li><li><p>菜单显示文本： Hexo在生成时，使用上面配置的名称查找对应语言的翻译。这些翻译文本放置在<code>themes/${主题名}/languages/{language}.yml</code> ({language}为使用的语言)，如中文 对应的就是 zh-Hans.yml </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: 首页</span><br><span class="line">  archives: 归档</span><br><span class="line">  categories: 分类</span><br><span class="line">  schedule: 日程</span><br><span class="line">  tags: 标签</span><br><span class="line">  about: 关于</span><br><span class="line">  search: 搜索</span><br><span class="line">  commonweal: 公益404</span><br></pre></td></tr></table></figure></li><li><p>菜单图标：对应字段为 menu_icons.<code>主题配置文件</code>，注意键值得大小写需要严格匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">menu_icons:</span><br><span class="line">  # 控制图标是否显示，false为不显示</span><br><span class="line">  enable: true</span><br><span class="line">  #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome</span><br><span class="line">  home: home</span><br><span class="line">  about: user</span><br><span class="line">  categories: th</span><br><span class="line">  schedule: calendar</span><br><span class="line">  tags: tags</span><br><span class="line">  archives: archive</span><br><span class="line">  sitemap: sitemap</span><br><span class="line">  commonweal: heartbeat</span><br></pre></td></tr></table></figure></li></ul><h3 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h3><p>默认情况下，侧栏仅在文章页面（有目录列表时）显示，并放置于右侧位置。可以通过修改<code>主题配置文件</code>中的sidebar字段来控制侧栏的行为。</p><h4 id="设置侧栏位置-，修改sidebar-position的值"><a href="#设置侧栏位置-，修改sidebar-position的值" class="headerlink" title="设置侧栏位置 ，修改sidebar.position的值"></a>设置侧栏位置 ，修改sidebar.position的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">    position: left or right</span><br></pre></td></tr></table></figure><blockquote><p>Tips: 目前仅Pisces Scheme支持position配置，影响5.0.0及更低版本 </p></blockquote><h4 id="设置侧栏显示时机，修改sidebar-diplay的值"><a href="#设置侧栏显示时机，修改sidebar-diplay的值" class="headerlink" title="设置侧栏显示时机，修改sidebar.diplay的值"></a>设置侧栏显示时机，修改sidebar.diplay的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sidebar:</span><br><span class="line">    display: post(默认值)</span><br></pre></td></tr></table></figure><ul><li>post : 默认行为，在文章页面（有目录列表）时显示。</li><li>always: 在所有页面显示</li><li>hide: 在所有页面都隐藏（可以手动展开）</li><li>remove: 完全移除</li></ul><h2 id="其他设置"><a href="#其他设置" class="headerlink" title="其他设置"></a>其他设置</h2><h3 id="头像配置"><a href="#头像配置" class="headerlink" title="头像配置"></a>头像配置</h3><p>编辑<code>站点配置文件</code>，新增 avatar 字段，值为头像的链接地址。<br><img src="http://static.zybuluo.com/LeoPoldCrossing/ztmwwfedxp5mlnl6baurqb7k/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-09%2018.11.06.png" alt="屏幕快照 2017-02-09 18.11.06.png-40.8kB"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 示例：</span><br><span class="line">avatar: /images/avatar.png</span><br></pre></td></tr></table></figure></p><h3 id="作者昵称配置"><a href="#作者昵称配置" class="headerlink" title="作者昵称配置"></a>作者昵称配置</h3><p>编辑<code>站点配置文件</code> author 字段</p><h3 id="站点描述"><a href="#站点描述" class="headerlink" title="站点描述"></a>站点描述</h3><p>编辑<code>站点配置文件</code> description 字段</p><hr><h1 id="Hexo-常用命令"><a href="#Hexo-常用命令" class="headerlink" title="Hexo 常用命令"></a>Hexo 常用命令</h1><p>根据上面的教程，页面做成自己喜欢的样子，乐呵呵的到处点~ 点到分类和标签的时候，一脸大写的懵逼。。。页面一片空白。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">分类页链接</span><br><span class="line">https://leopoldcrossing.github.io/categories/</span><br><span class="line">标签页链接</span><br><span class="line">https://leopoldcrossing.github.io/tags/</span><br><span class="line"></span><br><span class="line">进入 source 目录，发现么有categories和tags文件夹。</span><br></pre></td></tr></table></figure></p><p>问题分析出来，当然要解决了！！！ 是时候让 Hexo 一展身手了。在这里只列出一些常用命令。查看所有命令请移步<a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo命令</a></p><h2 id="new-命令"><a href="#new-命令" class="headerlink" title="new 命令"></a>new 命令</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>新建命令，如果么有设置<code>layout</code>，则使用 _config.yml 文件中的 default_layout 的值， 如果 title 包含空格，请使用引号括起来。</p><h3 id="layout-取值"><a href="#layout-取值" class="headerlink" title="layout 取值"></a>layout 取值</h3><ul><li><p>post： 存储至 source/_post 目录，发布到Blog的文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post &quot;filename&quot;</span><br></pre></td></tr></table></figure></li><li><p>page： 存储值 source 目录，新建页面，比如标签，分类等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 新建标签页面</span><br><span class="line">$ hexo new page tags</span><br><span class="line"># 新建分类页面</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></li><li><p>draft： 存储至 source/_draft 目录，新建草稿</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft &quot;filename&quot;</span><br></pre></td></tr></table></figure></li></ul><p>草稿默认不会显示在页面中，可以通过执行下面的命令显示草稿<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure></p><p>或者修改<code>站点配置文件</code> 的 <code>render_drafts</code> 参数值为true。</p><h2 id="generate-命令"><a href="#generate-命令" class="headerlink" title="generate 命令"></a>generate 命令</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 生成静态文件，即blog目录下的public目录</span><br><span class="line">$ hexo generate</span><br><span class="line">or </span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 文件生成后立刻部署至网站</span><br><span class="line">$ hexo generate -d or -deploy</span><br><span class="line"># 监视文件变动</span><br><span class="line">$ hexo generate -w or -watch</span><br></pre></td></tr></table></figure><h2 id="publish-命令"><a href="#publish-命令" class="headerlink" title="publish 命令"></a>publish 命令</h2><h3 id="功能-1"><a href="#功能-1" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 发布草稿，即将_draft目录下的文件移动到_posts目录</span><br><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure><h2 id="server-命令"><a href="#server-命令" class="headerlink" title="server 命令"></a>server 命令</h2><h3 id="功能-2"><a href="#功能-2" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动服务器，默认情况下，访问网址为： http://localhost:4000/。</span><br><span class="line">$ hexo server</span><br><span class="line">or </span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><h3 id="可选参数-1"><a href="#可选参数-1" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 重设端口</span><br><span class="line">$ hexo server -p or --port</span><br><span class="line"># 只使用静态文件</span><br><span class="line">$ hexo server -s or --static</span><br><span class="line"># 启动日志记录，使用覆盖记录格式</span><br><span class="line">$ hexo server -l or --log</span><br></pre></td></tr></table></figure><h2 id="deploy命令"><a href="#deploy命令" class="headerlink" title="deploy命令"></a>deploy命令</h2><h3 id="功能-3"><a href="#功能-3" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 部署generate命令生成的静态文件至blog</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>###　可选参数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">＃部署之前生成静态文件</span><br><span class="line">＄ hexo deploy -g or --generate</span><br></pre></td></tr></table></figure></p><h2 id="clean-命令"><a href="#clean-命令" class="headerlink" title="clean 命令"></a>clean 命令</h2><h3 id="功能-4"><a href="#功能-4" class="headerlink" title="功能"></a>功能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 清除缓存文件(db.json)和已生成的静态文件(public)</span><br><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure><p>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</p><hr><h1 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h1><h2 id="标签和分类的正确打开姿势"><a href="#标签和分类的正确打开姿势" class="headerlink" title="标签和分类的正确打开姿势"></a>标签和分类的正确打开姿势</h2><ul><li><p>修改tags和categories目录下的index.md文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-02-09 22:53:01</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2017-02-09 22:53:11</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li><li><p>MarkDown 编辑文章添加标签和分类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo + GitHub Pages 搭建专属博客</span><br><span class="line">date: 2017-02-08</span><br><span class="line">tag:</span><br><span class="line">    - Hexo</span><br><span class="line">categories:</span><br><span class="line">    - 教程</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料:"></a>参考资料:</h2><ul><li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a></li><li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next主题使用文档</a></li></ul><hr><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><blockquote><p>用了两天的时间来搭建Blog和整理教程，在添加多说评论系统时，因为多说服务器的异常，本猿还没成功添加。。。后期会补上。Blog搭建，美化，部署可以暂告一段落，后面我会尽快的整理MarkDown的语法及Git的使用。。。给Blog的搭建画上一个圆满的句号~ </p></blockquote><hr><p>author <a href="https://leopoldcrossing.github.io/" target="_blank" rel="noopener">@ygwang</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言：Blog搭建完成，既然是专属博客，也就是自己的一方世界，大家肯定都想让Blog有自己的个人色彩，而不必像诸如CSDN一样各种条条框框~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;内容摘要&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;利用Hexo Theme美化Blog    &lt;/li&gt;
&lt;li&gt;Hexo命令功能介绍及使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;hr&gt;
    
    </summary>
    
      <category term="博客" scheme="http://jhmobile.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://jhmobile.github.io/tags/Hexo/"/>
    
      <category term="Blog" scheme="http://jhmobile.github.io/tags/Blog/"/>
    
  </entry>
  
</feed>
